
lcdtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001324  0800a778  0800a778  0000b778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba9c  0800ba9c  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba9c  0800ba9c  0000ca9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baa4  0800baa4  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baa4  0800baa4  0000caa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800baa8  0800baa8  0000caa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800baac  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1dc  2**0
                  CONTENTS
 10 .bss          00000508  200001dc  200001dc  0000d1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006e4  200006e4  0000d1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b2c  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002639  00000000  00000000  0001dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00020378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca4  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022779  00000000  00000000  00022064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013885  00000000  00000000  000447dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf5a6  00000000  00000000  00058062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127608  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a50  00000000  00000000  0012764c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  0012d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a75c 	.word	0x0800a75c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a75c 	.word	0x0800a75c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b08d      	sub	sp, #52	@ 0x34
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	4611      	mov	r1, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	81bb      	strh	r3, [r7, #12]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b1e      	cmp	r3, #30
 8001000:	d964      	bls.n	80010cc <ILI9341_DrawChar+0xe8>
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db60      	blt.n	80010cc <ILI9341_DrawChar+0xe8>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	3301      	adds	r3, #1
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	3302      	adds	r3, #2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	3303      	adds	r3, #3
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3b20      	subs	r3, #32
 800102c:	7ffa      	ldrb	r2, [r7, #31]
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	3304      	adds	r3, #4
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	4413      	add	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800103a:	7fbb      	ldrb	r3, [r7, #30]
 800103c:	b29a      	uxth	r2, r3
 800103e:	7f7b      	ldrb	r3, [r7, #29]
 8001040:	b29c      	uxth	r4, r3
 8001042:	88f9      	ldrh	r1, [r7, #6]
 8001044:	89b8      	ldrh	r0, [r7, #12]
 8001046:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4623      	mov	r3, r4
 800104c:	f000 fc24 	bl	8001898 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
 8001054:	e035      	b.n	80010c2 <ILI9341_DrawChar+0xde>
	{
		for (int i=0; i < fWidth; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
 800105a:	e02b      	b.n	80010b4 <ILI9341_DrawChar+0xd0>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 800105c:	7f3b      	ldrb	r3, [r7, #28]
 800105e:	6a3a      	ldr	r2, [r7, #32]
 8001060:	fb03 f202 	mul.w	r2, r3, r2
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	10db      	asrs	r3, r3, #3
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	4413      	add	r3, r2
 800106e:	3301      	adds	r3, #1
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	2201      	movs	r2, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8001086:	7dfa      	ldrb	r2, [r7, #23]
 8001088:	7dbb      	ldrb	r3, [r7, #22]
 800108a:	4013      	ands	r3, r2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00d      	beq.n	80010ae <ILI9341_DrawChar+0xca>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	b29a      	uxth	r2, r3
 8001096:	89bb      	ldrh	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	b298      	uxth	r0, r3
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109e:	b29a      	uxth	r2, r3
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	4413      	add	r3, r2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80010a8:	4619      	mov	r1, r3
 80010aa:	f000 fb8f 	bl	80017cc <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	3301      	adds	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	7fbb      	ldrb	r3, [r7, #30]
 80010b6:	6a3a      	ldr	r2, [r7, #32]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dbcf      	blt.n	800105c <ILI9341_DrawChar+0x78>
	for (int j=0; j < fHeight; j++)
 80010bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010be:	3301      	adds	r3, #1
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c2:	7f7b      	ldrb	r3, [r7, #29]
 80010c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbc5      	blt.n	8001056 <ILI9341_DrawChar+0x72>
 80010ca:	e000      	b.n	80010ce <ILI9341_DrawChar+0xea>
	if ((ch < 31) || (ch > 127)) return;
 80010cc:	bf00      	nop
			}
		}
	}
}
 80010ce:	372c      	adds	r7, #44	@ 0x2c
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}

080010d4 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af02      	add	r7, sp, #8
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	4611      	mov	r1, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	460b      	mov	r3, r1
 80010e4:	80fb      	strh	r3, [r7, #6]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3301      	adds	r3, #1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	77bb      	strb	r3, [r7, #30]

	while (*str)
 80010f8:	e02d      	b.n	8001156 <ILI9341_DrawText+0x82>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	7818      	ldrb	r0, [r3, #0]
 80010fe:	88b9      	ldrh	r1, [r7, #4]
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	460b      	mov	r3, r1
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	f7ff ff69 	bl	8000fe4 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	3b20      	subs	r3, #32
 8001118:	7ffa      	ldrb	r2, [r7, #31]
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	3304      	adds	r3, #4
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	4413      	add	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	1c9a      	adds	r2, r3, #2
 8001130:	7fbb      	ldrb	r3, [r7, #30]
 8001132:	429a      	cmp	r2, r3
 8001134:	da07      	bge.n	8001146 <ILI9341_DrawText+0x72>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	b29a      	uxth	r2, r3
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4413      	add	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	3302      	adds	r3, #2
 8001142:	80fb      	strh	r3, [r7, #6]
 8001144:	e004      	b.n	8001150 <ILI9341_DrawText+0x7c>
		}
		else
		{
			X += fWidth;
 8001146:	7fbb      	ldrb	r3, [r7, #30]
 8001148:	b29a      	uxth	r2, r3
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	4413      	add	r3, r2
 800114e:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1cd      	bne.n	80010fa <ILI9341_DrawText+0x26>
	}
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a06      	ldr	r2, [pc, #24]	@ (800118c <HAL_SPI_TxCpltCallback+0x24>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d104      	bne.n	8001182 <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2101      	movs	r1, #1
 800117c:	4804      	ldr	r0, [pc, #16]	@ (8001190 <HAL_SPI_TxCpltCallback+0x28>)
 800117e:	f002 f9f1 	bl	8003564 <HAL_GPIO_WritePin>
  }
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200003d0 	.word	0x200003d0
 8001190:	40020400 	.word	0x40020400

08001194 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800119e:	bf00      	nop
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <ILI9341_SPI_Tx+0x30>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d1f8      	bne.n	80011a0 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	2201      	movs	r2, #1
 80011b2:	4619      	mov	r1, r3
 80011b4:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <ILI9341_SPI_Tx+0x30>)
 80011b6:	f003 f815 	bl	80041e4 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200003d0 	.word	0x200003d0

080011c8 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80011d4:	bf00      	nop
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <ILI9341_SPI_TxBuffer+0x30>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d1f8      	bne.n	80011d6 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	461a      	mov	r2, r3
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <ILI9341_SPI_TxBuffer+0x30>)
 80011ec:	f002 fffa 	bl	80041e4 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200003d0 	.word	0x200003d0

080011fc <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8001206:	2200      	movs	r2, #0
 8001208:	2140      	movs	r1, #64	@ 0x40
 800120a:	4808      	ldr	r0, [pc, #32]	@ (800122c <ILI9341_WriteCommand+0x30>)
 800120c:	f002 f9aa 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001210:	2200      	movs	r2, #0
 8001212:	2101      	movs	r1, #1
 8001214:	4806      	ldr	r0, [pc, #24]	@ (8001230 <ILI9341_WriteCommand+0x34>)
 8001216:	f002 f9a5 	bl	8003564 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffb9 	bl	8001194 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400

08001234 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800123e:	2201      	movs	r2, #1
 8001240:	2140      	movs	r1, #64	@ 0x40
 8001242:	4808      	ldr	r0, [pc, #32]	@ (8001264 <ILI9341_WriteData+0x30>)
 8001244:	f002 f98e 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001248:	2200      	movs	r2, #0
 800124a:	2101      	movs	r1, #1
 800124c:	4806      	ldr	r0, [pc, #24]	@ (8001268 <ILI9341_WriteData+0x34>)
 800124e:	f002 f989 	bl	8003564 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff9d 	bl	8001194 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020000 	.word	0x40020000
 8001268:	40020400 	.word	0x40020400

0800126c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001278:	2201      	movs	r2, #1
 800127a:	2140      	movs	r1, #64	@ 0x40
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <ILI9341_WriteBuffer+0x34>)
 800127e:	f002 f971 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001282:	2200      	movs	r2, #0
 8001284:	2101      	movs	r1, #1
 8001286:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <ILI9341_WriteBuffer+0x38>)
 8001288:	f002 f96c 	bl	8003564 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff99 	bl	80011c8 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400

080012a8 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	80fb      	strh	r3, [r7, #6]
 80012ba:	4603      	mov	r3, r0
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]
 80012c2:	4613      	mov	r3, r2
 80012c4:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b29b      	uxth	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80012e6:	202a      	movs	r0, #42	@ 0x2a
 80012e8:	f7ff ff88 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2104      	movs	r1, #4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffba 	bl	800126c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001308:	883b      	ldrh	r3, [r7, #0]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8001312:	883b      	ldrh	r3, [r7, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001318:	202b      	movs	r0, #43	@ 0x2b
 800131a:	f7ff ff6f 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2104      	movs	r1, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffa1 	bl	800126c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 800132a:	202c      	movs	r0, #44	@ 0x2c
 800132c:	f7ff ff66 	bl	80011fc <ILI9341_WriteCommand>
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}

08001338 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 800133c:	2200      	movs	r2, #0
 800133e:	2110      	movs	r1, #16
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <ILI9341_Reset+0x3c>)
 8001342:	f002 f90f 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001346:	200a      	movs	r0, #10
 8001348:	f001 fa20 	bl	800278c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800134c:	2200      	movs	r2, #0
 800134e:	2101      	movs	r1, #1
 8001350:	4809      	ldr	r0, [pc, #36]	@ (8001378 <ILI9341_Reset+0x40>)
 8001352:	f002 f907 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001356:	200a      	movs	r0, #10
 8001358:	f001 fa18 	bl	800278c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800135c:	2201      	movs	r2, #1
 800135e:	2110      	movs	r1, #16
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <ILI9341_Reset+0x3c>)
 8001362:	f002 f8ff 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001366:	2201      	movs	r2, #1
 8001368:	2101      	movs	r1, #1
 800136a:	4803      	ldr	r0, [pc, #12]	@ (8001378 <ILI9341_Reset+0x40>)
 800136c:	f002 f8fa 	bl	8003564 <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400

0800137c <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001380:	2201      	movs	r2, #1
 8001382:	2110      	movs	r1, #16
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <ILI9341_Enable+0x14>)
 8001386:	f002 f8ed 	bl	8003564 <HAL_GPIO_WritePin>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40020000 	.word	0x40020000

08001394 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8001398:	f7ff fff0 	bl	800137c <ILI9341_Enable>
	ILI9341_Reset();
 800139c:	f7ff ffcc 	bl	8001338 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff ff2b 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(10);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f001 f9f0 	bl	800278c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80013ac:	20cb      	movs	r0, #203	@ 0xcb
 80013ae:	f7ff ff25 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80013b2:	2039      	movs	r0, #57	@ 0x39
 80013b4:	f7ff ff3e 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80013b8:	202c      	movs	r0, #44	@ 0x2c
 80013ba:	f7ff ff3b 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff ff38 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80013c4:	2034      	movs	r0, #52	@ 0x34
 80013c6:	f7ff ff35 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80013ca:	2002      	movs	r0, #2
 80013cc:	f7ff ff32 	bl	8001234 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80013d0:	20cf      	movs	r0, #207	@ 0xcf
 80013d2:	f7ff ff13 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff ff2c 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80013dc:	20c1      	movs	r0, #193	@ 0xc1
 80013de:	f7ff ff29 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80013e2:	2030      	movs	r0, #48	@ 0x30
 80013e4:	f7ff ff26 	bl	8001234 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80013e8:	20e8      	movs	r0, #232	@ 0xe8
 80013ea:	f7ff ff07 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80013ee:	2085      	movs	r0, #133	@ 0x85
 80013f0:	f7ff ff20 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff ff1d 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80013fa:	2078      	movs	r0, #120	@ 0x78
 80013fc:	f7ff ff1a 	bl	8001234 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001400:	20ea      	movs	r0, #234	@ 0xea
 8001402:	f7ff fefb 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff ff14 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff11 	bl	8001234 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8001412:	20ed      	movs	r0, #237	@ 0xed
 8001414:	f7ff fef2 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8001418:	2064      	movs	r0, #100	@ 0x64
 800141a:	f7ff ff0b 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800141e:	2003      	movs	r0, #3
 8001420:	f7ff ff08 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8001424:	2012      	movs	r0, #18
 8001426:	f7ff ff05 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 800142a:	2081      	movs	r0, #129	@ 0x81
 800142c:	f7ff ff02 	bl	8001234 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001430:	20f7      	movs	r0, #247	@ 0xf7
 8001432:	f7ff fee3 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8001436:	2020      	movs	r0, #32
 8001438:	f7ff fefc 	bl	8001234 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 800143c:	20c0      	movs	r0, #192	@ 0xc0
 800143e:	f7ff fedd 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8001442:	2023      	movs	r0, #35	@ 0x23
 8001444:	f7ff fef6 	bl	8001234 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001448:	20c1      	movs	r0, #193	@ 0xc1
 800144a:	f7ff fed7 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 800144e:	2010      	movs	r0, #16
 8001450:	f7ff fef0 	bl	8001234 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8001454:	20c5      	movs	r0, #197	@ 0xc5
 8001456:	f7ff fed1 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 800145a:	203e      	movs	r0, #62	@ 0x3e
 800145c:	f7ff feea 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001460:	2028      	movs	r0, #40	@ 0x28
 8001462:	f7ff fee7 	bl	8001234 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8001466:	20c7      	movs	r0, #199	@ 0xc7
 8001468:	f7ff fec8 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 800146c:	2086      	movs	r0, #134	@ 0x86
 800146e:	f7ff fee1 	bl	8001234 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8001472:	2036      	movs	r0, #54	@ 0x36
 8001474:	f7ff fec2 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001478:	2048      	movs	r0, #72	@ 0x48
 800147a:	f7ff fedb 	bl	8001234 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800147e:	203a      	movs	r0, #58	@ 0x3a
 8001480:	f7ff febc 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8001484:	2055      	movs	r0, #85	@ 0x55
 8001486:	f7ff fed5 	bl	8001234 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 800148a:	20b1      	movs	r0, #177	@ 0xb1
 800148c:	f7ff feb6 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fecf 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8001496:	2018      	movs	r0, #24
 8001498:	f7ff fecc 	bl	8001234 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 800149c:	20b6      	movs	r0, #182	@ 0xb6
 800149e:	f7ff fead 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80014a2:	2008      	movs	r0, #8
 80014a4:	f7ff fec6 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80014a8:	2082      	movs	r0, #130	@ 0x82
 80014aa:	f7ff fec3 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80014ae:	2027      	movs	r0, #39	@ 0x27
 80014b0:	f7ff fec0 	bl	8001234 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80014b4:	20f2      	movs	r0, #242	@ 0xf2
 80014b6:	f7ff fea1 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff feba 	bl	8001234 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80014c0:	2026      	movs	r0, #38	@ 0x26
 80014c2:	f7ff fe9b 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff feb4 	bl	8001234 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80014cc:	20e0      	movs	r0, #224	@ 0xe0
 80014ce:	f7ff fe95 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f7ff feae 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80014d8:	2031      	movs	r0, #49	@ 0x31
 80014da:	f7ff feab 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80014de:	202b      	movs	r0, #43	@ 0x2b
 80014e0:	f7ff fea8 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80014e4:	200c      	movs	r0, #12
 80014e6:	f7ff fea5 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 80014ea:	200e      	movs	r0, #14
 80014ec:	f7ff fea2 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80014f0:	2008      	movs	r0, #8
 80014f2:	f7ff fe9f 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 80014f6:	204e      	movs	r0, #78	@ 0x4e
 80014f8:	f7ff fe9c 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 80014fc:	20f1      	movs	r0, #241	@ 0xf1
 80014fe:	f7ff fe99 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8001502:	2037      	movs	r0, #55	@ 0x37
 8001504:	f7ff fe96 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001508:	2007      	movs	r0, #7
 800150a:	f7ff fe93 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 800150e:	2010      	movs	r0, #16
 8001510:	f7ff fe90 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001514:	2003      	movs	r0, #3
 8001516:	f7ff fe8d 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 800151a:	200e      	movs	r0, #14
 800151c:	f7ff fe8a 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001520:	2009      	movs	r0, #9
 8001522:	f7ff fe87 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fe84 	bl	8001234 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 800152c:	20e1      	movs	r0, #225	@ 0xe1
 800152e:	f7ff fe65 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff fe7e 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001538:	200e      	movs	r0, #14
 800153a:	f7ff fe7b 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 800153e:	2014      	movs	r0, #20
 8001540:	f7ff fe78 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001544:	2003      	movs	r0, #3
 8001546:	f7ff fe75 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 800154a:	2011      	movs	r0, #17
 800154c:	f7ff fe72 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001550:	2007      	movs	r0, #7
 8001552:	f7ff fe6f 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001556:	2031      	movs	r0, #49	@ 0x31
 8001558:	f7ff fe6c 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 800155c:	20c1      	movs	r0, #193	@ 0xc1
 800155e:	f7ff fe69 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8001562:	2048      	movs	r0, #72	@ 0x48
 8001564:	f7ff fe66 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001568:	2008      	movs	r0, #8
 800156a:	f7ff fe63 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800156e:	200f      	movs	r0, #15
 8001570:	f7ff fe60 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001574:	200c      	movs	r0, #12
 8001576:	f7ff fe5d 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800157a:	2031      	movs	r0, #49	@ 0x31
 800157c:	f7ff fe5a 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001580:	2036      	movs	r0, #54	@ 0x36
 8001582:	f7ff fe57 	bl	8001234 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001586:	200f      	movs	r0, #15
 8001588:	f7ff fe54 	bl	8001234 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 800158c:	2011      	movs	r0, #17
 800158e:	f7ff fe35 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(100);
 8001592:	2064      	movs	r0, #100	@ 0x64
 8001594:	f001 f8fa 	bl	800278c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8001598:	2029      	movs	r0, #41	@ 0x29
 800159a:	f7ff fe2f 	bl	80011fc <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f802 	bl	80015a8 <ILI9341_SetRotation>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80015b2:	2036      	movs	r0, #54	@ 0x36
 80015b4:	f7ff fe22 	bl	80011fc <ILI9341_WriteCommand>
	HAL_Delay(1);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f001 f8e7 	bl	800278c <HAL_Delay>

	switch(rotation)
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d837      	bhi.n	8001634 <ILI9341_SetRotation+0x8c>
 80015c4:	a201      	add	r2, pc, #4	@ (adr r2, 80015cc <ILI9341_SetRotation+0x24>)
 80015c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ca:	bf00      	nop
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	080015f3 	.word	0x080015f3
 80015d4:	08001609 	.word	0x08001609
 80015d8:	0800161f 	.word	0x0800161f
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80015dc:	2048      	movs	r0, #72	@ 0x48
 80015de:	f7ff fe29 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <ILI9341_SetRotation+0x98>)
 80015e4:	22f0      	movs	r2, #240	@ 0xf0
 80015e6:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80015e8:	4b16      	ldr	r3, [pc, #88]	@ (8001644 <ILI9341_SetRotation+0x9c>)
 80015ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015ee:	801a      	strh	r2, [r3, #0]
		break;
 80015f0:	e021      	b.n	8001636 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 80015f2:	2028      	movs	r0, #40	@ 0x28
 80015f4:	f7ff fe1e 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <ILI9341_SetRotation+0x98>)
 80015fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80015fe:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <ILI9341_SetRotation+0x9c>)
 8001602:	22f0      	movs	r2, #240	@ 0xf0
 8001604:	801a      	strh	r2, [r3, #0]
		break;
 8001606:	e016      	b.n	8001636 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001608:	2088      	movs	r0, #136	@ 0x88
 800160a:	f7ff fe13 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <ILI9341_SetRotation+0x98>)
 8001610:	22f0      	movs	r2, #240	@ 0xf0
 8001612:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <ILI9341_SetRotation+0x9c>)
 8001616:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800161a:	801a      	strh	r2, [r3, #0]
		break;
 800161c:	e00b      	b.n	8001636 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 800161e:	20e8      	movs	r0, #232	@ 0xe8
 8001620:	f7ff fe08 	bl	8001234 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <ILI9341_SetRotation+0x98>)
 8001626:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800162a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <ILI9341_SetRotation+0x9c>)
 800162e:	22f0      	movs	r2, #240	@ 0xf0
 8001630:	801a      	strh	r2, [r3, #0]
		break;
 8001632:	e000      	b.n	8001636 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001634:	bf00      	nop
	}
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000002 	.word	0x20000002
 8001644:	20000000 	.word	0x20000000

08001648 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800164c:	b08d      	sub	sp, #52	@ 0x34
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	6039      	str	r1, [r7, #0]
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	466b      	mov	r3, sp
 8001658:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001666:	d202      	bcs.n	800166e <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800166c:	e002      	b.n	8001674 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 800166e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	2140      	movs	r1, #64	@ 0x40
 8001678:	483e      	ldr	r0, [pc, #248]	@ (8001774 <ILI9341_DrawColorBurst+0x12c>)
 800167a:	f001 ff73 	bl	8003564 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2101      	movs	r1, #1
 8001682:	483d      	ldr	r0, [pc, #244]	@ (8001778 <ILI9341_DrawColorBurst+0x130>)
 8001684:	f001 ff6e 	bl	8003564 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	b29b      	uxth	r3, r3
 800168e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8001692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001694:	460b      	mov	r3, r1
 8001696:	3b01      	subs	r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	2300      	movs	r3, #0
 800169c:	4688      	mov	r8, r1
 800169e:	4699      	mov	r9, r3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016b4:	2300      	movs	r3, #0
 80016b6:	460c      	mov	r4, r1
 80016b8:	461d      	mov	r5, r3
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	00eb      	lsls	r3, r5, #3
 80016c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016c8:	00e2      	lsls	r2, r4, #3
 80016ca:	1dcb      	adds	r3, r1, #7
 80016cc:	08db      	lsrs	r3, r3, #3
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	ebad 0d03 	sub.w	sp, sp, r3
 80016d4:	466b      	mov	r3, sp
 80016d6:	3300      	adds	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016de:	e00e      	b.n	80016fe <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e4:	4413      	add	r3, r2
 80016e6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80016ea:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 80016ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ee:	3301      	adds	r3, #1
 80016f0:	88fa      	ldrh	r2, [r7, #6]
 80016f2:	b2d1      	uxtb	r1, r2
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 80016f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fa:	3302      	adds	r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001702:	429a      	cmp	r2, r3
 8001704:	d3ec      	bcc.n	80016e0 <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171a:	fbb3 f2f2 	udiv	r2, r3, r2
 800171e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001720:	fb01 f202 	mul.w	r2, r1, r2
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d010      	beq.n	8001750 <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
 8001732:	e009      	b.n	8001748 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001736:	b29a      	uxth	r2, r3
 8001738:	230a      	movs	r3, #10
 800173a:	69b9      	ldr	r1, [r7, #24]
 800173c:	480f      	ldr	r0, [pc, #60]	@ (800177c <ILI9341_DrawColorBurst+0x134>)
 800173e:	f002 fc0c 	bl	8003f5a <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	3301      	adds	r3, #1
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
 8001748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d3f1      	bcc.n	8001734 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	b29a      	uxth	r2, r3
 8001754:	230a      	movs	r3, #10
 8001756:	69b9      	ldr	r1, [r7, #24]
 8001758:	4808      	ldr	r0, [pc, #32]	@ (800177c <ILI9341_DrawColorBurst+0x134>)
 800175a:	f002 fbfe 	bl	8003f5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2101      	movs	r1, #1
 8001762:	4805      	ldr	r0, [pc, #20]	@ (8001778 <ILI9341_DrawColorBurst+0x130>)
 8001764:	f001 fefe 	bl	8003564 <HAL_GPIO_WritePin>
 8001768:	46b5      	mov	sp, r6
}
 800176a:	bf00      	nop
 800176c:	3734      	adds	r7, #52	@ 0x34
 800176e:	46bd      	mov	sp, r7
 8001770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	200003d0 	.word	0x200003d0

08001780 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <ILI9341_FillScreen+0x44>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <ILI9341_FillScreen+0x48>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	2100      	movs	r1, #0
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff fd85 	bl	80012a8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <ILI9341_FillScreen+0x44>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <ILI9341_FillScreen+0x48>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	fb02 f303 	mul.w	r3, r2, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff46 	bl	8001648 <ILI9341_DrawColorBurst>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000002 	.word	0x20000002
 80017c8:	20000000 	.word	0x20000000

080017cc <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
 80017d6:	460b      	mov	r3, r1
 80017d8:	80bb      	strh	r3, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80017de:	4b2c      	ldr	r3, [pc, #176]	@ (8001890 <ILI9341_DrawPixel+0xc4>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	88fa      	ldrh	r2, [r7, #6]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d24d      	bcs.n	8001886 <ILI9341_DrawPixel+0xba>
 80017ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <ILI9341_DrawPixel+0xc8>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	88ba      	ldrh	r2, [r7, #4]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d247      	bcs.n	8001886 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	753b      	strb	r3, [r7, #20]
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	757b      	strb	r3, [r7, #21]
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	3301      	adds	r3, #1
 800180a:	121b      	asrs	r3, r3, #8
 800180c:	b2db      	uxtb	r3, r3
 800180e:	75bb      	strb	r3, [r7, #22]
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	3301      	adds	r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	743b      	strb	r3, [r7, #16]
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	747b      	strb	r3, [r7, #17]
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	3301      	adds	r3, #1
 800182e:	121b      	asrs	r3, r3, #8
 8001830:	b2db      	uxtb	r3, r3
 8001832:	74bb      	strb	r3, [r7, #18]
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	b29b      	uxth	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	733b      	strb	r3, [r7, #12]
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 800184e:	202a      	movs	r0, #42	@ 0x2a
 8001850:	f7ff fcd4 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2104      	movs	r1, #4
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fd06 	bl	800126c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001860:	202b      	movs	r0, #43	@ 0x2b
 8001862:	f7ff fccb 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2104      	movs	r1, #4
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fcfd 	bl	800126c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001872:	202c      	movs	r0, #44	@ 0x2c
 8001874:	f7ff fcc2 	bl	80011fc <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fcf4 	bl	800126c <ILI9341_WriteBuffer>
 8001884:	e000      	b.n	8001888 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001886:	bf00      	nop
}
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000002 	.word	0x20000002
 8001894:	20000000 	.word	0x20000000

08001898 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4604      	mov	r4, r0
 80018a0:	4608      	mov	r0, r1
 80018a2:	4611      	mov	r1, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	4623      	mov	r3, r4
 80018a8:	80fb      	strh	r3, [r7, #6]
 80018aa:	4603      	mov	r3, r0
 80018ac:	80bb      	strh	r3, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	807b      	strh	r3, [r7, #2]
 80018b2:	4613      	mov	r3, r2
 80018b4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <ILI9341_DrawRectangle+0xb0>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d23d      	bcs.n	800193e <ILI9341_DrawRectangle+0xa6>
 80018c2:	4b22      	ldr	r3, [pc, #136]	@ (800194c <ILI9341_DrawRectangle+0xb4>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	88ba      	ldrh	r2, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d237      	bcs.n	800193e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 80018ce:	88fa      	ldrh	r2, [r7, #6]
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001948 <ILI9341_DrawRectangle+0xb0>)
 80018d6:	8812      	ldrh	r2, [r2, #0]
 80018d8:	b292      	uxth	r2, r2
 80018da:	4293      	cmp	r3, r2
 80018dc:	dd05      	ble.n	80018ea <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <ILI9341_DrawRectangle+0xb0>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 80018ea:	88ba      	ldrh	r2, [r7, #4]
 80018ec:	883b      	ldrh	r3, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a16      	ldr	r2, [pc, #88]	@ (800194c <ILI9341_DrawRectangle+0xb4>)
 80018f2:	8812      	ldrh	r2, [r2, #0]
 80018f4:	b292      	uxth	r2, r2
 80018f6:	4293      	cmp	r3, r2
 80018f8:	dd05      	ble.n	8001906 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <ILI9341_DrawRectangle+0xb4>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	88bb      	ldrh	r3, [r7, #4]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	4413      	add	r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b29c      	uxth	r4, r3
 8001912:	88ba      	ldrh	r2, [r7, #4]
 8001914:	883b      	ldrh	r3, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	88b9      	ldrh	r1, [r7, #4]
 8001920:	88f8      	ldrh	r0, [r7, #6]
 8001922:	4622      	mov	r2, r4
 8001924:	f7ff fcc0 	bl	80012a8 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001928:	883b      	ldrh	r3, [r7, #0]
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	461a      	mov	r2, r3
 8001932:	8b3b      	ldrh	r3, [r7, #24]
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fe86 	bl	8001648 <ILI9341_DrawColorBurst>
 800193c:	e000      	b.n	8001940 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800193e:	bf00      	nop
}
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	20000002 	.word	0x20000002
 800194c:	20000000 	.word	0x20000000

08001950 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <__NVIC_SystemReset+0x24>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001962:	4904      	ldr	r1, [pc, #16]	@ (8001974 <__NVIC_SystemReset+0x24>)
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <__NVIC_SystemReset+0x28>)
 8001966:	4313      	orrs	r3, r2
 8001968:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800196a:	f3bf 8f4f 	dsb	sy
}
 800196e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <__NVIC_SystemReset+0x20>
 8001974:	e000ed00 	.word	0xe000ed00
 8001978:	05fa0004 	.word	0x05fa0004

0800197c <Software_Reset>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Software_Reset(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
    NVIC_SystemReset(); // Reset hệ thống bằng NVIC
 8001980:	f7ff ffe6 	bl	8001950 <__NVIC_SystemReset>

08001984 <delay>:
}

//DHT11

void delay (uint16_t time)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <delay+0x30>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8001996:	bf00      	nop
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <delay+0x30>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3f9      	bcc.n	8001998 <delay+0x14>
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000488 	.word	0x20000488

080019b8 <Set_Pin_Output>:
#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_3
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	4619      	mov	r1, r3
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f001 fc08 	bl	80031fc <HAL_GPIO_Init>
}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f001 fbea 	bl	80031fc <HAL_GPIO_Init>
}
 8001a28:	bf00      	nop
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <DHT11_Start>:


void DHT11_Start (void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001a34:	2108      	movs	r1, #8
 8001a36:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <DHT11_Start+0x3c>)
 8001a38:	f7ff ffbe 	bl	80019b8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2108      	movs	r1, #8
 8001a40:	480a      	ldr	r0, [pc, #40]	@ (8001a6c <DHT11_Start+0x3c>)
 8001a42:	f001 fd8f 	bl	8003564 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8001a46:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001a4a:	f7ff ff9b 	bl	8001984 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2108      	movs	r1, #8
 8001a52:	4806      	ldr	r0, [pc, #24]	@ (8001a6c <DHT11_Start+0x3c>)
 8001a54:	f001 fd86 	bl	8003564 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8001a58:	2014      	movs	r0, #20
 8001a5a:	f7ff ff93 	bl	8001984 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001a5e:	2108      	movs	r1, #8
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <DHT11_Start+0x3c>)
 8001a62:	f7ff ffc7 	bl	80019f4 <Set_Pin_Input>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40020000 	.word	0x40020000

08001a70 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001a7a:	2028      	movs	r0, #40	@ 0x28
 8001a7c:	f7ff ff82 	bl	8001984 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001a80:	2108      	movs	r1, #8
 8001a82:	4811      	ldr	r0, [pc, #68]	@ (8001ac8 <DHT11_Check_Response+0x58>)
 8001a84:	f001 fd56 	bl	8003534 <HAL_GPIO_ReadPin>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10e      	bne.n	8001aac <DHT11_Check_Response+0x3c>
	{
		delay (80);
 8001a8e:	2050      	movs	r0, #80	@ 0x50
 8001a90:	f7ff ff78 	bl	8001984 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001a94:	2108      	movs	r1, #8
 8001a96:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <DHT11_Check_Response+0x58>)
 8001a98:	f001 fd4c 	bl	8003534 <HAL_GPIO_ReadPin>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <DHT11_Check_Response+0x38>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	71fb      	strb	r3, [r7, #7]
 8001aa6:	e001      	b.n	8001aac <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 8001aa8:	23ff      	movs	r3, #255	@ 0xff
 8001aaa:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001aac:	bf00      	nop
 8001aae:	2108      	movs	r1, #8
 8001ab0:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <DHT11_Check_Response+0x58>)
 8001ab2:	f001 fd3f 	bl	8003534 <HAL_GPIO_ReadPin>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f8      	bne.n	8001aae <DHT11_Check_Response+0x3e>

	return Response;
 8001abc:	79fb      	ldrb	r3, [r7, #7]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40020000 	.word	0x40020000

08001acc <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71bb      	strb	r3, [r7, #6]
 8001ad6:	e037      	b.n	8001b48 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001ad8:	bf00      	nop
 8001ada:	2108      	movs	r1, #8
 8001adc:	481e      	ldr	r0, [pc, #120]	@ (8001b58 <DHT11_Read+0x8c>)
 8001ade:	f001 fd29 	bl	8003534 <HAL_GPIO_ReadPin>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f8      	beq.n	8001ada <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8001ae8:	2028      	movs	r0, #40	@ 0x28
 8001aea:	f7ff ff4b 	bl	8001984 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001aee:	2108      	movs	r1, #8
 8001af0:	4819      	ldr	r0, [pc, #100]	@ (8001b58 <DHT11_Read+0x8c>)
 8001af2:	f001 fd1f 	bl	8003534 <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10e      	bne.n	8001b1a <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2201      	movs	r2, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	b25b      	sxtb	r3, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	b25a      	sxtb	r2, r3
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	4013      	ands	r3, r2
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	e00b      	b.n	8001b32 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001b1a:	79bb      	ldrb	r3, [r7, #6]
 8001b1c:	f1c3 0307 	rsb	r3, r3, #7
 8001b20:	2201      	movs	r2, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	b25a      	sxtb	r2, r3
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8001b32:	bf00      	nop
 8001b34:	2108      	movs	r1, #8
 8001b36:	4808      	ldr	r0, [pc, #32]	@ (8001b58 <DHT11_Read+0x8c>)
 8001b38:	f001 fcfc 	bl	8003534 <HAL_GPIO_ReadPin>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f8      	bne.n	8001b34 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8001b42:	79bb      	ldrb	r3, [r7, #6]
 8001b44:	3301      	adds	r3, #1
 8001b46:	71bb      	strb	r3, [r7, #6]
 8001b48:	79bb      	ldrb	r3, [r7, #6]
 8001b4a:	2b07      	cmp	r3, #7
 8001b4c:	d9c4      	bls.n	8001ad8 <DHT11_Read+0xc>
	}
	return i;
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40020000 	.word	0x40020000

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0a2      	sub	sp, #136	@ 0x88
 8001b60:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	uint32_t startTime = HAL_GetTick(); // Lấy thời điểm bắt đầu
 8001b62:	f000 fe07 	bl	8002774 <HAL_GetTick>
 8001b66:	67b8      	str	r0, [r7, #120]	@ 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b68:	f000 fd9e 	bl	80026a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6c:	f000 f914 	bl	8001d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b70:	f000 fa54 	bl	800201c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b74:	f000 fa2a 	bl	8001fcc <MX_DMA_Init>
  MX_SPI1_Init();
 8001b78:	f000 f978 	bl	8001e6c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001b7c:	f000 f9fc 	bl	8001f78 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001b80:	f000 f9aa 	bl	8001ed8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

 HAL_TIM_Base_Start(&htim1);
 8001b84:	486f      	ldr	r0, [pc, #444]	@ (8001d44 <main+0x1e8>)
 8001b86:	f002 fea9 	bl	80048dc <HAL_TIM_Base_Start>





  DHT11_Start();
 8001b8a:	f7ff ff51 	bl	8001a30 <DHT11_Start>
 	  	   	  Presence = DHT11_Check_Response();
 8001b8e:	f7ff ff6f 	bl	8001a70 <DHT11_Check_Response>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b6c      	ldr	r3, [pc, #432]	@ (8001d48 <main+0x1ec>)
 8001b98:	701a      	strb	r2, [r3, #0]
 	  	   	  Rh_byte1 = DHT11_Read ();
 8001b9a:	f7ff ff97 	bl	8001acc <DHT11_Read>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d4c <main+0x1f0>)
 8001ba4:	701a      	strb	r2, [r3, #0]
 	  	   	  Rh_byte2 = DHT11_Read ();
 8001ba6:	f7ff ff91 	bl	8001acc <DHT11_Read>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b68      	ldr	r3, [pc, #416]	@ (8001d50 <main+0x1f4>)
 8001bb0:	701a      	strb	r2, [r3, #0]
 	  	   	  Temp_byte1 = DHT11_Read ();
 8001bb2:	f7ff ff8b 	bl	8001acc <DHT11_Read>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b66      	ldr	r3, [pc, #408]	@ (8001d54 <main+0x1f8>)
 8001bbc:	701a      	strb	r2, [r3, #0]
 	  	   	  Temp_byte2 = DHT11_Read ();
 8001bbe:	f7ff ff85 	bl	8001acc <DHT11_Read>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b64      	ldr	r3, [pc, #400]	@ (8001d58 <main+0x1fc>)
 8001bc8:	701a      	strb	r2, [r3, #0]
 	  	   	  SUM = DHT11_Read();
 8001bca:	f7ff ff7f 	bl	8001acc <DHT11_Read>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b62      	ldr	r3, [pc, #392]	@ (8001d5c <main+0x200>)
 8001bd4:	801a      	strh	r2, [r3, #0]

 	  	   	  TEMP = Temp_byte1;
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d54 <main+0x1f8>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b60      	ldr	r3, [pc, #384]	@ (8001d60 <main+0x204>)
 8001bde:	801a      	strh	r2, [r3, #0]
 	  	   	  RH = Rh_byte1;
 8001be0:	4b5a      	ldr	r3, [pc, #360]	@ (8001d4c <main+0x1f0>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d64 <main+0x208>)
 8001be8:	801a      	strh	r2, [r3, #0]

 	  	   	  Temperature = (float) TEMP;
 8001bea:	4b5d      	ldr	r3, [pc, #372]	@ (8001d60 <main+0x204>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d68 <main+0x20c>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
 	  	   	  Humidity = (float) RH;
 8001bfc:	4b59      	ldr	r3, [pc, #356]	@ (8001d64 <main+0x208>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c08:	4b58      	ldr	r3, [pc, #352]	@ (8001d6c <main+0x210>)
 8001c0a:	edc3 7a00 	vstr	s15, [r3]
 	  	   	     Gửi chuỗi qua UART1
 	  	   	    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); */

 	  	 	/* Chuẩn bị chuỗi hiển thị */

 	  	   ILI9341_Init();
 8001c0e:	f7ff fbc1 	bl	8001394 <ILI9341_Init>
 	  	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff fcc8 	bl	80015a8 <ILI9341_SetRotation>
 	  //	Displaynenthanhpho();
 	  	   	  	  	ILI9341_FillScreen(BLACK);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff fdb1 	bl	8001780 <ILI9341_FillScreen>

 	  	   	 char message[] = "thoitiet"; // Chuỗi dữ liệu cần gửi
 8001c1e:	4a54      	ldr	r2, [pc, #336]	@ (8001d70 <main+0x214>)
 8001c20:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c26:	c303      	stmia	r3!, {r0, r1}
 8001c28:	701a      	strb	r2, [r3, #0]

 	  	   	 //  HAL_Delay(1000); // �?ợi 1 giây trước khi gửi tiếp
 	  	   	   HAL_UART_Receive_IT(&huart1, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);
 8001c2a:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8001c2e:	4951      	ldr	r1, [pc, #324]	@ (8001d74 <main+0x218>)
 8001c30:	4851      	ldr	r0, [pc, #324]	@ (8001d78 <main+0x21c>)
 8001c32:	f003 fa20 	bl	8005076 <HAL_UART_Receive_IT>


 	  	   	      HAL_Delay(1000); // �?ợi 1 giây trước khi gửi tiếp
 8001c36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c3a:	f000 fda7 	bl	800278c <HAL_Delay>
 	  	   	      HAL_UART_Transmit(&huart1, (uint8_t *)message, sizeof(message) - 1, HAL_MAX_DELAY);
 8001c3e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	2208      	movs	r2, #8
 8001c48:	484b      	ldr	r0, [pc, #300]	@ (8001d78 <main+0x21c>)
 8001c4a:	f003 f989 	bl	8004f60 <HAL_UART_Transmit>




 	  	 char temp_buffer[50];
 	  	  	  	 	  	   	    snprintf(temp_buffer, sizeof(temp_buffer), "TempIn: %.1f C", Temperature);
 8001c4e:	4b46      	ldr	r3, [pc, #280]	@ (8001d68 <main+0x20c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc78 	bl	8000548 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001c60:	e9cd 2300 	strd	r2, r3, [sp]
 8001c64:	4a45      	ldr	r2, [pc, #276]	@ (8001d7c <main+0x220>)
 8001c66:	2132      	movs	r1, #50	@ 0x32
 8001c68:	f005 f8ae 	bl	8006dc8 <sniprintf>

 	  	  	  	 	  	   	    char hum_buffer[50];
 	  	  	  	 	  	   	    snprintf(hum_buffer, sizeof(hum_buffer), "HumIn: %.1f %%", Humidity);
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d6c <main+0x210>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc69 	bl	8000548 <__aeabi_f2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	1d38      	adds	r0, r7, #4
 8001c7c:	e9cd 2300 	strd	r2, r3, [sp]
 8001c80:	4a3f      	ldr	r2, [pc, #252]	@ (8001d80 <main+0x224>)
 8001c82:	2132      	movs	r1, #50	@ 0x32
 8001c84:	f005 f8a0 	bl	8006dc8 <sniprintf>

 	  	  	  	 	  	   	    /* Xóa màn hình và hiển thị thông tin mới */
 	  	  	  	 	  	   	  //  ILI9341_FillRect(0, y_position, 240, 40, BLACK); // Xóa vùng hiển thị cũ
 	  	  	  	 	  	   	    ILI9341_DrawText(temp_buffer, FONT2, 25, 295, BLUE, BLACK); // Hiển thị nhiệt độ
 8001c88:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	231f      	movs	r3, #31
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f240 1327 	movw	r3, #295	@ 0x127
 8001c98:	2219      	movs	r2, #25
 8001c9a:	493a      	ldr	r1, [pc, #232]	@ (8001d84 <main+0x228>)
 8001c9c:	f7ff fa1a 	bl	80010d4 <ILI9341_DrawText>
 	  	  	  	 	  	   	    ILI9341_DrawText(hum_buffer, FONT2, 125, 295, BLUE, BLACK); // Hiển thị độ ẩm
 8001ca0:	1d38      	adds	r0, r7, #4
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	231f      	movs	r3, #31
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	f240 1327 	movw	r3, #295	@ 0x127
 8001cae:	227d      	movs	r2, #125	@ 0x7d
 8001cb0:	4934      	ldr	r1, [pc, #208]	@ (8001d84 <main+0x228>)
 8001cb2:	f7ff fa0f 	bl	80010d4 <ILI9341_DrawText>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (uart_rx_complete) {
 8001cb6:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <main+0x22c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d035      	beq.n	8001d2c <main+0x1d0>
	  	              uart_rx_complete = 0; // Xóa c�? nhận dữ liệu
 8001cc0:	4b31      	ldr	r3, [pc, #196]	@ (8001d88 <main+0x22c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]

	  	              // Phân tích chuỗi nhận được
	  	              char *line = strtok(uart_rx_buffer, "\n"); // Tách chuỗi theo dòng
 8001cc6:	4931      	ldr	r1, [pc, #196]	@ (8001d8c <main+0x230>)
 8001cc8:	482a      	ldr	r0, [pc, #168]	@ (8001d74 <main+0x218>)
 8001cca:	f005 f91d 	bl	8006f08 <strtok>
 8001cce:	67f8      	str	r0, [r7, #124]	@ 0x7c
	  	              while (line != NULL) {
 8001cd0:	e023      	b.n	8001d1a <main+0x1be>
	  	                  // Hiển thị từng dòng lên LCD
	  	                  ILI9341_DrawText(line, FONT1, 10, y_position,GREEN, BLACK);
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <main+0x234>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2200      	movs	r2, #0
 8001cda:	9201      	str	r2, [sp, #4]
 8001cdc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001ce0:	9200      	str	r2, [sp, #0]
 8001ce2:	220a      	movs	r2, #10
 8001ce4:	492b      	ldr	r1, [pc, #172]	@ (8001d94 <main+0x238>)
 8001ce6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001ce8:	f7ff f9f4 	bl	80010d4 <ILI9341_DrawText>
	  	                  y_position += 20; // Xuống dòng
 8001cec:	4b28      	ldr	r3, [pc, #160]	@ (8001d90 <main+0x234>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3314      	adds	r3, #20
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <main+0x234>)
 8001cf8:	801a      	strh	r2, [r3, #0]
	  	                 //     y_position = 10; // Quay lại dòng đầu tiên
	  	                   //   ILI9341_FillScreen(BLACK); // Xóa màn hình
	  	                //  }

	  	                  // Gửi phản hồi lại qua UART
	  	                  HAL_UART_Transmit(&huart1, (uint8_t *)line, strlen(line), HAL_MAX_DELAY);
 8001cfa:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001cfc:	f7fe fab8 	bl	8000270 <strlen>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001d0a:	481b      	ldr	r0, [pc, #108]	@ (8001d78 <main+0x21c>)
 8001d0c:	f003 f928 	bl	8004f60 <HAL_UART_Transmit>

	  	                  // Tách dòng tiếp theo
	  	                  line = strtok(NULL, "\n");
 8001d10:	491e      	ldr	r1, [pc, #120]	@ (8001d8c <main+0x230>)
 8001d12:	2000      	movs	r0, #0
 8001d14:	f005 f8f8 	bl	8006f08 <strtok>
 8001d18:	67f8      	str	r0, [r7, #124]	@ 0x7c
	  	              while (line != NULL) {
 8001d1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1d8      	bne.n	8001cd2 <main+0x176>
	  	              }

	  	              // Xóa buffer sau khi xử lý
	  	              memset(uart_rx_buffer, 0, BUFFER_SIZE);
 8001d20:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8001d24:	2100      	movs	r1, #0
 8001d26:	4813      	ldr	r0, [pc, #76]	@ (8001d74 <main+0x218>)
 8001d28:	f005 f8e5 	bl	8006ef6 <memset>
	  	          }
	  if ((HAL_GetTick() - startTime) >60000) { // Nếu vượt quá 10 giây
 8001d2c:	f000 fd22 	bl	8002774 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d9bb      	bls.n	8001cb6 <main+0x15a>
	          Software_Reset(); // Gọi reset
 8001d3e:	f7ff fe1d 	bl	800197c <Software_Reset>
	  if (uart_rx_complete) {
 8001d42:	e7b8      	b.n	8001cb6 <main+0x15a>
 8001d44:	20000488 	.word	0x20000488
 8001d48:	2000058c 	.word	0x2000058c
 8001d4c:	20000578 	.word	0x20000578
 8001d50:	20000579 	.word	0x20000579
 8001d54:	2000057a 	.word	0x2000057a
 8001d58:	2000057b 	.word	0x2000057b
 8001d5c:	2000057c 	.word	0x2000057c
 8001d60:	20000580 	.word	0x20000580
 8001d64:	2000057e 	.word	0x2000057e
 8001d68:	20000584 	.word	0x20000584
 8001d6c:	20000588 	.word	0x20000588
 8001d70:	0800a79c 	.word	0x0800a79c
 8001d74:	200001f8 	.word	0x200001f8
 8001d78:	200004d0 	.word	0x200004d0
 8001d7c:	0800a778 	.word	0x0800a778
 8001d80:	0800a788 	.word	0x0800a788
 8001d84:	0800ae0c 	.word	0x0800ae0c
 8001d88:	200003ce 	.word	0x200003ce
 8001d8c:	0800a798 	.word	0x0800a798
 8001d90:	20000004 	.word	0x20000004
 8001d94:	0800a7a8 	.word	0x0800a7a8

08001d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b094      	sub	sp, #80	@ 0x50
 8001d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	2230      	movs	r2, #48	@ 0x30
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f005 f8a5 	bl	8006ef6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	4b28      	ldr	r3, [pc, #160]	@ (8001e64 <SystemClock_Config+0xcc>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc4:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <SystemClock_Config+0xcc>)
 8001dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dcc:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <SystemClock_Config+0xcc>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd8:	2300      	movs	r3, #0
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <SystemClock_Config+0xd0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a21      	ldr	r2, [pc, #132]	@ (8001e68 <SystemClock_Config+0xd0>)
 8001de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <SystemClock_Config+0xd0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df4:	2302      	movs	r3, #2
 8001df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dfc:	2310      	movs	r3, #16
 8001dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e00:	2302      	movs	r3, #2
 8001e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e04:	2300      	movs	r3, #0
 8001e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e0c:	23a8      	movs	r3, #168	@ 0xa8
 8001e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e10:	2302      	movs	r3, #2
 8001e12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e14:	2304      	movs	r3, #4
 8001e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e18:	f107 0320 	add.w	r3, r7, #32
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 fbbb 	bl	8003598 <HAL_RCC_OscConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e28:	f000 f98e 	bl	8002148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e30:	2302      	movs	r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2105      	movs	r1, #5
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f001 fe1c 	bl	8003a88 <HAL_RCC_ClockConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e56:	f000 f977 	bl	8002148 <Error_Handler>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3750      	adds	r7, #80	@ 0x50
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40007000 	.word	0x40007000

08001e6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e70:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001e72:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <MX_SPI1_Init+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e76:	4b16      	ldr	r3, [pc, #88]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001e78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eb6:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001eb8:	220a      	movs	r2, #10
 8001eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ebc:	4804      	ldr	r0, [pc, #16]	@ (8001ed0 <MX_SPI1_Init+0x64>)
 8001ebe:	f001 ffc3 	bl	8003e48 <HAL_SPI_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ec8:	f000 f93e 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200003d0 	.word	0x200003d0
 8001ed4:	40013000 	.word	0x40013000

08001ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	463b      	mov	r3, r7
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <MX_TIM1_Init+0x98>)
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f74 <MX_TIM1_Init+0x9c>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <MX_TIM1_Init+0x98>)
 8001efc:	22a7      	movs	r2, #167	@ 0xa7
 8001efe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <MX_TIM1_Init+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <MX_TIM1_Init+0x98>)
 8001f08:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001f0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0e:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <MX_TIM1_Init+0x98>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f14:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <MX_TIM1_Init+0x98>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <MX_TIM1_Init+0x98>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f20:	4813      	ldr	r0, [pc, #76]	@ (8001f70 <MX_TIM1_Init+0x98>)
 8001f22:	f002 fc8b 	bl	800483c <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f2c:	f000 f90c 	bl	8002148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480c      	ldr	r0, [pc, #48]	@ (8001f70 <MX_TIM1_Init+0x98>)
 8001f3e:	f002 fd35 	bl	80049ac <HAL_TIM_ConfigClockSource>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f48:	f000 f8fe 	bl	8002148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f54:	463b      	mov	r3, r7
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <MX_TIM1_Init+0x98>)
 8001f5a:	f002 ff35 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f64:	f000 f8f0 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000488 	.word	0x20000488
 8001f74:	40010000 	.word	0x40010000

08001f78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <MX_USART1_UART_Init+0x50>)
 8001f80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <MX_USART1_UART_Init+0x4c>)
 8001fb0:	f002 ff86 	bl	8004ec0 <HAL_UART_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fba:	f000 f8c5 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200004d0 	.word	0x200004d0
 8001fc8:	40011000 	.word	0x40011000

08001fcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <MX_DMA_Init+0x4c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	4a0f      	ldr	r2, [pc, #60]	@ (8002018 <MX_DMA_Init+0x4c>)
 8001fdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <MX_DMA_Init+0x4c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	203a      	movs	r0, #58	@ 0x3a
 8001ff4:	f000 fcc9 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ff8:	203a      	movs	r0, #58	@ 0x3a
 8001ffa:	f000 fce2 	bl	80029c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	203b      	movs	r0, #59	@ 0x3b
 8002004:	f000 fcc1 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002008:	203b      	movs	r0, #59	@ 0x3b
 800200a:	f000 fcda 	bl	80029c2 <HAL_NVIC_EnableIRQ>

}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b32      	ldr	r3, [pc, #200]	@ (8002100 <MX_GPIO_Init+0xe4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a31      	ldr	r2, [pc, #196]	@ (8002100 <MX_GPIO_Init+0xe4>)
 800203c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b2f      	ldr	r3, [pc, #188]	@ (8002100 <MX_GPIO_Init+0xe4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	4b2b      	ldr	r3, [pc, #172]	@ (8002100 <MX_GPIO_Init+0xe4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a2a      	ldr	r2, [pc, #168]	@ (8002100 <MX_GPIO_Init+0xe4>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <MX_GPIO_Init+0xe4>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	4b24      	ldr	r3, [pc, #144]	@ (8002100 <MX_GPIO_Init+0xe4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	4a23      	ldr	r2, [pc, #140]	@ (8002100 <MX_GPIO_Init+0xe4>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	@ 0x30
 800207a:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <MX_GPIO_Init+0xe4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	2108      	movs	r1, #8
 800208a:	481e      	ldr	r0, [pc, #120]	@ (8002104 <MX_GPIO_Init+0xe8>)
 800208c:	f001 fa6a 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_SET);
 8002090:	2201      	movs	r2, #1
 8002092:	2150      	movs	r1, #80	@ 0x50
 8002094:	481b      	ldr	r0, [pc, #108]	@ (8002104 <MX_GPIO_Init+0xe8>)
 8002096:	f001 fa65 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800209a:	2201      	movs	r2, #1
 800209c:	2101      	movs	r1, #1
 800209e:	481a      	ldr	r0, [pc, #104]	@ (8002108 <MX_GPIO_Init+0xec>)
 80020a0:	f001 fa60 	bl	8003564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020a4:	2308      	movs	r3, #8
 80020a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a8:	2301      	movs	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	4619      	mov	r1, r3
 80020ba:	4812      	ldr	r0, [pc, #72]	@ (8002104 <MX_GPIO_Init+0xe8>)
 80020bc:	f001 f89e 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 80020c0:	2350      	movs	r3, #80	@ 0x50
 80020c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c4:	2301      	movs	r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	480b      	ldr	r0, [pc, #44]	@ (8002104 <MX_GPIO_Init+0xe8>)
 80020d8:	f001 f890 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80020dc:	2301      	movs	r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e8:	2302      	movs	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	4619      	mov	r1, r3
 80020f2:	4805      	ldr	r0, [pc, #20]	@ (8002108 <MX_GPIO_Init+0xec>)
 80020f4:	f001 f882 	bl	80031fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020f8:	bf00      	nop
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400

0800210c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a07      	ldr	r2, [pc, #28]	@ (8002138 <HAL_UART_RxCpltCallback+0x2c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <HAL_UART_RxCpltCallback+0x24>
        uart_rx_complete = 1; // �?ặt c�? nhận dữ liệu hoàn tất
 800211e:	4b07      	ldr	r3, [pc, #28]	@ (800213c <HAL_UART_RxCpltCallback+0x30>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, (uint8_t *)uart_rx_buffer, BUFFER_SIZE); // Chuẩn bị nhận tiếp
 8002124:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8002128:	4905      	ldr	r1, [pc, #20]	@ (8002140 <HAL_UART_RxCpltCallback+0x34>)
 800212a:	4806      	ldr	r0, [pc, #24]	@ (8002144 <HAL_UART_RxCpltCallback+0x38>)
 800212c:	f002 ffa3 	bl	8005076 <HAL_UART_Receive_IT>
    }
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40011000 	.word	0x40011000
 800213c:	200003ce 	.word	0x200003ce
 8002140:	200001f8 	.word	0x200001f8
 8002144:	200004d0 	.word	0x200004d0

08002148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214c:	b672      	cpsid	i
}
 800214e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <Error_Handler+0x8>

08002154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002168:	6453      	str	r3, [r2, #68]	@ 0x44
 800216a:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <HAL_MspInit+0x4c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	4a08      	ldr	r2, [pc, #32]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	@ 0x40
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_MspInit+0x4c>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	@ 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a34      	ldr	r2, [pc, #208]	@ (8002294 <HAL_SPI_MspInit+0xf0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d161      	bne.n	800228a <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	4b33      	ldr	r3, [pc, #204]	@ (8002298 <HAL_SPI_MspInit+0xf4>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	4a32      	ldr	r2, [pc, #200]	@ (8002298 <HAL_SPI_MspInit+0xf4>)
 80021d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d6:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <HAL_SPI_MspInit+0xf4>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <HAL_SPI_MspInit+0xf4>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002298 <HAL_SPI_MspInit+0xf4>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4b29      	ldr	r3, [pc, #164]	@ (8002298 <HAL_SPI_MspInit+0xf4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021fe:	23a0      	movs	r3, #160	@ 0xa0
 8002200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800220e:	2305      	movs	r3, #5
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4820      	ldr	r0, [pc, #128]	@ (800229c <HAL_SPI_MspInit+0xf8>)
 800221a:	f000 ffef 	bl	80031fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 8002220:	4a20      	ldr	r2, [pc, #128]	@ (80022a4 <HAL_SPI_MspInit+0x100>)
 8002222:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002224:	4b1e      	ldr	r3, [pc, #120]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 8002226:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800222a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800222c:	4b1c      	ldr	r3, [pc, #112]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002232:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 8002234:	2200      	movs	r2, #0
 8002236:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002238:	4b19      	ldr	r3, [pc, #100]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 800223a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800223e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002240:	4b17      	ldr	r3, [pc, #92]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 8002242:	2200      	movs	r2, #0
 8002244:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002246:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002252:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800225e:	4810      	ldr	r0, [pc, #64]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 8002260:	f000 fbca 	bl	80029f8 <HAL_DMA_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800226a:	f7ff ff6d 	bl	8002148 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a0b      	ldr	r2, [pc, #44]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 8002272:	649a      	str	r2, [r3, #72]	@ 0x48
 8002274:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <HAL_SPI_MspInit+0xfc>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2023      	movs	r0, #35	@ 0x23
 8002280:	f000 fb83 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002284:	2023      	movs	r0, #35	@ 0x23
 8002286:	f000 fb9c 	bl	80029c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800228a:	bf00      	nop
 800228c:	3728      	adds	r7, #40	@ 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40013000 	.word	0x40013000
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000
 80022a0:	20000428 	.word	0x20000428
 80022a4:	40026458 	.word	0x40026458

080022a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0b      	ldr	r2, [pc, #44]	@ (80022e4 <HAL_TIM_Base_MspInit+0x3c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10d      	bne.n	80022d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_TIM_Base_MspInit+0x40>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	4a09      	ldr	r2, [pc, #36]	@ (80022e8 <HAL_TIM_Base_MspInit+0x40>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ca:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <HAL_TIM_Base_MspInit+0x40>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40010000 	.word	0x40010000
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	@ 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a35      	ldr	r2, [pc, #212]	@ (80023e0 <HAL_UART_MspInit+0xf4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d163      	bne.n	80023d6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	4b34      	ldr	r3, [pc, #208]	@ (80023e4 <HAL_UART_MspInit+0xf8>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	4a33      	ldr	r2, [pc, #204]	@ (80023e4 <HAL_UART_MspInit+0xf8>)
 8002318:	f043 0310 	orr.w	r3, r3, #16
 800231c:	6453      	str	r3, [r2, #68]	@ 0x44
 800231e:	4b31      	ldr	r3, [pc, #196]	@ (80023e4 <HAL_UART_MspInit+0xf8>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b2d      	ldr	r3, [pc, #180]	@ (80023e4 <HAL_UART_MspInit+0xf8>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	4a2c      	ldr	r2, [pc, #176]	@ (80023e4 <HAL_UART_MspInit+0xf8>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	@ 0x30
 800233a:	4b2a      	ldr	r3, [pc, #168]	@ (80023e4 <HAL_UART_MspInit+0xf8>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002346:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800234a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002358:	2307      	movs	r3, #7
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	4821      	ldr	r0, [pc, #132]	@ (80023e8 <HAL_UART_MspInit+0xfc>)
 8002364:	f000 ff4a 	bl	80031fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002368:	4b20      	ldr	r3, [pc, #128]	@ (80023ec <HAL_UART_MspInit+0x100>)
 800236a:	4a21      	ldr	r2, [pc, #132]	@ (80023f0 <HAL_UART_MspInit+0x104>)
 800236c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800236e:	4b1f      	ldr	r3, [pc, #124]	@ (80023ec <HAL_UART_MspInit+0x100>)
 8002370:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002374:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002376:	4b1d      	ldr	r3, [pc, #116]	@ (80023ec <HAL_UART_MspInit+0x100>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_UART_MspInit+0x100>)
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002382:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <HAL_UART_MspInit+0x100>)
 8002384:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002388:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800238a:	4b18      	ldr	r3, [pc, #96]	@ (80023ec <HAL_UART_MspInit+0x100>)
 800238c:	2200      	movs	r2, #0
 800238e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002390:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <HAL_UART_MspInit+0x100>)
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <HAL_UART_MspInit+0x100>)
 8002398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800239c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800239e:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <HAL_UART_MspInit+0x100>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023a4:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <HAL_UART_MspInit+0x100>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023aa:	4810      	ldr	r0, [pc, #64]	@ (80023ec <HAL_UART_MspInit+0x100>)
 80023ac:	f000 fb24 	bl	80029f8 <HAL_DMA_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80023b6:	f7ff fec7 	bl	8002148 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a0b      	ldr	r2, [pc, #44]	@ (80023ec <HAL_UART_MspInit+0x100>)
 80023be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023c0:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <HAL_UART_MspInit+0x100>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2101      	movs	r1, #1
 80023ca:	2025      	movs	r0, #37	@ 0x25
 80023cc:	f000 fadd 	bl	800298a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023d0:	2025      	movs	r0, #37	@ 0x25
 80023d2:	f000 faf6 	bl	80029c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	@ 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40011000 	.word	0x40011000
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	20000518 	.word	0x20000518
 80023f0:	40026440 	.word	0x40026440

080023f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <NMI_Handler+0x4>

080023fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <MemManage_Handler+0x4>

0800240c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <BusFault_Handler+0x4>

08002414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <UsageFault_Handler+0x4>

0800241c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244a:	f000 f97f 	bl	800274c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002458:	4802      	ldr	r0, [pc, #8]	@ (8002464 <SPI1_IRQHandler+0x10>)
 800245a:	f001 ff75 	bl	8004348 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200003d0 	.word	0x200003d0

08002468 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <USART1_IRQHandler+0x10>)
 800246e:	f002 fe27 	bl	80050c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200004d0 	.word	0x200004d0

0800247c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002480:	4802      	ldr	r0, [pc, #8]	@ (800248c <DMA2_Stream2_IRQHandler+0x10>)
 8002482:	f000 fc51 	bl	8002d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000518 	.word	0x20000518

08002490 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002494:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <DMA2_Stream3_IRQHandler+0x10>)
 8002496:	f000 fc47 	bl	8002d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000428 	.word	0x20000428

080024a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return 1;
 80024a8:	2301      	movs	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_kill>:

int _kill(int pid, int sig)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024be:	f004 fdc9 	bl	8007054 <__errno>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2216      	movs	r2, #22
 80024c6:	601a      	str	r2, [r3, #0]
  return -1;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_exit>:

void _exit (int status)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ffe7 	bl	80024b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024e6:	bf00      	nop
 80024e8:	e7fd      	b.n	80024e6 <_exit+0x12>

080024ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	e00a      	b.n	8002512 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024fc:	f3af 8000 	nop.w
 8002500:	4601      	mov	r1, r0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	60ba      	str	r2, [r7, #8]
 8002508:	b2ca      	uxtb	r2, r1
 800250a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3301      	adds	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	429a      	cmp	r2, r3
 8002518:	dbf0      	blt.n	80024fc <_read+0x12>
  }

  return len;
 800251a:	687b      	ldr	r3, [r7, #4]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e009      	b.n	800254a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	60ba      	str	r2, [r7, #8]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3301      	adds	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	429a      	cmp	r2, r3
 8002550:	dbf1      	blt.n	8002536 <_write+0x12>
  }
  return len;
 8002552:	687b      	ldr	r3, [r7, #4]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <_close>:

int _close(int file)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002584:	605a      	str	r2, [r3, #4]
  return 0;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_isatty>:

int _isatty(int file)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800259c:	2301      	movs	r3, #1
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025cc:	4a14      	ldr	r2, [pc, #80]	@ (8002620 <_sbrk+0x5c>)
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <_sbrk+0x60>)
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d8:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <_sbrk+0x64>)
 80025e2:	4a12      	ldr	r2, [pc, #72]	@ (800262c <_sbrk+0x68>)
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e6:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <_sbrk+0x64>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d207      	bcs.n	8002604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f4:	f004 fd2e 	bl	8007054 <__errno>
 80025f8:	4603      	mov	r3, r0
 80025fa:	220c      	movs	r2, #12
 80025fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	e009      	b.n	8002618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002604:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260a:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	4a05      	ldr	r2, [pc, #20]	@ (8002628 <_sbrk+0x64>)
 8002614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20020000 	.word	0x20020000
 8002624:	00000400 	.word	0x00000400
 8002628:	20000590 	.word	0x20000590
 800262c:	200006e8 	.word	0x200006e8

08002630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002634:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <SystemInit+0x20>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	4a05      	ldr	r2, [pc, #20]	@ (8002650 <SystemInit+0x20>)
 800263c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800268c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002658:	f7ff ffea 	bl	8002630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800265c:	480c      	ldr	r0, [pc, #48]	@ (8002690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800265e:	490d      	ldr	r1, [pc, #52]	@ (8002694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002660:	4a0d      	ldr	r2, [pc, #52]	@ (8002698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002664:	e002      	b.n	800266c <LoopCopyDataInit>

08002666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800266a:	3304      	adds	r3, #4

0800266c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800266c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002670:	d3f9      	bcc.n	8002666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002672:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002674:	4c0a      	ldr	r4, [pc, #40]	@ (80026a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002678:	e001      	b.n	800267e <LoopFillZerobss>

0800267a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800267a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800267c:	3204      	adds	r2, #4

0800267e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002680:	d3fb      	bcc.n	800267a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002682:	f004 fced 	bl	8007060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002686:	f7ff fa69 	bl	8001b5c <main>
  bx  lr    
 800268a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800268c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002694:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002698:	0800baac 	.word	0x0800baac
  ldr r2, =_sbss
 800269c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80026a0:	200006e4 	.word	0x200006e4

080026a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a4:	e7fe      	b.n	80026a4 <ADC_IRQHandler>
	...

080026a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026ac:	4b0e      	ldr	r3, [pc, #56]	@ (80026e8 <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <HAL_Init+0x40>)
 80026b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <HAL_Init+0x40>)
 80026be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <HAL_Init+0x40>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d0:	2003      	movs	r0, #3
 80026d2:	f000 f94f 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d6:	200f      	movs	r0, #15
 80026d8:	f000 f808 	bl	80026ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026dc:	f7ff fd3a 	bl	8002154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00

080026ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f4:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <HAL_InitTick+0x54>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <HAL_InitTick+0x58>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002702:	fbb3 f3f1 	udiv	r3, r3, r1
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f967 	bl	80029de <HAL_SYSTICK_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00e      	b.n	8002738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d80a      	bhi.n	8002736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f000 f92f 	bl	800298a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800272c:	4a06      	ldr	r2, [pc, #24]	@ (8002748 <HAL_InitTick+0x5c>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000008 	.word	0x20000008
 8002744:	20000010 	.word	0x20000010
 8002748:	2000000c 	.word	0x2000000c

0800274c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_IncTick+0x20>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_IncTick+0x24>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4413      	add	r3, r2
 800275c:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <HAL_IncTick+0x24>)
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000010 	.word	0x20000010
 8002770:	20000594 	.word	0x20000594

08002774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return uwTick;
 8002778:	4b03      	ldr	r3, [pc, #12]	@ (8002788 <HAL_GetTick+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000594 	.word	0x20000594

0800278c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff ffee 	bl	8002774 <HAL_GetTick>
 8002798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d005      	beq.n	80027b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a6:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <HAL_Delay+0x44>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027b2:	bf00      	nop
 80027b4:	f7ff ffde 	bl	8002774 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d8f7      	bhi.n	80027b4 <HAL_Delay+0x28>
  {
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000010 	.word	0x20000010

080027d4 <__NVIC_SetPriorityGrouping>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002806:	4a04      	ldr	r2, [pc, #16]	@ (8002818 <__NVIC_SetPriorityGrouping+0x44>)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	60d3      	str	r3, [r2, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_GetPriorityGrouping>:
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002820:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <__NVIC_GetPriorityGrouping+0x18>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	f003 0307 	and.w	r3, r3, #7
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_EnableIRQ>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db0b      	blt.n	8002862 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	f003 021f 	and.w	r2, r3, #31
 8002850:	4907      	ldr	r1, [pc, #28]	@ (8002870 <__NVIC_EnableIRQ+0x38>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2001      	movs	r0, #1
 800285a:	fa00 f202 	lsl.w	r2, r0, r2
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	@ (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	@ (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	@ 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	@ 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f7ff ff8e 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff29 	bl	80027d4 <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800299c:	f7ff ff3e 	bl	800281c <__NVIC_GetPriorityGrouping>
 80029a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff8e 	bl	80028c8 <NVIC_EncodePriority>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff5d 	bl	8002874 <__NVIC_SetPriority>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff31 	bl	8002838 <__NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ffa2 	bl	8002930 <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a04:	f7ff feb6 	bl	8002774 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e099      	b.n	8002b48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a34:	e00f      	b.n	8002a56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a36:	f7ff fe9d 	bl	8002774 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d908      	bls.n	8002a56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e078      	b.n	8002b48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e8      	bne.n	8002a36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4b38      	ldr	r3, [pc, #224]	@ (8002b50 <HAL_DMA_Init+0x158>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d107      	bne.n	8002ac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0307 	bic.w	r3, r3, #7
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d117      	bne.n	8002b1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00e      	beq.n	8002b1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fb01 	bl	8003104 <DMA_CheckFifoParam>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2240      	movs	r2, #64	@ 0x40
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b16:	2301      	movs	r3, #1
 8002b18:	e016      	b.n	8002b48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fab8 	bl	8003098 <DMA_CalcBaseAndBitshift>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	223f      	movs	r2, #63	@ 0x3f
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	f010803f 	.word	0xf010803f

08002b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_DMA_Start_IT+0x26>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e040      	b.n	8002bfc <HAL_DMA_Start_IT+0xa8>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d12f      	bne.n	8002bee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2202      	movs	r2, #2
 8002b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fa4a 	bl	800303c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bac:	223f      	movs	r2, #63	@ 0x3f
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0216 	orr.w	r2, r2, #22
 8002bc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0208 	orr.w	r2, r2, #8
 8002bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e005      	b.n	8002bfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c12:	f7ff fdaf 	bl	8002774 <HAL_GetTick>
 8002c16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d008      	beq.n	8002c36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2280      	movs	r2, #128	@ 0x80
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e052      	b.n	8002cdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0216 	bic.w	r2, r2, #22
 8002c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_DMA_Abort+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0208 	bic.w	r2, r2, #8
 8002c74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c86:	e013      	b.n	8002cb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c88:	f7ff fd74 	bl	8002774 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d90c      	bls.n	8002cb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e015      	b.n	8002cdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e4      	bne.n	8002c88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc2:	223f      	movs	r2, #63	@ 0x3f
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d004      	beq.n	8002d02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2280      	movs	r2, #128	@ 0x80
 8002cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00c      	b.n	8002d1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2205      	movs	r2, #5
 8002d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d34:	4b8e      	ldr	r3, [pc, #568]	@ (8002f70 <HAL_DMA_IRQHandler+0x248>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a8e      	ldr	r2, [pc, #568]	@ (8002f74 <HAL_DMA_IRQHandler+0x24c>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0a9b      	lsrs	r3, r3, #10
 8002d40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d52:	2208      	movs	r2, #8
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01a      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d80:	2208      	movs	r2, #8
 8002d82:	409a      	lsls	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d98:	2201      	movs	r2, #1
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db6:	2201      	movs	r2, #1
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dce:	2204      	movs	r2, #4
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dec:	2204      	movs	r2, #4
 8002dee:	409a      	lsls	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	2210      	movs	r2, #16
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d043      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d03c      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	2210      	movs	r2, #16
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d018      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d024      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	4798      	blx	r3
 8002e56:	e01f      	b.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4798      	blx	r3
 8002e68:	e016      	b.n	8002e98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0208 	bic.w	r2, r2, #8
 8002e86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 808f 	beq.w	8002fc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 8087 	beq.w	8002fc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d136      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0216 	bic.w	r2, r2, #22
 8002ee0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ef0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <HAL_DMA_IRQHandler+0x1da>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0208 	bic.w	r2, r2, #8
 8002f10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f16:	223f      	movs	r2, #63	@ 0x3f
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d07e      	beq.n	8003034 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
        }
        return;
 8002f3e:	e079      	b.n	8003034 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01d      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10d      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d031      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
 8002f6c:	e02c      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x2a0>
 8002f6e:	bf00      	nop
 8002f70:	20000008 	.word	0x20000008
 8002f74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d023      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
 8002f88:	e01e      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10f      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0210 	bic.w	r2, r2, #16
 8002fa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d032      	beq.n	8003036 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d022      	beq.n	8003022 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2205      	movs	r2, #5
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d307      	bcc.n	8003010 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f2      	bne.n	8002ff4 <HAL_DMA_IRQHandler+0x2cc>
 800300e:	e000      	b.n	8003012 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003010:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
 8003032:	e000      	b.n	8003036 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003034:	bf00      	nop
    }
  }
}
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003058:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b40      	cmp	r3, #64	@ 0x40
 8003068:	d108      	bne.n	800307c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800307a:	e007      	b.n	800308c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3b10      	subs	r3, #16
 80030a8:	4a14      	ldr	r2, [pc, #80]	@ (80030fc <DMA_CalcBaseAndBitshift+0x64>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030b2:	4a13      	ldr	r2, [pc, #76]	@ (8003100 <DMA_CalcBaseAndBitshift+0x68>)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d909      	bls.n	80030da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	1d1a      	adds	r2, r3, #4
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80030d8:	e007      	b.n	80030ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	aaaaaaab 	.word	0xaaaaaaab
 8003100:	0800b608 	.word	0x0800b608

08003104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d11f      	bne.n	800315e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d856      	bhi.n	80031d2 <DMA_CheckFifoParam+0xce>
 8003124:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <DMA_CheckFifoParam+0x28>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	0800313d 	.word	0x0800313d
 8003130:	0800314f 	.word	0x0800314f
 8003134:	0800313d 	.word	0x0800313d
 8003138:	080031d3 	.word	0x080031d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003140:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d046      	beq.n	80031d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314c:	e043      	b.n	80031d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003152:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003156:	d140      	bne.n	80031da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315c:	e03d      	b.n	80031da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003166:	d121      	bne.n	80031ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d837      	bhi.n	80031de <DMA_CheckFifoParam+0xda>
 800316e:	a201      	add	r2, pc, #4	@ (adr r2, 8003174 <DMA_CheckFifoParam+0x70>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	08003185 	.word	0x08003185
 8003178:	0800318b 	.word	0x0800318b
 800317c:	08003185 	.word	0x08003185
 8003180:	0800319d 	.word	0x0800319d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
      break;
 8003188:	e030      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d025      	beq.n	80031e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319a:	e022      	b.n	80031e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031a4:	d11f      	bne.n	80031e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031aa:	e01c      	b.n	80031e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d903      	bls.n	80031ba <DMA_CheckFifoParam+0xb6>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d003      	beq.n	80031c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031b8:	e018      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      break;
 80031be:	e015      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
      break;
 80031d0:	e00b      	b.n	80031ea <DMA_CheckFifoParam+0xe6>
      break;
 80031d2:	bf00      	nop
 80031d4:	e00a      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;
 80031d6:	bf00      	nop
 80031d8:	e008      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;
 80031da:	bf00      	nop
 80031dc:	e006      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;
 80031de:	bf00      	nop
 80031e0:	e004      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;
 80031e2:	bf00      	nop
 80031e4:	e002      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;   
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <DMA_CheckFifoParam+0xe8>
      break;
 80031ea:	bf00      	nop
    }
  } 
  
  return status; 
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop

080031fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	e16b      	b.n	80034f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003218:	2201      	movs	r2, #1
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	429a      	cmp	r2, r3
 8003232:	f040 815a 	bne.w	80034ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d005      	beq.n	800324e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800324a:	2b02      	cmp	r3, #2
 800324c:	d130      	bne.n	80032b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003284:	2201      	movs	r2, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 0201 	and.w	r2, r3, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d017      	beq.n	80032ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d123      	bne.n	8003340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	08da      	lsrs	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3208      	adds	r2, #8
 8003300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3208      	adds	r2, #8
 800333a:	69b9      	ldr	r1, [r7, #24]
 800333c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80b4 	beq.w	80034ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	4b60      	ldr	r3, [pc, #384]	@ (8003508 <HAL_GPIO_Init+0x30c>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338a:	4a5f      	ldr	r2, [pc, #380]	@ (8003508 <HAL_GPIO_Init+0x30c>)
 800338c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003390:	6453      	str	r3, [r2, #68]	@ 0x44
 8003392:	4b5d      	ldr	r3, [pc, #372]	@ (8003508 <HAL_GPIO_Init+0x30c>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339e:	4a5b      	ldr	r2, [pc, #364]	@ (800350c <HAL_GPIO_Init+0x310>)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a52      	ldr	r2, [pc, #328]	@ (8003510 <HAL_GPIO_Init+0x314>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d02b      	beq.n	8003422 <HAL_GPIO_Init+0x226>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a51      	ldr	r2, [pc, #324]	@ (8003514 <HAL_GPIO_Init+0x318>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d025      	beq.n	800341e <HAL_GPIO_Init+0x222>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a50      	ldr	r2, [pc, #320]	@ (8003518 <HAL_GPIO_Init+0x31c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01f      	beq.n	800341a <HAL_GPIO_Init+0x21e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4f      	ldr	r2, [pc, #316]	@ (800351c <HAL_GPIO_Init+0x320>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d019      	beq.n	8003416 <HAL_GPIO_Init+0x21a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003520 <HAL_GPIO_Init+0x324>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_GPIO_Init+0x216>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003524 <HAL_GPIO_Init+0x328>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00d      	beq.n	800340e <HAL_GPIO_Init+0x212>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003528 <HAL_GPIO_Init+0x32c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d007      	beq.n	800340a <HAL_GPIO_Init+0x20e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a4b      	ldr	r2, [pc, #300]	@ (800352c <HAL_GPIO_Init+0x330>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_GPIO_Init+0x20a>
 8003402:	2307      	movs	r3, #7
 8003404:	e00e      	b.n	8003424 <HAL_GPIO_Init+0x228>
 8003406:	2308      	movs	r3, #8
 8003408:	e00c      	b.n	8003424 <HAL_GPIO_Init+0x228>
 800340a:	2306      	movs	r3, #6
 800340c:	e00a      	b.n	8003424 <HAL_GPIO_Init+0x228>
 800340e:	2305      	movs	r3, #5
 8003410:	e008      	b.n	8003424 <HAL_GPIO_Init+0x228>
 8003412:	2304      	movs	r3, #4
 8003414:	e006      	b.n	8003424 <HAL_GPIO_Init+0x228>
 8003416:	2303      	movs	r3, #3
 8003418:	e004      	b.n	8003424 <HAL_GPIO_Init+0x228>
 800341a:	2302      	movs	r3, #2
 800341c:	e002      	b.n	8003424 <HAL_GPIO_Init+0x228>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_GPIO_Init+0x228>
 8003422:	2300      	movs	r3, #0
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	f002 0203 	and.w	r2, r2, #3
 800342a:	0092      	lsls	r2, r2, #2
 800342c:	4093      	lsls	r3, r2
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003434:	4935      	ldr	r1, [pc, #212]	@ (800350c <HAL_GPIO_Init+0x310>)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	089b      	lsrs	r3, r3, #2
 800343a:	3302      	adds	r3, #2
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003442:	4b3b      	ldr	r3, [pc, #236]	@ (8003530 <HAL_GPIO_Init+0x334>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003466:	4a32      	ldr	r2, [pc, #200]	@ (8003530 <HAL_GPIO_Init+0x334>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800346c:	4b30      	ldr	r3, [pc, #192]	@ (8003530 <HAL_GPIO_Init+0x334>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003490:	4a27      	ldr	r2, [pc, #156]	@ (8003530 <HAL_GPIO_Init+0x334>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003496:	4b26      	ldr	r3, [pc, #152]	@ (8003530 <HAL_GPIO_Init+0x334>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003530 <HAL_GPIO_Init+0x334>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <HAL_GPIO_Init+0x334>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e4:	4a12      	ldr	r2, [pc, #72]	@ (8003530 <HAL_GPIO_Init+0x334>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3301      	adds	r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b0f      	cmp	r3, #15
 80034f4:	f67f ae90 	bls.w	8003218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3724      	adds	r7, #36	@ 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	40013800 	.word	0x40013800
 8003510:	40020000 	.word	0x40020000
 8003514:	40020400 	.word	0x40020400
 8003518:	40020800 	.word	0x40020800
 800351c:	40020c00 	.word	0x40020c00
 8003520:	40021000 	.word	0x40021000
 8003524:	40021400 	.word	0x40021400
 8003528:	40021800 	.word	0x40021800
 800352c:	40021c00 	.word	0x40021c00
 8003530:	40013c00 	.word	0x40013c00

08003534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	e001      	b.n	8003556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
 8003570:	4613      	mov	r3, r2
 8003572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003574:	787b      	ldrb	r3, [r7, #1]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003580:	e003      	b.n	800358a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003582:	887b      	ldrh	r3, [r7, #2]
 8003584:	041a      	lsls	r2, r3, #16
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	619a      	str	r2, [r3, #24]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e267      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d075      	beq.n	80036a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035b6:	4b88      	ldr	r3, [pc, #544]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d00c      	beq.n	80035dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c2:	4b85      	ldr	r3, [pc, #532]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d112      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ce:	4b82      	ldr	r3, [pc, #520]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035da:	d10b      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035dc:	4b7e      	ldr	r3, [pc, #504]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d05b      	beq.n	80036a0 <HAL_RCC_OscConfig+0x108>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d157      	bne.n	80036a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e242      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035fc:	d106      	bne.n	800360c <HAL_RCC_OscConfig+0x74>
 80035fe:	4b76      	ldr	r3, [pc, #472]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a75      	ldr	r2, [pc, #468]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e01d      	b.n	8003648 <HAL_RCC_OscConfig+0xb0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x98>
 8003616:	4b70      	ldr	r3, [pc, #448]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6f      	ldr	r2, [pc, #444]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 800361c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	4b6d      	ldr	r3, [pc, #436]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a6c      	ldr	r2, [pc, #432]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e00b      	b.n	8003648 <HAL_RCC_OscConfig+0xb0>
 8003630:	4b69      	ldr	r3, [pc, #420]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a68      	ldr	r2, [pc, #416]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	4b66      	ldr	r3, [pc, #408]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a65      	ldr	r2, [pc, #404]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d013      	beq.n	8003678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7ff f890 	bl	8002774 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003658:	f7ff f88c 	bl	8002774 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	@ 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e207      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	4b5b      	ldr	r3, [pc, #364]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0xc0>
 8003676:	e014      	b.n	80036a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7ff f87c 	bl	8002774 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003680:	f7ff f878 	bl	8002774 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	@ 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e1f3      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003692:	4b51      	ldr	r3, [pc, #324]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0xe8>
 800369e:	e000      	b.n	80036a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d063      	beq.n	8003776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036ae:	4b4a      	ldr	r3, [pc, #296]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b47      	ldr	r3, [pc, #284]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d11c      	bne.n	8003700 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c6:	4b44      	ldr	r3, [pc, #272]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d116      	bne.n	8003700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d2:	4b41      	ldr	r3, [pc, #260]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_RCC_OscConfig+0x152>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e1c7      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ea:	4b3b      	ldr	r3, [pc, #236]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4937      	ldr	r1, [pc, #220]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	e03a      	b.n	8003776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d020      	beq.n	800374a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003708:	4b34      	ldr	r3, [pc, #208]	@ (80037dc <HAL_RCC_OscConfig+0x244>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7ff f831 	bl	8002774 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003716:	f7ff f82d 	bl	8002774 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1a8      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	4b2b      	ldr	r3, [pc, #172]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003734:	4b28      	ldr	r3, [pc, #160]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4925      	ldr	r1, [pc, #148]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
 8003748:	e015      	b.n	8003776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374a:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <HAL_RCC_OscConfig+0x244>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7ff f810 	bl	8002774 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003758:	f7ff f80c 	bl	8002774 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e187      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d036      	beq.n	80037f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378a:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <HAL_RCC_OscConfig+0x248>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fe fff0 	bl	8002774 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003798:	f7fe ffec 	bl	8002774 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e167      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <HAL_RCC_OscConfig+0x240>)
 80037ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x200>
 80037b6:	e01b      	b.n	80037f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b8:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <HAL_RCC_OscConfig+0x248>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037be:	f7fe ffd9 	bl	8002774 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	e00e      	b.n	80037e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fe ffd5 	bl	8002774 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d907      	bls.n	80037e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e150      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	42470000 	.word	0x42470000
 80037e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	4b88      	ldr	r3, [pc, #544]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 80037e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ea      	bne.n	80037c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8097 	beq.w	800392c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fe:	2300      	movs	r3, #0
 8003800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003802:	4b81      	ldr	r3, [pc, #516]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	4b7d      	ldr	r3, [pc, #500]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	4a7c      	ldr	r2, [pc, #496]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800381c:	6413      	str	r3, [r2, #64]	@ 0x40
 800381e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382e:	4b77      	ldr	r3, [pc, #476]	@ (8003a0c <HAL_RCC_OscConfig+0x474>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383a:	4b74      	ldr	r3, [pc, #464]	@ (8003a0c <HAL_RCC_OscConfig+0x474>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a73      	ldr	r2, [pc, #460]	@ (8003a0c <HAL_RCC_OscConfig+0x474>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003846:	f7fe ff95 	bl	8002774 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fe ff91 	bl	8002774 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e10c      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	4b6a      	ldr	r3, [pc, #424]	@ (8003a0c <HAL_RCC_OscConfig+0x474>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x2ea>
 8003874:	4b64      	ldr	r3, [pc, #400]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003878:	4a63      	ldr	r2, [pc, #396]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003880:	e01c      	b.n	80038bc <HAL_RCC_OscConfig+0x324>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x30c>
 800388a:	4b5f      	ldr	r3, [pc, #380]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	4a5e      	ldr	r2, [pc, #376]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6713      	str	r3, [r2, #112]	@ 0x70
 8003896:	4b5c      	ldr	r3, [pc, #368]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	4a5b      	ldr	r2, [pc, #364]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0x324>
 80038a4:	4b58      	ldr	r3, [pc, #352]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a8:	4a57      	ldr	r2, [pc, #348]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b0:	4b55      	ldr	r3, [pc, #340]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b4:	4a54      	ldr	r2, [pc, #336]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 80038b6:	f023 0304 	bic.w	r3, r3, #4
 80038ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe ff56 	bl	8002774 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fe ff52 	bl	8002774 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0cb      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e2:	4b49      	ldr	r3, [pc, #292]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ee      	beq.n	80038cc <HAL_RCC_OscConfig+0x334>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f0:	f7fe ff40 	bl	8002774 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fe ff3c 	bl	8002774 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0b5      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ee      	bne.n	80038f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003920:	4b39      	ldr	r3, [pc, #228]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	4a38      	ldr	r2, [pc, #224]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800392a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80a1 	beq.w	8003a78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003936:	4b34      	ldr	r3, [pc, #208]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b08      	cmp	r3, #8
 8003940:	d05c      	beq.n	80039fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d141      	bne.n	80039ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394a:	4b31      	ldr	r3, [pc, #196]	@ (8003a10 <HAL_RCC_OscConfig+0x478>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fe ff10 	bl	8002774 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7fe ff0c 	bl	8002774 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e087      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	4b27      	ldr	r3, [pc, #156]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	3b01      	subs	r3, #1
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	491b      	ldr	r1, [pc, #108]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <HAL_RCC_OscConfig+0x478>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fe fee5 	bl	8002774 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ae:	f7fe fee1 	bl	8002774 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e05c      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c0:	4b11      	ldr	r3, [pc, #68]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x416>
 80039cc:	e054      	b.n	8003a78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b10      	ldr	r3, [pc, #64]	@ (8003a10 <HAL_RCC_OscConfig+0x478>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe fece 	bl	8002774 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fe feca 	bl	8002774 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e045      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <HAL_RCC_OscConfig+0x470>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x444>
 80039fa:	e03d      	b.n	8003a78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e038      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40007000 	.word	0x40007000
 8003a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a14:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <HAL_RCC_OscConfig+0x4ec>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d028      	beq.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d121      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d11a      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a44:	4013      	ands	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d111      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800

08003a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0cc      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b68      	ldr	r3, [pc, #416]	@ (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d90c      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b65      	ldr	r3, [pc, #404]	@ (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b63      	ldr	r3, [pc, #396]	@ (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0b8      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003adc:	4b59      	ldr	r3, [pc, #356]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a58      	ldr	r2, [pc, #352]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af4:	4b53      	ldr	r3, [pc, #332]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a52      	ldr	r2, [pc, #328]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b00:	4b50      	ldr	r3, [pc, #320]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	494d      	ldr	r1, [pc, #308]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d044      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b47      	ldr	r3, [pc, #284]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d119      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e07f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	4b3f      	ldr	r3, [pc, #252]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e06f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b56:	4b3b      	ldr	r3, [pc, #236]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e067      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b66:	4b37      	ldr	r3, [pc, #220]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f023 0203 	bic.w	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4934      	ldr	r1, [pc, #208]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b78:	f7fe fdfc 	bl	8002774 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b80:	f7fe fdf8 	bl	8002774 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e04f      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	4b2b      	ldr	r3, [pc, #172]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 020c 	and.w	r2, r3, #12
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d1eb      	bne.n	8003b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b25      	ldr	r3, [pc, #148]	@ (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d20c      	bcs.n	8003bd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b22      	ldr	r3, [pc, #136]	@ (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b20      	ldr	r3, [pc, #128]	@ (8003c40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e032      	b.n	8003c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bdc:	4b19      	ldr	r3, [pc, #100]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	4916      	ldr	r1, [pc, #88]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bfa:	4b12      	ldr	r3, [pc, #72]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	490e      	ldr	r1, [pc, #56]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c0e:	f000 f821 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8003c12:	4602      	mov	r2, r0
 8003c14:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	490a      	ldr	r1, [pc, #40]	@ (8003c48 <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	5ccb      	ldrb	r3, [r1, r3]
 8003c22:	fa22 f303 	lsr.w	r3, r2, r3
 8003c26:	4a09      	ldr	r2, [pc, #36]	@ (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c2a:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fd5c 	bl	80026ec <HAL_InitTick>

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023c00 	.word	0x40023c00
 8003c44:	40023800 	.word	0x40023800
 8003c48:	0800b5f0 	.word	0x0800b5f0
 8003c4c:	20000008 	.word	0x20000008
 8003c50:	2000000c 	.word	0x2000000c

08003c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c58:	b090      	sub	sp, #64	@ 0x40
 8003c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c6c:	4b59      	ldr	r3, [pc, #356]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d00d      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0x40>
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	f200 80a1 	bhi.w	8003dc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x34>
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c86:	e09b      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b53      	ldr	r3, [pc, #332]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c8c:	e09b      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c8e:	4b53      	ldr	r3, [pc, #332]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8003c90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c92:	e098      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c94:	4b4f      	ldr	r3, [pc, #316]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d028      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003caa:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	099b      	lsrs	r3, r3, #6
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4b47      	ldr	r3, [pc, #284]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc0:	fb03 f201 	mul.w	r2, r3, r1
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	fb00 f303 	mul.w	r3, r0, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	4a43      	ldr	r2, [pc, #268]	@ (8003ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8003cce:	fba0 1202 	umull	r1, r2, r0, r2
 8003cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cd4:	460a      	mov	r2, r1
 8003cd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cda:	4413      	add	r3, r2
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	61fa      	str	r2, [r7, #28]
 8003ce6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003cee:	f7fc ffcb 	bl	8000c88 <__aeabi_uldivmod>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cfa:	e053      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfc:	4b35      	ldr	r3, [pc, #212]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	2200      	movs	r2, #0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	617a      	str	r2, [r7, #20]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d0e:	f04f 0b00 	mov.w	fp, #0
 8003d12:	4652      	mov	r2, sl
 8003d14:	465b      	mov	r3, fp
 8003d16:	f04f 0000 	mov.w	r0, #0
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	0159      	lsls	r1, r3, #5
 8003d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d24:	0150      	lsls	r0, r2, #5
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	ebb2 080a 	subs.w	r8, r2, sl
 8003d2e:	eb63 090b 	sbc.w	r9, r3, fp
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d46:	ebb2 0408 	subs.w	r4, r2, r8
 8003d4a:	eb63 0509 	sbc.w	r5, r3, r9
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	00eb      	lsls	r3, r5, #3
 8003d58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d5c:	00e2      	lsls	r2, r4, #3
 8003d5e:	4614      	mov	r4, r2
 8003d60:	461d      	mov	r5, r3
 8003d62:	eb14 030a 	adds.w	r3, r4, sl
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	eb45 030b 	adc.w	r3, r5, fp
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	028b      	lsls	r3, r1, #10
 8003d7e:	4621      	mov	r1, r4
 8003d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d84:	4621      	mov	r1, r4
 8003d86:	028a      	lsls	r2, r1, #10
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	60fa      	str	r2, [r7, #12]
 8003d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d98:	f7fc ff76 	bl	8000c88 <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4613      	mov	r3, r2
 8003da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	3301      	adds	r3, #1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003db4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dbe:	e002      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc0:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3740      	adds	r7, #64	@ 0x40
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	017d7840 	.word	0x017d7840

08003de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de4:	4b03      	ldr	r3, [pc, #12]	@ (8003df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000008 	.word	0x20000008

08003df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dfc:	f7ff fff0 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	@ (8003e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0a9b      	lsrs	r3, r3, #10
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4903      	ldr	r1, [pc, #12]	@ (8003e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	0800b600 	.word	0x0800b600

08003e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e24:	f7ff ffdc 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	0b5b      	lsrs	r3, r3, #13
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4903      	ldr	r1, [pc, #12]	@ (8003e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40023800 	.word	0x40023800
 8003e44:	0800b600 	.word	0x0800b600

08003e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07b      	b.n	8003f52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e6a:	d009      	beq.n	8003e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61da      	str	r2, [r3, #28]
 8003e72:	e005      	b.n	8003e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fe f982 	bl	80021a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0104 	and.w	r1, r3, #4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	f003 0210 	and.w	r2, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f6a:	f7fe fc03 	bl	8002774 <HAL_GetTick>
 8003f6e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
 8003f82:	e12a      	b.n	80041da <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_SPI_Transmit+0x36>
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e122      	b.n	80041da <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_SPI_Transmit+0x48>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e11b      	b.n	80041da <HAL_SPI_Transmit+0x280>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2203      	movs	r2, #3
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff0:	d10f      	bne.n	8004012 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004000:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004010:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401c:	2b40      	cmp	r3, #64	@ 0x40
 800401e:	d007      	beq.n	8004030 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800402e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004038:	d152      	bne.n	80040e0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_SPI_Transmit+0xee>
 8004042:	8b7b      	ldrh	r3, [r7, #26]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d145      	bne.n	80040d4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004058:	1c9a      	adds	r2, r3, #2
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800406c:	e032      	b.n	80040d4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b02      	cmp	r3, #2
 800407a:	d112      	bne.n	80040a2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	881a      	ldrh	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	1c9a      	adds	r2, r3, #2
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040a0:	e018      	b.n	80040d4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a2:	f7fe fb67 	bl	8002774 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d803      	bhi.n	80040ba <HAL_SPI_Transmit+0x160>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d102      	bne.n	80040c0 <HAL_SPI_Transmit+0x166>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d109      	bne.n	80040d4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e082      	b.n	80041da <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1c7      	bne.n	800406e <HAL_SPI_Transmit+0x114>
 80040de:	e053      	b.n	8004188 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_SPI_Transmit+0x194>
 80040e8:	8b7b      	ldrh	r3, [r7, #26]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d147      	bne.n	800417e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004114:	e033      	b.n	800417e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b02      	cmp	r3, #2
 8004122:	d113      	bne.n	800414c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	86da      	strh	r2, [r3, #54]	@ 0x36
 800414a:	e018      	b.n	800417e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800414c:	f7fe fb12 	bl	8002774 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d803      	bhi.n	8004164 <HAL_SPI_Transmit+0x20a>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d102      	bne.n	800416a <HAL_SPI_Transmit+0x210>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e02d      	b.n	80041da <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1c6      	bne.n	8004116 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	6839      	ldr	r1, [r7, #0]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fb01 	bl	8004794 <SPI_EndRxTxTransaction>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80041d8:	2300      	movs	r3, #0
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d001      	beq.n	8004202 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	e097      	b.n	8004332 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_SPI_Transmit_DMA+0x2a>
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e08f      	b.n	8004332 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_SPI_Transmit_DMA+0x3c>
 800421c:	2302      	movs	r3, #2
 800421e:	e088      	b.n	8004332 <HAL_SPI_Transmit_DMA+0x14e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2203      	movs	r2, #3
 800422c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	88fa      	ldrh	r2, [r7, #6]
 8004240:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800426e:	d10f      	bne.n	8004290 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800427e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800428e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004294:	4a29      	ldr	r2, [pc, #164]	@ (800433c <HAL_SPI_Transmit_DMA+0x158>)
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429c:	4a28      	ldr	r2, [pc, #160]	@ (8004340 <HAL_SPI_Transmit_DMA+0x15c>)
 800429e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a4:	4a27      	ldr	r2, [pc, #156]	@ (8004344 <HAL_SPI_Transmit_DMA+0x160>)
 80042a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ac:	2200      	movs	r2, #0
 80042ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b8:	4619      	mov	r1, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	330c      	adds	r3, #12
 80042c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80042c8:	f7fe fc44 	bl	8002b54 <HAL_DMA_Start_IT>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	f043 0210 	orr.w	r2, r3, #16
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e023      	b.n	8004332 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d007      	beq.n	8004308 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004306:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0220 	orr.w	r2, r2, #32
 800431e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0202 	orr.w	r2, r2, #2
 800432e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	08004601 	.word	0x08004601
 8004340:	08004559 	.word	0x08004559
 8004344:	0800461d 	.word	0x0800461d

08004348 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10e      	bne.n	8004388 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
    return;
 8004386:	e0ce      	b.n	8004526 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_SPI_IRQHandler+0x5e>
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d004      	beq.n	80043a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
    return;
 80043a4:	e0bf      	b.n	8004526 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <HAL_SPI_IRQHandler+0x7e>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80b0 	beq.w	8004526 <HAL_SPI_IRQHandler+0x1de>
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80aa 	beq.w	8004526 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d023      	beq.n	8004424 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d011      	beq.n	800440c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ec:	f043 0204 	orr.w	r2, r3, #4
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	e00b      	b.n	8004424 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	693b      	ldr	r3, [r7, #16]
        return;
 8004422:	e080      	b.n	8004526 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d014      	beq.n	8004458 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004432:	f043 0201 	orr.w	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004466:	f043 0208 	orr.w	r2, r3, #8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	2b00      	cmp	r3, #0
 8004482:	d04f      	beq.n	8004524 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004492:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <HAL_SPI_IRQHandler+0x168>
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d034      	beq.n	800451a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0203 	bic.w	r2, r2, #3
 80044be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d011      	beq.n	80044ec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044cc:	4a17      	ldr	r2, [pc, #92]	@ (800452c <HAL_SPI_IRQHandler+0x1e4>)
 80044ce:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fe fc05 	bl	8002ce4 <HAL_DMA_Abort_IT>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d016      	beq.n	8004522 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f8:	4a0c      	ldr	r2, [pc, #48]	@ (800452c <HAL_SPI_IRQHandler+0x1e4>)
 80044fa:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fbef 	bl	8002ce4 <HAL_DMA_Abort_IT>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004518:	e003      	b.n	8004522 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f812 	bl	8004544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004520:	e000      	b.n	8004524 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004522:	bf00      	nop
    return;
 8004524:	bf00      	nop
  }
}
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	0800465d 	.word	0x0800465d

08004530 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004566:	f7fe f905 	bl	8002774 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800457a:	d03b      	beq.n	80045f4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0220 	bic.w	r2, r2, #32
 800458a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0202 	bic.w	r2, r2, #2
 800459a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	2164      	movs	r1, #100	@ 0x64
 80045a0:	6978      	ldr	r0, [r7, #20]
 80045a2:	f000 f8f7 	bl	8004794 <SPI_EndRxTxTransaction>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b0:	f043 0220 	orr.w	r2, r3, #32
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f7ff ffa9 	bl	8004544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80045f2:	e002      	b.n	80045fa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80045f4:	6978      	ldr	r0, [r7, #20]
 80045f6:	f7fc fdb7 	bl	8001168 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f7ff ff8e 	bl	8004530 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0203 	bic.w	r2, r2, #3
 8004638:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463e:	f043 0210 	orr.w	r2, r3, #16
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff ff78 	bl	8004544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004668:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff ff64 	bl	8004544 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004694:	f7fe f86e 	bl	8002774 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	4413      	add	r3, r2
 80046a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046a4:	f7fe f866 	bl	8002774 <HAL_GetTick>
 80046a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046aa:	4b39      	ldr	r3, [pc, #228]	@ (8004790 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	015b      	lsls	r3, r3, #5
 80046b0:	0d1b      	lsrs	r3, r3, #20
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	fb02 f303 	mul.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ba:	e054      	b.n	8004766 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d050      	beq.n	8004766 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046c4:	f7fe f856 	bl	8002774 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d902      	bls.n	80046da <SPI_WaitFlagStateUntilTimeout+0x56>
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d13d      	bne.n	8004756 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046f2:	d111      	bne.n	8004718 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046fc:	d004      	beq.n	8004708 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004706:	d107      	bne.n	8004718 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004720:	d10f      	bne.n	8004742 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004740:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e017      	b.n	8004786 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	3b01      	subs	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	429a      	cmp	r2, r3
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	429a      	cmp	r2, r3
 8004782:	d19b      	bne.n	80046bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3720      	adds	r7, #32
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000008 	.word	0x20000008

08004794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2201      	movs	r2, #1
 80047a8:	2102      	movs	r1, #2
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff ff6a 	bl	8004684 <SPI_WaitFlagStateUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e032      	b.n	800482c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004834 <SPI_EndRxTxTransaction+0xa0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004838 <SPI_EndRxTxTransaction+0xa4>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	0d5b      	lsrs	r3, r3, #21
 80047d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047e4:	d112      	bne.n	800480c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2200      	movs	r2, #0
 80047ee:	2180      	movs	r1, #128	@ 0x80
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7ff ff47 	bl	8004684 <SPI_WaitFlagStateUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d016      	beq.n	800482a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e00f      	b.n	800482c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	3b01      	subs	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004822:	2b80      	cmp	r3, #128	@ 0x80
 8004824:	d0f2      	beq.n	800480c <SPI_EndRxTxTransaction+0x78>
 8004826:	e000      	b.n	800482a <SPI_EndRxTxTransaction+0x96>
        break;
 8004828:	bf00      	nop
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000008 	.word	0x20000008
 8004838:	165e9f81 	.word	0x165e9f81

0800483c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e041      	b.n	80048d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd fd20 	bl	80022a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f000 f95e 	bl	8004b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d001      	beq.n	80048f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e046      	b.n	8004982 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a23      	ldr	r2, [pc, #140]	@ (8004990 <HAL_TIM_Base_Start+0xb4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d022      	beq.n	800494c <HAL_TIM_Base_Start+0x70>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800490e:	d01d      	beq.n	800494c <HAL_TIM_Base_Start+0x70>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1f      	ldr	r2, [pc, #124]	@ (8004994 <HAL_TIM_Base_Start+0xb8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d018      	beq.n	800494c <HAL_TIM_Base_Start+0x70>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1e      	ldr	r2, [pc, #120]	@ (8004998 <HAL_TIM_Base_Start+0xbc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <HAL_TIM_Base_Start+0x70>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <HAL_TIM_Base_Start+0xc0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00e      	beq.n	800494c <HAL_TIM_Base_Start+0x70>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1b      	ldr	r2, [pc, #108]	@ (80049a0 <HAL_TIM_Base_Start+0xc4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_TIM_Base_Start+0x70>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a19      	ldr	r2, [pc, #100]	@ (80049a4 <HAL_TIM_Base_Start+0xc8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_TIM_Base_Start+0x70>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a18      	ldr	r2, [pc, #96]	@ (80049a8 <HAL_TIM_Base_Start+0xcc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d111      	bne.n	8004970 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b06      	cmp	r3, #6
 800495c:	d010      	beq.n	8004980 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0201 	orr.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496e:	e007      	b.n	8004980 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40010400 	.word	0x40010400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40001800 	.word	0x40001800

080049ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_ConfigClockSource+0x1c>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e0b4      	b.n	8004b32 <HAL_TIM_ConfigClockSource+0x186>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a00:	d03e      	beq.n	8004a80 <HAL_TIM_ConfigClockSource+0xd4>
 8004a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a06:	f200 8087 	bhi.w	8004b18 <HAL_TIM_ConfigClockSource+0x16c>
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a0e:	f000 8086 	beq.w	8004b1e <HAL_TIM_ConfigClockSource+0x172>
 8004a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a16:	d87f      	bhi.n	8004b18 <HAL_TIM_ConfigClockSource+0x16c>
 8004a18:	2b70      	cmp	r3, #112	@ 0x70
 8004a1a:	d01a      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0xa6>
 8004a1c:	2b70      	cmp	r3, #112	@ 0x70
 8004a1e:	d87b      	bhi.n	8004b18 <HAL_TIM_ConfigClockSource+0x16c>
 8004a20:	2b60      	cmp	r3, #96	@ 0x60
 8004a22:	d050      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0x11a>
 8004a24:	2b60      	cmp	r3, #96	@ 0x60
 8004a26:	d877      	bhi.n	8004b18 <HAL_TIM_ConfigClockSource+0x16c>
 8004a28:	2b50      	cmp	r3, #80	@ 0x50
 8004a2a:	d03c      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a2c:	2b50      	cmp	r3, #80	@ 0x50
 8004a2e:	d873      	bhi.n	8004b18 <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	2b40      	cmp	r3, #64	@ 0x40
 8004a32:	d058      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0x13a>
 8004a34:	2b40      	cmp	r3, #64	@ 0x40
 8004a36:	d86f      	bhi.n	8004b18 <HAL_TIM_ConfigClockSource+0x16c>
 8004a38:	2b30      	cmp	r3, #48	@ 0x30
 8004a3a:	d064      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x15a>
 8004a3c:	2b30      	cmp	r3, #48	@ 0x30
 8004a3e:	d86b      	bhi.n	8004b18 <HAL_TIM_ConfigClockSource+0x16c>
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d060      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x15a>
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d867      	bhi.n	8004b18 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d05c      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x15a>
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d05a      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x15a>
 8004a50:	e062      	b.n	8004b18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a62:	f000 f991 	bl	8004d88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	609a      	str	r2, [r3, #8]
      break;
 8004a7e:	e04f      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a90:	f000 f97a 	bl	8004d88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aa2:	609a      	str	r2, [r3, #8]
      break;
 8004aa4:	e03c      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f000 f8ee 	bl	8004c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2150      	movs	r1, #80	@ 0x50
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f947 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004ac4:	e02c      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f000 f90d 	bl	8004cf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2160      	movs	r1, #96	@ 0x60
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f937 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004ae4:	e01c      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af2:	461a      	mov	r2, r3
 8004af4:	f000 f8ce 	bl	8004c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2140      	movs	r1, #64	@ 0x40
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f927 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004b04:	e00c      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4610      	mov	r0, r2
 8004b12:	f000 f91e 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004b16:	e003      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b1c:	e000      	b.n	8004b20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a46      	ldr	r2, [pc, #280]	@ (8004c68 <TIM_Base_SetConfig+0x12c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <TIM_Base_SetConfig+0x40>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5a:	d00f      	beq.n	8004b7c <TIM_Base_SetConfig+0x40>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a43      	ldr	r2, [pc, #268]	@ (8004c6c <TIM_Base_SetConfig+0x130>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0x40>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a42      	ldr	r2, [pc, #264]	@ (8004c70 <TIM_Base_SetConfig+0x134>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0x40>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a41      	ldr	r2, [pc, #260]	@ (8004c74 <TIM_Base_SetConfig+0x138>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0x40>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a40      	ldr	r2, [pc, #256]	@ (8004c78 <TIM_Base_SetConfig+0x13c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a35      	ldr	r2, [pc, #212]	@ (8004c68 <TIM_Base_SetConfig+0x12c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d02b      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9c:	d027      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a32      	ldr	r2, [pc, #200]	@ (8004c6c <TIM_Base_SetConfig+0x130>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d023      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a31      	ldr	r2, [pc, #196]	@ (8004c70 <TIM_Base_SetConfig+0x134>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01f      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a30      	ldr	r2, [pc, #192]	@ (8004c74 <TIM_Base_SetConfig+0x138>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01b      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8004c78 <TIM_Base_SetConfig+0x13c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d017      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8004c7c <TIM_Base_SetConfig+0x140>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c80 <TIM_Base_SetConfig+0x144>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00f      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c84 <TIM_Base_SetConfig+0x148>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8004c88 <TIM_Base_SetConfig+0x14c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d007      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c8c <TIM_Base_SetConfig+0x150>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a29      	ldr	r2, [pc, #164]	@ (8004c90 <TIM_Base_SetConfig+0x154>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d108      	bne.n	8004c00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a10      	ldr	r2, [pc, #64]	@ (8004c68 <TIM_Base_SetConfig+0x12c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d003      	beq.n	8004c34 <TIM_Base_SetConfig+0xf8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a12      	ldr	r2, [pc, #72]	@ (8004c78 <TIM_Base_SetConfig+0x13c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d103      	bne.n	8004c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f023 0201 	bic.w	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	611a      	str	r2, [r3, #16]
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40000800 	.word	0x40000800
 8004c74:	40000c00 	.word	0x40000c00
 8004c78:	40010400 	.word	0x40010400
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800
 8004c88:	40001800 	.word	0x40001800
 8004c8c:	40001c00 	.word	0x40001c00
 8004c90:	40002000 	.word	0x40002000

08004c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f023 0201 	bic.w	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 030a 	bic.w	r3, r3, #10
 8004cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b087      	sub	sp, #28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f023 0210 	bic.w	r2, r3, #16
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f043 0307 	orr.w	r3, r3, #7
 8004d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	609a      	str	r2, [r3, #8]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	021a      	lsls	r2, r3, #8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	609a      	str	r2, [r3, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e05a      	b.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a21      	ldr	r2, [pc, #132]	@ (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e2c:	d01d      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a18      	ldr	r2, [pc, #96]	@ (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a17      	ldr	r2, [pc, #92]	@ (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a15      	ldr	r2, [pc, #84]	@ (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10c      	bne.n	8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40001800 	.word	0x40001800

08004ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e042      	b.n	8004f58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fd fa00 	bl	80022ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2224      	movs	r2, #36	@ 0x24
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fdbd 	bl	8005a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	@ 0x28
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d175      	bne.n	800506c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_UART_Transmit+0x2c>
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e06e      	b.n	800506e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2221      	movs	r2, #33	@ 0x21
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f9e:	f7fd fbe9 	bl	8002774 <HAL_GetTick>
 8004fa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	88fa      	ldrh	r2, [r7, #6]
 8004fae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fb8:	d108      	bne.n	8004fcc <HAL_UART_Transmit+0x6c>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	e003      	b.n	8004fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fd4:	e02e      	b.n	8005034 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2180      	movs	r1, #128	@ 0x80
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fb1f 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e03a      	b.n	800506e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800500c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	3302      	adds	r3, #2
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	e007      	b.n	8005026 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	3301      	adds	r3, #1
 8005024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1cb      	bne.n	8004fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2200      	movs	r2, #0
 8005046:	2140      	movs	r1, #64	@ 0x40
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 faeb 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e006      	b.n	800506e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	e000      	b.n	800506e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800506c:	2302      	movs	r3, #2
  }
}
 800506e:	4618      	mov	r0, r3
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	4613      	mov	r3, r2
 8005082:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b20      	cmp	r3, #32
 800508e:	d112      	bne.n	80050b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_UART_Receive_IT+0x26>
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e00b      	b.n	80050b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	461a      	mov	r2, r3
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fb12 	bl	80056d6 <UART_Start_Receive_IT>
 80050b2:	4603      	mov	r3, r0
 80050b4:	e000      	b.n	80050b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b0ba      	sub	sp, #232	@ 0xe8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80050fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10f      	bne.n	8005126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_UART_IRQHandler+0x66>
 8005112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fbf2 	bl	8005908 <UART_Receive_IT>
      return;
 8005124:	e25b      	b.n	80055de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 80de 	beq.w	80052ec <HAL_UART_IRQHandler+0x22c>
 8005130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800513c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005140:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80d1 	beq.w	80052ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00b      	beq.n	800516e <HAL_UART_IRQHandler+0xae>
 8005156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800515a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	f043 0201 	orr.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800516e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00b      	beq.n	8005192 <HAL_UART_IRQHandler+0xd2>
 800517a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518a:	f043 0202 	orr.w	r2, r3, #2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <HAL_UART_IRQHandler+0xf6>
 800519e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ae:	f043 0204 	orr.w	r2, r3, #4
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d011      	beq.n	80051e6 <HAL_UART_IRQHandler+0x126>
 80051c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d105      	bne.n	80051da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051de:	f043 0208 	orr.w	r2, r3, #8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 81f2 	beq.w	80055d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_UART_IRQHandler+0x14e>
 80051fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fb7d 	bl	8005908 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005218:	2b40      	cmp	r3, #64	@ 0x40
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d103      	bne.n	800523a <HAL_UART_IRQHandler+0x17a>
 8005232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d04f      	beq.n	80052da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa85 	bl	800574a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	d141      	bne.n	80052d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800526c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3314      	adds	r3, #20
 8005276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800527a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800527e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1d9      	bne.n	800524e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d013      	beq.n	80052ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a6:	4a7e      	ldr	r2, [pc, #504]	@ (80054a0 <HAL_UART_IRQHandler+0x3e0>)
 80052a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fd fd18 	bl	8002ce4 <HAL_DMA_Abort_IT>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052c4:	4610      	mov	r0, r2
 80052c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c8:	e00e      	b.n	80052e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f994 	bl	80055f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d0:	e00a      	b.n	80052e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f990 	bl	80055f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d8:	e006      	b.n	80052e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f98c 	bl	80055f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80052e6:	e175      	b.n	80055d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e8:	bf00      	nop
    return;
 80052ea:	e173      	b.n	80055d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f040 814f 	bne.w	8005594 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 8148 	beq.w	8005594 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8141 	beq.w	8005594 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005332:	2b40      	cmp	r3, #64	@ 0x40
 8005334:	f040 80b6 	bne.w	80054a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8145 	beq.w	80055d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005356:	429a      	cmp	r2, r3
 8005358:	f080 813e 	bcs.w	80055d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005362:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800536e:	f000 8088 	beq.w	8005482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800538c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800539e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80053b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1d9      	bne.n	8005372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3314      	adds	r3, #20
 80053c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3314      	adds	r3, #20
 80053de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e1      	bne.n	80053be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800540a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800540c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3314      	adds	r3, #20
 800541a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800541e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005420:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005424:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800542c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e3      	bne.n	80053fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005450:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005452:	f023 0310 	bic.w	r3, r3, #16
 8005456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005464:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005466:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800546a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e3      	bne.n	8005440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547c:	4618      	mov	r0, r3
 800547e:	f7fd fbc1 	bl	8002c04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005490:	b29b      	uxth	r3, r3
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	b29b      	uxth	r3, r3
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f8b7 	bl	800560c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800549e:	e09b      	b.n	80055d8 <HAL_UART_IRQHandler+0x518>
 80054a0:	08005811 	.word	0x08005811
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 808e 	beq.w	80055dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80054c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8089 	beq.w	80055dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330c      	adds	r3, #12
 80054d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80054ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80054f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e3      	bne.n	80054ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3314      	adds	r3, #20
 8005508:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	623b      	str	r3, [r7, #32]
   return(result);
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3314      	adds	r3, #20
 8005522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005526:	633a      	str	r2, [r7, #48]	@ 0x30
 8005528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800552c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e3      	bne.n	8005502 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	60fb      	str	r3, [r7, #12]
   return(result);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0310 	bic.w	r3, r3, #16
 800555e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	330c      	adds	r3, #12
 8005568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800556c:	61fa      	str	r2, [r7, #28]
 800556e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	69b9      	ldr	r1, [r7, #24]
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	617b      	str	r3, [r7, #20]
   return(result);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e3      	bne.n	8005548 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f83d 	bl	800560c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005592:	e023      	b.n	80055dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559c:	2b00      	cmp	r3, #0
 800559e:	d009      	beq.n	80055b4 <HAL_UART_IRQHandler+0x4f4>
 80055a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f943 	bl	8005838 <UART_Transmit_IT>
    return;
 80055b2:	e014      	b.n	80055de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00e      	beq.n	80055de <HAL_UART_IRQHandler+0x51e>
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d008      	beq.n	80055de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f983 	bl	80058d8 <UART_EndTransmit_IT>
    return;
 80055d2:	e004      	b.n	80055de <HAL_UART_IRQHandler+0x51e>
    return;
 80055d4:	bf00      	nop
 80055d6:	e002      	b.n	80055de <HAL_UART_IRQHandler+0x51e>
      return;
 80055d8:	bf00      	nop
 80055da:	e000      	b.n	80055de <HAL_UART_IRQHandler+0x51e>
      return;
 80055dc:	bf00      	nop
  }
}
 80055de:	37e8      	adds	r7, #232	@ 0xe8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005634:	e03b      	b.n	80056ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d037      	beq.n	80056ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563e:	f7fd f899 	bl	8002774 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	6a3a      	ldr	r2, [r7, #32]
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <UART_WaitOnFlagUntilTimeout+0x30>
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e03a      	b.n	80056ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d023      	beq.n	80056ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b80      	cmp	r3, #128	@ 0x80
 800566a:	d020      	beq.n	80056ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b40      	cmp	r3, #64	@ 0x40
 8005670:	d01d      	beq.n	80056ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b08      	cmp	r3, #8
 800567e:	d116      	bne.n	80056ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f857 	bl	800574a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2208      	movs	r2, #8
 80056a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e00f      	b.n	80056ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4013      	ands	r3, r2
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d0b4      	beq.n	8005636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	4613      	mov	r3, r2
 80056e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	88fa      	ldrh	r2, [r7, #6]
 80056ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	88fa      	ldrh	r2, [r7, #6]
 80056f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2222      	movs	r2, #34	@ 0x22
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800571a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695a      	ldr	r2, [r3, #20]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0220 	orr.w	r2, r2, #32
 800573a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800574a:	b480      	push	{r7}
 800574c:	b095      	sub	sp, #84	@ 0x54
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	330c      	adds	r3, #12
 8005770:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005772:	643a      	str	r2, [r7, #64]	@ 0x40
 8005774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005778:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3314      	adds	r3, #20
 800578c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	61fb      	str	r3, [r7, #28]
   return(result);
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f023 0301 	bic.w	r3, r3, #1
 800579c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e5      	bne.n	8005786 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d119      	bne.n	80057f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f023 0310 	bic.w	r3, r3, #16
 80057d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057e2:	61ba      	str	r2, [r7, #24]
 80057e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6979      	ldr	r1, [r7, #20]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	613b      	str	r3, [r7, #16]
   return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e5      	bne.n	80057c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005804:	bf00      	nop
 8005806:	3754      	adds	r7, #84	@ 0x54
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fee4 	bl	80055f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b21      	cmp	r3, #33	@ 0x21
 800584a:	d13e      	bne.n	80058ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005854:	d114      	bne.n	8005880 <UART_Transmit_IT+0x48>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d110      	bne.n	8005880 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005872:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	1c9a      	adds	r2, r3, #2
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]
 800587e:	e008      	b.n	8005892 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	1c59      	adds	r1, r3, #1
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6211      	str	r1, [r2, #32]
 800588a:	781a      	ldrb	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29b      	uxth	r3, r3
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	4619      	mov	r1, r3
 80058a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10f      	bne.n	80058c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e000      	b.n	80058cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058ca:	2302      	movs	r3, #2
  }
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fe73 	bl	80055e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08c      	sub	sp, #48	@ 0x30
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b22      	cmp	r3, #34	@ 0x22
 800591a:	f040 80ae 	bne.w	8005a7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005926:	d117      	bne.n	8005958 <UART_Receive_IT+0x50>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d113      	bne.n	8005958 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005930:	2300      	movs	r3, #0
 8005932:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	b29b      	uxth	r3, r3
 8005942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005946:	b29a      	uxth	r2, r3
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	1c9a      	adds	r2, r3, #2
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	629a      	str	r2, [r3, #40]	@ 0x28
 8005956:	e026      	b.n	80059a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800596a:	d007      	beq.n	800597c <UART_Receive_IT+0x74>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <UART_Receive_IT+0x82>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	b2da      	uxtb	r2, r3
 8005984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	e008      	b.n	800599c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005996:	b2da      	uxtb	r2, r3
 8005998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	4619      	mov	r1, r3
 80059b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d15d      	bne.n	8005a76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0220 	bic.w	r2, r2, #32
 80059c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d135      	bne.n	8005a6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	613b      	str	r3, [r7, #16]
   return(result);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f023 0310 	bic.w	r3, r3, #16
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a26:	623a      	str	r2, [r7, #32]
 8005a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	69f9      	ldr	r1, [r7, #28]
 8005a2c:	6a3a      	ldr	r2, [r7, #32]
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e5      	bne.n	8005a06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d10a      	bne.n	8005a5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff fdd1 	bl	800560c <HAL_UARTEx_RxEventCallback>
 8005a6a:	e002      	b.n	8005a72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fc fb4d 	bl	800210c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	e002      	b.n	8005a7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e000      	b.n	8005a7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a7a:	2302      	movs	r3, #2
  }
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3730      	adds	r7, #48	@ 0x30
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a88:	b0c0      	sub	sp, #256	@ 0x100
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	68d9      	ldr	r1, [r3, #12]
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	ea40 0301 	orr.w	r3, r0, r1
 8005aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005adc:	f021 010c 	bic.w	r1, r1, #12
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005aea:	430b      	orrs	r3, r1
 8005aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afe:	6999      	ldr	r1, [r3, #24]
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	ea40 0301 	orr.w	r3, r0, r1
 8005b0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b8f      	ldr	r3, [pc, #572]	@ (8005d50 <UART_SetConfig+0x2cc>)
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d005      	beq.n	8005b24 <UART_SetConfig+0xa0>
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8005d54 <UART_SetConfig+0x2d0>)
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d104      	bne.n	8005b2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b24:	f7fe f97c 	bl	8003e20 <HAL_RCC_GetPCLK2Freq>
 8005b28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b2c:	e003      	b.n	8005b36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b2e:	f7fe f963 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8005b32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b40:	f040 810c 	bne.w	8005d5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b56:	4622      	mov	r2, r4
 8005b58:	462b      	mov	r3, r5
 8005b5a:	1891      	adds	r1, r2, r2
 8005b5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b5e:	415b      	adcs	r3, r3
 8005b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b66:	4621      	mov	r1, r4
 8005b68:	eb12 0801 	adds.w	r8, r2, r1
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	eb43 0901 	adc.w	r9, r3, r1
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b86:	4690      	mov	r8, r2
 8005b88:	4699      	mov	r9, r3
 8005b8a:	4623      	mov	r3, r4
 8005b8c:	eb18 0303 	adds.w	r3, r8, r3
 8005b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b94:	462b      	mov	r3, r5
 8005b96:	eb49 0303 	adc.w	r3, r9, r3
 8005b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005baa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	18db      	adds	r3, r3, r3
 8005bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bb8:	4613      	mov	r3, r2
 8005bba:	eb42 0303 	adc.w	r3, r2, r3
 8005bbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005bc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005bc8:	f7fb f85e 	bl	8000c88 <__aeabi_uldivmod>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4b61      	ldr	r3, [pc, #388]	@ (8005d58 <UART_SetConfig+0x2d4>)
 8005bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	011c      	lsls	r4, r3, #4
 8005bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005be4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	1891      	adds	r1, r2, r2
 8005bf2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bf4:	415b      	adcs	r3, r3
 8005bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	eb12 0a01 	adds.w	sl, r2, r1
 8005c02:	4649      	mov	r1, r9
 8005c04:	eb43 0b01 	adc.w	fp, r3, r1
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c1c:	4692      	mov	sl, r2
 8005c1e:	469b      	mov	fp, r3
 8005c20:	4643      	mov	r3, r8
 8005c22:	eb1a 0303 	adds.w	r3, sl, r3
 8005c26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	18db      	adds	r3, r3, r3
 8005c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c4e:	4613      	mov	r3, r2
 8005c50:	eb42 0303 	adc.w	r3, r2, r3
 8005c54:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c5e:	f7fb f813 	bl	8000c88 <__aeabi_uldivmod>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	4b3b      	ldr	r3, [pc, #236]	@ (8005d58 <UART_SetConfig+0x2d4>)
 8005c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2264      	movs	r2, #100	@ 0x64
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	1acb      	subs	r3, r1, r3
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c7e:	4b36      	ldr	r3, [pc, #216]	@ (8005d58 <UART_SetConfig+0x2d4>)
 8005c80:	fba3 2302 	umull	r2, r3, r3, r2
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c8c:	441c      	add	r4, r3
 8005c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	1891      	adds	r1, r2, r2
 8005ca6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ca8:	415b      	adcs	r3, r3
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	1851      	adds	r1, r2, r1
 8005cb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	414b      	adcs	r3, r1
 8005cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005cc8:	4659      	mov	r1, fp
 8005cca:	00cb      	lsls	r3, r1, #3
 8005ccc:	4651      	mov	r1, sl
 8005cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd2:	4651      	mov	r1, sl
 8005cd4:	00ca      	lsls	r2, r1, #3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4642      	mov	r2, r8
 8005cde:	189b      	adds	r3, r3, r2
 8005ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	460a      	mov	r2, r1
 8005ce8:	eb42 0303 	adc.w	r3, r2, r3
 8005cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d04:	460b      	mov	r3, r1
 8005d06:	18db      	adds	r3, r3, r3
 8005d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	eb42 0303 	adc.w	r3, r2, r3
 8005d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d1a:	f7fa ffb5 	bl	8000c88 <__aeabi_uldivmod>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <UART_SetConfig+0x2d4>)
 8005d24:	fba3 1302 	umull	r1, r3, r3, r2
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2164      	movs	r1, #100	@ 0x64
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	3332      	adds	r3, #50	@ 0x32
 8005d36:	4a08      	ldr	r2, [pc, #32]	@ (8005d58 <UART_SetConfig+0x2d4>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f003 0207 	and.w	r2, r3, #7
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4422      	add	r2, r4
 8005d4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d4c:	e106      	b.n	8005f5c <UART_SetConfig+0x4d8>
 8005d4e:	bf00      	nop
 8005d50:	40011000 	.word	0x40011000
 8005d54:	40011400 	.word	0x40011400
 8005d58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d6e:	4642      	mov	r2, r8
 8005d70:	464b      	mov	r3, r9
 8005d72:	1891      	adds	r1, r2, r2
 8005d74:	6239      	str	r1, [r7, #32]
 8005d76:	415b      	adcs	r3, r3
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d7e:	4641      	mov	r1, r8
 8005d80:	1854      	adds	r4, r2, r1
 8005d82:	4649      	mov	r1, r9
 8005d84:	eb43 0501 	adc.w	r5, r3, r1
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	00eb      	lsls	r3, r5, #3
 8005d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d96:	00e2      	lsls	r2, r4, #3
 8005d98:	4614      	mov	r4, r2
 8005d9a:	461d      	mov	r5, r3
 8005d9c:	4643      	mov	r3, r8
 8005d9e:	18e3      	adds	r3, r4, r3
 8005da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005da4:	464b      	mov	r3, r9
 8005da6:	eb45 0303 	adc.w	r3, r5, r3
 8005daa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	f04f 0300 	mov.w	r3, #0
 8005dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005dca:	4629      	mov	r1, r5
 8005dcc:	008b      	lsls	r3, r1, #2
 8005dce:	4621      	mov	r1, r4
 8005dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	008a      	lsls	r2, r1, #2
 8005dd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ddc:	f7fa ff54 	bl	8000c88 <__aeabi_uldivmod>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4b60      	ldr	r3, [pc, #384]	@ (8005f68 <UART_SetConfig+0x4e4>)
 8005de6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	011c      	lsls	r4, r3, #4
 8005dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005df8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005dfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e00:	4642      	mov	r2, r8
 8005e02:	464b      	mov	r3, r9
 8005e04:	1891      	adds	r1, r2, r2
 8005e06:	61b9      	str	r1, [r7, #24]
 8005e08:	415b      	adcs	r3, r3
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e10:	4641      	mov	r1, r8
 8005e12:	1851      	adds	r1, r2, r1
 8005e14:	6139      	str	r1, [r7, #16]
 8005e16:	4649      	mov	r1, r9
 8005e18:	414b      	adcs	r3, r1
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e28:	4659      	mov	r1, fp
 8005e2a:	00cb      	lsls	r3, r1, #3
 8005e2c:	4651      	mov	r1, sl
 8005e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e32:	4651      	mov	r1, sl
 8005e34:	00ca      	lsls	r2, r1, #3
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	189b      	adds	r3, r3, r2
 8005e40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e44:	464b      	mov	r3, r9
 8005e46:	460a      	mov	r2, r1
 8005e48:	eb42 0303 	adc.w	r3, r2, r3
 8005e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e5c:	f04f 0200 	mov.w	r2, #0
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e68:	4649      	mov	r1, r9
 8005e6a:	008b      	lsls	r3, r1, #2
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e72:	4641      	mov	r1, r8
 8005e74:	008a      	lsls	r2, r1, #2
 8005e76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e7a:	f7fa ff05 	bl	8000c88 <__aeabi_uldivmod>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	4b38      	ldr	r3, [pc, #224]	@ (8005f68 <UART_SetConfig+0x4e4>)
 8005e86:	fba3 2301 	umull	r2, r3, r3, r1
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	2264      	movs	r2, #100	@ 0x64
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	1acb      	subs	r3, r1, r3
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	3332      	adds	r3, #50	@ 0x32
 8005e98:	4a33      	ldr	r2, [pc, #204]	@ (8005f68 <UART_SetConfig+0x4e4>)
 8005e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ea4:	441c      	add	r4, r3
 8005ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eaa:	2200      	movs	r2, #0
 8005eac:	673b      	str	r3, [r7, #112]	@ 0x70
 8005eae:	677a      	str	r2, [r7, #116]	@ 0x74
 8005eb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	1891      	adds	r1, r2, r2
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	415b      	adcs	r3, r3
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ec4:	4641      	mov	r1, r8
 8005ec6:	1851      	adds	r1, r2, r1
 8005ec8:	6039      	str	r1, [r7, #0]
 8005eca:	4649      	mov	r1, r9
 8005ecc:	414b      	adcs	r3, r1
 8005ece:	607b      	str	r3, [r7, #4]
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005edc:	4659      	mov	r1, fp
 8005ede:	00cb      	lsls	r3, r1, #3
 8005ee0:	4651      	mov	r1, sl
 8005ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee6:	4651      	mov	r1, sl
 8005ee8:	00ca      	lsls	r2, r1, #3
 8005eea:	4610      	mov	r0, r2
 8005eec:	4619      	mov	r1, r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	189b      	adds	r3, r3, r2
 8005ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	460a      	mov	r2, r1
 8005efa:	eb42 0303 	adc.w	r3, r2, r3
 8005efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f18:	4649      	mov	r1, r9
 8005f1a:	008b      	lsls	r3, r1, #2
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f22:	4641      	mov	r1, r8
 8005f24:	008a      	lsls	r2, r1, #2
 8005f26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f2a:	f7fa fead 	bl	8000c88 <__aeabi_uldivmod>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <UART_SetConfig+0x4e4>)
 8005f34:	fba3 1302 	umull	r1, r3, r3, r2
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	2164      	movs	r1, #100	@ 0x64
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	3332      	adds	r3, #50	@ 0x32
 8005f46:	4a08      	ldr	r2, [pc, #32]	@ (8005f68 <UART_SetConfig+0x4e4>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	f003 020f 	and.w	r2, r3, #15
 8005f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4422      	add	r2, r4
 8005f5a:	609a      	str	r2, [r3, #8]
}
 8005f5c:	bf00      	nop
 8005f5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f62:	46bd      	mov	sp, r7
 8005f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f68:	51eb851f 	.word	0x51eb851f

08005f6c <__cvt>:
 8005f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	ec57 6b10 	vmov	r6, r7, d0
 8005f74:	2f00      	cmp	r7, #0
 8005f76:	460c      	mov	r4, r1
 8005f78:	4619      	mov	r1, r3
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	bfbb      	ittet	lt
 8005f7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f82:	461f      	movlt	r7, r3
 8005f84:	2300      	movge	r3, #0
 8005f86:	232d      	movlt	r3, #45	@ 0x2d
 8005f88:	700b      	strb	r3, [r1, #0]
 8005f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f90:	4691      	mov	r9, r2
 8005f92:	f023 0820 	bic.w	r8, r3, #32
 8005f96:	bfbc      	itt	lt
 8005f98:	4632      	movlt	r2, r6
 8005f9a:	4616      	movlt	r6, r2
 8005f9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fa0:	d005      	beq.n	8005fae <__cvt+0x42>
 8005fa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fa6:	d100      	bne.n	8005faa <__cvt+0x3e>
 8005fa8:	3401      	adds	r4, #1
 8005faa:	2102      	movs	r1, #2
 8005fac:	e000      	b.n	8005fb0 <__cvt+0x44>
 8005fae:	2103      	movs	r1, #3
 8005fb0:	ab03      	add	r3, sp, #12
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	ab02      	add	r3, sp, #8
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	ec47 6b10 	vmov	d0, r6, r7
 8005fbc:	4653      	mov	r3, sl
 8005fbe:	4622      	mov	r2, r4
 8005fc0:	f001 f922 	bl	8007208 <_dtoa_r>
 8005fc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005fc8:	4605      	mov	r5, r0
 8005fca:	d119      	bne.n	8006000 <__cvt+0x94>
 8005fcc:	f019 0f01 	tst.w	r9, #1
 8005fd0:	d00e      	beq.n	8005ff0 <__cvt+0x84>
 8005fd2:	eb00 0904 	add.w	r9, r0, r4
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4639      	mov	r1, r7
 8005fde:	f7fa fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe2:	b108      	cbz	r0, 8005fe8 <__cvt+0x7c>
 8005fe4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fe8:	2230      	movs	r2, #48	@ 0x30
 8005fea:	9b03      	ldr	r3, [sp, #12]
 8005fec:	454b      	cmp	r3, r9
 8005fee:	d31e      	bcc.n	800602e <__cvt+0xc2>
 8005ff0:	9b03      	ldr	r3, [sp, #12]
 8005ff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ff4:	1b5b      	subs	r3, r3, r5
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	b004      	add	sp, #16
 8005ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006004:	eb00 0904 	add.w	r9, r0, r4
 8006008:	d1e5      	bne.n	8005fd6 <__cvt+0x6a>
 800600a:	7803      	ldrb	r3, [r0, #0]
 800600c:	2b30      	cmp	r3, #48	@ 0x30
 800600e:	d10a      	bne.n	8006026 <__cvt+0xba>
 8006010:	2200      	movs	r2, #0
 8006012:	2300      	movs	r3, #0
 8006014:	4630      	mov	r0, r6
 8006016:	4639      	mov	r1, r7
 8006018:	f7fa fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800601c:	b918      	cbnz	r0, 8006026 <__cvt+0xba>
 800601e:	f1c4 0401 	rsb	r4, r4, #1
 8006022:	f8ca 4000 	str.w	r4, [sl]
 8006026:	f8da 3000 	ldr.w	r3, [sl]
 800602a:	4499      	add	r9, r3
 800602c:	e7d3      	b.n	8005fd6 <__cvt+0x6a>
 800602e:	1c59      	adds	r1, r3, #1
 8006030:	9103      	str	r1, [sp, #12]
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	e7d9      	b.n	8005fea <__cvt+0x7e>

08006036 <__exponent>:
 8006036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006038:	2900      	cmp	r1, #0
 800603a:	bfba      	itte	lt
 800603c:	4249      	neglt	r1, r1
 800603e:	232d      	movlt	r3, #45	@ 0x2d
 8006040:	232b      	movge	r3, #43	@ 0x2b
 8006042:	2909      	cmp	r1, #9
 8006044:	7002      	strb	r2, [r0, #0]
 8006046:	7043      	strb	r3, [r0, #1]
 8006048:	dd29      	ble.n	800609e <__exponent+0x68>
 800604a:	f10d 0307 	add.w	r3, sp, #7
 800604e:	461d      	mov	r5, r3
 8006050:	270a      	movs	r7, #10
 8006052:	461a      	mov	r2, r3
 8006054:	fbb1 f6f7 	udiv	r6, r1, r7
 8006058:	fb07 1416 	mls	r4, r7, r6, r1
 800605c:	3430      	adds	r4, #48	@ 0x30
 800605e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006062:	460c      	mov	r4, r1
 8006064:	2c63      	cmp	r4, #99	@ 0x63
 8006066:	f103 33ff 	add.w	r3, r3, #4294967295
 800606a:	4631      	mov	r1, r6
 800606c:	dcf1      	bgt.n	8006052 <__exponent+0x1c>
 800606e:	3130      	adds	r1, #48	@ 0x30
 8006070:	1e94      	subs	r4, r2, #2
 8006072:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006076:	1c41      	adds	r1, r0, #1
 8006078:	4623      	mov	r3, r4
 800607a:	42ab      	cmp	r3, r5
 800607c:	d30a      	bcc.n	8006094 <__exponent+0x5e>
 800607e:	f10d 0309 	add.w	r3, sp, #9
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	42ac      	cmp	r4, r5
 8006086:	bf88      	it	hi
 8006088:	2300      	movhi	r3, #0
 800608a:	3302      	adds	r3, #2
 800608c:	4403      	add	r3, r0
 800608e:	1a18      	subs	r0, r3, r0
 8006090:	b003      	add	sp, #12
 8006092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006094:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006098:	f801 6f01 	strb.w	r6, [r1, #1]!
 800609c:	e7ed      	b.n	800607a <__exponent+0x44>
 800609e:	2330      	movs	r3, #48	@ 0x30
 80060a0:	3130      	adds	r1, #48	@ 0x30
 80060a2:	7083      	strb	r3, [r0, #2]
 80060a4:	70c1      	strb	r1, [r0, #3]
 80060a6:	1d03      	adds	r3, r0, #4
 80060a8:	e7f1      	b.n	800608e <__exponent+0x58>
	...

080060ac <_printf_float>:
 80060ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b0:	b08d      	sub	sp, #52	@ 0x34
 80060b2:	460c      	mov	r4, r1
 80060b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060b8:	4616      	mov	r6, r2
 80060ba:	461f      	mov	r7, r3
 80060bc:	4605      	mov	r5, r0
 80060be:	f000 ff7f 	bl	8006fc0 <_localeconv_r>
 80060c2:	6803      	ldr	r3, [r0, #0]
 80060c4:	9304      	str	r3, [sp, #16]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fa f8d2 	bl	8000270 <strlen>
 80060cc:	2300      	movs	r3, #0
 80060ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80060d0:	f8d8 3000 	ldr.w	r3, [r8]
 80060d4:	9005      	str	r0, [sp, #20]
 80060d6:	3307      	adds	r3, #7
 80060d8:	f023 0307 	bic.w	r3, r3, #7
 80060dc:	f103 0208 	add.w	r2, r3, #8
 80060e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060e4:	f8d4 b000 	ldr.w	fp, [r4]
 80060e8:	f8c8 2000 	str.w	r2, [r8]
 80060ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80060f4:	9307      	str	r3, [sp, #28]
 80060f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80060fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006102:	4b9c      	ldr	r3, [pc, #624]	@ (8006374 <_printf_float+0x2c8>)
 8006104:	f04f 32ff 	mov.w	r2, #4294967295
 8006108:	f7fa fd10 	bl	8000b2c <__aeabi_dcmpun>
 800610c:	bb70      	cbnz	r0, 800616c <_printf_float+0xc0>
 800610e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006112:	4b98      	ldr	r3, [pc, #608]	@ (8006374 <_printf_float+0x2c8>)
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	f7fa fcea 	bl	8000af0 <__aeabi_dcmple>
 800611c:	bb30      	cbnz	r0, 800616c <_printf_float+0xc0>
 800611e:	2200      	movs	r2, #0
 8006120:	2300      	movs	r3, #0
 8006122:	4640      	mov	r0, r8
 8006124:	4649      	mov	r1, r9
 8006126:	f7fa fcd9 	bl	8000adc <__aeabi_dcmplt>
 800612a:	b110      	cbz	r0, 8006132 <_printf_float+0x86>
 800612c:	232d      	movs	r3, #45	@ 0x2d
 800612e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006132:	4a91      	ldr	r2, [pc, #580]	@ (8006378 <_printf_float+0x2cc>)
 8006134:	4b91      	ldr	r3, [pc, #580]	@ (800637c <_printf_float+0x2d0>)
 8006136:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800613a:	bf94      	ite	ls
 800613c:	4690      	movls	r8, r2
 800613e:	4698      	movhi	r8, r3
 8006140:	2303      	movs	r3, #3
 8006142:	6123      	str	r3, [r4, #16]
 8006144:	f02b 0304 	bic.w	r3, fp, #4
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	f04f 0900 	mov.w	r9, #0
 800614e:	9700      	str	r7, [sp, #0]
 8006150:	4633      	mov	r3, r6
 8006152:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006154:	4621      	mov	r1, r4
 8006156:	4628      	mov	r0, r5
 8006158:	f000 f9d2 	bl	8006500 <_printf_common>
 800615c:	3001      	adds	r0, #1
 800615e:	f040 808d 	bne.w	800627c <_printf_float+0x1d0>
 8006162:	f04f 30ff 	mov.w	r0, #4294967295
 8006166:	b00d      	add	sp, #52	@ 0x34
 8006168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	4640      	mov	r0, r8
 8006172:	4649      	mov	r1, r9
 8006174:	f7fa fcda 	bl	8000b2c <__aeabi_dcmpun>
 8006178:	b140      	cbz	r0, 800618c <_printf_float+0xe0>
 800617a:	464b      	mov	r3, r9
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfbc      	itt	lt
 8006180:	232d      	movlt	r3, #45	@ 0x2d
 8006182:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006186:	4a7e      	ldr	r2, [pc, #504]	@ (8006380 <_printf_float+0x2d4>)
 8006188:	4b7e      	ldr	r3, [pc, #504]	@ (8006384 <_printf_float+0x2d8>)
 800618a:	e7d4      	b.n	8006136 <_printf_float+0x8a>
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006192:	9206      	str	r2, [sp, #24]
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	d13b      	bne.n	8006210 <_printf_float+0x164>
 8006198:	2306      	movs	r3, #6
 800619a:	6063      	str	r3, [r4, #4]
 800619c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061a0:	2300      	movs	r3, #0
 80061a2:	6022      	str	r2, [r4, #0]
 80061a4:	9303      	str	r3, [sp, #12]
 80061a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80061a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061ac:	ab09      	add	r3, sp, #36	@ 0x24
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	6861      	ldr	r1, [r4, #4]
 80061b2:	ec49 8b10 	vmov	d0, r8, r9
 80061b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061ba:	4628      	mov	r0, r5
 80061bc:	f7ff fed6 	bl	8005f6c <__cvt>
 80061c0:	9b06      	ldr	r3, [sp, #24]
 80061c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061c4:	2b47      	cmp	r3, #71	@ 0x47
 80061c6:	4680      	mov	r8, r0
 80061c8:	d129      	bne.n	800621e <_printf_float+0x172>
 80061ca:	1cc8      	adds	r0, r1, #3
 80061cc:	db02      	blt.n	80061d4 <_printf_float+0x128>
 80061ce:	6863      	ldr	r3, [r4, #4]
 80061d0:	4299      	cmp	r1, r3
 80061d2:	dd41      	ble.n	8006258 <_printf_float+0x1ac>
 80061d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80061d8:	fa5f fa8a 	uxtb.w	sl, sl
 80061dc:	3901      	subs	r1, #1
 80061de:	4652      	mov	r2, sl
 80061e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80061e6:	f7ff ff26 	bl	8006036 <__exponent>
 80061ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061ec:	1813      	adds	r3, r2, r0
 80061ee:	2a01      	cmp	r2, #1
 80061f0:	4681      	mov	r9, r0
 80061f2:	6123      	str	r3, [r4, #16]
 80061f4:	dc02      	bgt.n	80061fc <_printf_float+0x150>
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	07d2      	lsls	r2, r2, #31
 80061fa:	d501      	bpl.n	8006200 <_printf_float+0x154>
 80061fc:	3301      	adds	r3, #1
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0a2      	beq.n	800614e <_printf_float+0xa2>
 8006208:	232d      	movs	r3, #45	@ 0x2d
 800620a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800620e:	e79e      	b.n	800614e <_printf_float+0xa2>
 8006210:	9a06      	ldr	r2, [sp, #24]
 8006212:	2a47      	cmp	r2, #71	@ 0x47
 8006214:	d1c2      	bne.n	800619c <_printf_float+0xf0>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1c0      	bne.n	800619c <_printf_float+0xf0>
 800621a:	2301      	movs	r3, #1
 800621c:	e7bd      	b.n	800619a <_printf_float+0xee>
 800621e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006222:	d9db      	bls.n	80061dc <_printf_float+0x130>
 8006224:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006228:	d118      	bne.n	800625c <_printf_float+0x1b0>
 800622a:	2900      	cmp	r1, #0
 800622c:	6863      	ldr	r3, [r4, #4]
 800622e:	dd0b      	ble.n	8006248 <_printf_float+0x19c>
 8006230:	6121      	str	r1, [r4, #16]
 8006232:	b913      	cbnz	r3, 800623a <_printf_float+0x18e>
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	07d0      	lsls	r0, r2, #31
 8006238:	d502      	bpl.n	8006240 <_printf_float+0x194>
 800623a:	3301      	adds	r3, #1
 800623c:	440b      	add	r3, r1
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006242:	f04f 0900 	mov.w	r9, #0
 8006246:	e7db      	b.n	8006200 <_printf_float+0x154>
 8006248:	b913      	cbnz	r3, 8006250 <_printf_float+0x1a4>
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	07d2      	lsls	r2, r2, #31
 800624e:	d501      	bpl.n	8006254 <_printf_float+0x1a8>
 8006250:	3302      	adds	r3, #2
 8006252:	e7f4      	b.n	800623e <_printf_float+0x192>
 8006254:	2301      	movs	r3, #1
 8006256:	e7f2      	b.n	800623e <_printf_float+0x192>
 8006258:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800625c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800625e:	4299      	cmp	r1, r3
 8006260:	db05      	blt.n	800626e <_printf_float+0x1c2>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	6121      	str	r1, [r4, #16]
 8006266:	07d8      	lsls	r0, r3, #31
 8006268:	d5ea      	bpl.n	8006240 <_printf_float+0x194>
 800626a:	1c4b      	adds	r3, r1, #1
 800626c:	e7e7      	b.n	800623e <_printf_float+0x192>
 800626e:	2900      	cmp	r1, #0
 8006270:	bfd4      	ite	le
 8006272:	f1c1 0202 	rsble	r2, r1, #2
 8006276:	2201      	movgt	r2, #1
 8006278:	4413      	add	r3, r2
 800627a:	e7e0      	b.n	800623e <_printf_float+0x192>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	055a      	lsls	r2, r3, #21
 8006280:	d407      	bmi.n	8006292 <_printf_float+0x1e6>
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	4642      	mov	r2, r8
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	d12b      	bne.n	80062e8 <_printf_float+0x23c>
 8006290:	e767      	b.n	8006162 <_printf_float+0xb6>
 8006292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006296:	f240 80dd 	bls.w	8006454 <_printf_float+0x3a8>
 800629a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800629e:	2200      	movs	r2, #0
 80062a0:	2300      	movs	r3, #0
 80062a2:	f7fa fc11 	bl	8000ac8 <__aeabi_dcmpeq>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d033      	beq.n	8006312 <_printf_float+0x266>
 80062aa:	4a37      	ldr	r2, [pc, #220]	@ (8006388 <_printf_float+0x2dc>)
 80062ac:	2301      	movs	r3, #1
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f af54 	beq.w	8006162 <_printf_float+0xb6>
 80062ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062be:	4543      	cmp	r3, r8
 80062c0:	db02      	blt.n	80062c8 <_printf_float+0x21c>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07d8      	lsls	r0, r3, #31
 80062c6:	d50f      	bpl.n	80062e8 <_printf_float+0x23c>
 80062c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062cc:	4631      	mov	r1, r6
 80062ce:	4628      	mov	r0, r5
 80062d0:	47b8      	blx	r7
 80062d2:	3001      	adds	r0, #1
 80062d4:	f43f af45 	beq.w	8006162 <_printf_float+0xb6>
 80062d8:	f04f 0900 	mov.w	r9, #0
 80062dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80062e0:	f104 0a1a 	add.w	sl, r4, #26
 80062e4:	45c8      	cmp	r8, r9
 80062e6:	dc09      	bgt.n	80062fc <_printf_float+0x250>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	079b      	lsls	r3, r3, #30
 80062ec:	f100 8103 	bmi.w	80064f6 <_printf_float+0x44a>
 80062f0:	68e0      	ldr	r0, [r4, #12]
 80062f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062f4:	4298      	cmp	r0, r3
 80062f6:	bfb8      	it	lt
 80062f8:	4618      	movlt	r0, r3
 80062fa:	e734      	b.n	8006166 <_printf_float+0xba>
 80062fc:	2301      	movs	r3, #1
 80062fe:	4652      	mov	r2, sl
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	47b8      	blx	r7
 8006306:	3001      	adds	r0, #1
 8006308:	f43f af2b 	beq.w	8006162 <_printf_float+0xb6>
 800630c:	f109 0901 	add.w	r9, r9, #1
 8006310:	e7e8      	b.n	80062e4 <_printf_float+0x238>
 8006312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006314:	2b00      	cmp	r3, #0
 8006316:	dc39      	bgt.n	800638c <_printf_float+0x2e0>
 8006318:	4a1b      	ldr	r2, [pc, #108]	@ (8006388 <_printf_float+0x2dc>)
 800631a:	2301      	movs	r3, #1
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f af1d 	beq.w	8006162 <_printf_float+0xb6>
 8006328:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800632c:	ea59 0303 	orrs.w	r3, r9, r3
 8006330:	d102      	bne.n	8006338 <_printf_float+0x28c>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	07d9      	lsls	r1, r3, #31
 8006336:	d5d7      	bpl.n	80062e8 <_printf_float+0x23c>
 8006338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	f43f af0d 	beq.w	8006162 <_printf_float+0xb6>
 8006348:	f04f 0a00 	mov.w	sl, #0
 800634c:	f104 0b1a 	add.w	fp, r4, #26
 8006350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006352:	425b      	negs	r3, r3
 8006354:	4553      	cmp	r3, sl
 8006356:	dc01      	bgt.n	800635c <_printf_float+0x2b0>
 8006358:	464b      	mov	r3, r9
 800635a:	e793      	b.n	8006284 <_printf_float+0x1d8>
 800635c:	2301      	movs	r3, #1
 800635e:	465a      	mov	r2, fp
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	f43f aefb 	beq.w	8006162 <_printf_float+0xb6>
 800636c:	f10a 0a01 	add.w	sl, sl, #1
 8006370:	e7ee      	b.n	8006350 <_printf_float+0x2a4>
 8006372:	bf00      	nop
 8006374:	7fefffff 	.word	0x7fefffff
 8006378:	0800b610 	.word	0x0800b610
 800637c:	0800b614 	.word	0x0800b614
 8006380:	0800b618 	.word	0x0800b618
 8006384:	0800b61c 	.word	0x0800b61c
 8006388:	0800b620 	.word	0x0800b620
 800638c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800638e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006392:	4553      	cmp	r3, sl
 8006394:	bfa8      	it	ge
 8006396:	4653      	movge	r3, sl
 8006398:	2b00      	cmp	r3, #0
 800639a:	4699      	mov	r9, r3
 800639c:	dc36      	bgt.n	800640c <_printf_float+0x360>
 800639e:	f04f 0b00 	mov.w	fp, #0
 80063a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063a6:	f104 021a 	add.w	r2, r4, #26
 80063aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063ac:	9306      	str	r3, [sp, #24]
 80063ae:	eba3 0309 	sub.w	r3, r3, r9
 80063b2:	455b      	cmp	r3, fp
 80063b4:	dc31      	bgt.n	800641a <_printf_float+0x36e>
 80063b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b8:	459a      	cmp	sl, r3
 80063ba:	dc3a      	bgt.n	8006432 <_printf_float+0x386>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	07da      	lsls	r2, r3, #31
 80063c0:	d437      	bmi.n	8006432 <_printf_float+0x386>
 80063c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c4:	ebaa 0903 	sub.w	r9, sl, r3
 80063c8:	9b06      	ldr	r3, [sp, #24]
 80063ca:	ebaa 0303 	sub.w	r3, sl, r3
 80063ce:	4599      	cmp	r9, r3
 80063d0:	bfa8      	it	ge
 80063d2:	4699      	movge	r9, r3
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	dc33      	bgt.n	8006442 <_printf_float+0x396>
 80063da:	f04f 0800 	mov.w	r8, #0
 80063de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063e2:	f104 0b1a 	add.w	fp, r4, #26
 80063e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063e8:	ebaa 0303 	sub.w	r3, sl, r3
 80063ec:	eba3 0309 	sub.w	r3, r3, r9
 80063f0:	4543      	cmp	r3, r8
 80063f2:	f77f af79 	ble.w	80062e8 <_printf_float+0x23c>
 80063f6:	2301      	movs	r3, #1
 80063f8:	465a      	mov	r2, fp
 80063fa:	4631      	mov	r1, r6
 80063fc:	4628      	mov	r0, r5
 80063fe:	47b8      	blx	r7
 8006400:	3001      	adds	r0, #1
 8006402:	f43f aeae 	beq.w	8006162 <_printf_float+0xb6>
 8006406:	f108 0801 	add.w	r8, r8, #1
 800640a:	e7ec      	b.n	80063e6 <_printf_float+0x33a>
 800640c:	4642      	mov	r2, r8
 800640e:	4631      	mov	r1, r6
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	d1c2      	bne.n	800639e <_printf_float+0x2f2>
 8006418:	e6a3      	b.n	8006162 <_printf_float+0xb6>
 800641a:	2301      	movs	r3, #1
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	9206      	str	r2, [sp, #24]
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	f43f ae9c 	beq.w	8006162 <_printf_float+0xb6>
 800642a:	9a06      	ldr	r2, [sp, #24]
 800642c:	f10b 0b01 	add.w	fp, fp, #1
 8006430:	e7bb      	b.n	80063aa <_printf_float+0x2fe>
 8006432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	d1c0      	bne.n	80063c2 <_printf_float+0x316>
 8006440:	e68f      	b.n	8006162 <_printf_float+0xb6>
 8006442:	9a06      	ldr	r2, [sp, #24]
 8006444:	464b      	mov	r3, r9
 8006446:	4442      	add	r2, r8
 8006448:	4631      	mov	r1, r6
 800644a:	4628      	mov	r0, r5
 800644c:	47b8      	blx	r7
 800644e:	3001      	adds	r0, #1
 8006450:	d1c3      	bne.n	80063da <_printf_float+0x32e>
 8006452:	e686      	b.n	8006162 <_printf_float+0xb6>
 8006454:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006458:	f1ba 0f01 	cmp.w	sl, #1
 800645c:	dc01      	bgt.n	8006462 <_printf_float+0x3b6>
 800645e:	07db      	lsls	r3, r3, #31
 8006460:	d536      	bpl.n	80064d0 <_printf_float+0x424>
 8006462:	2301      	movs	r3, #1
 8006464:	4642      	mov	r2, r8
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	f43f ae78 	beq.w	8006162 <_printf_float+0xb6>
 8006472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	f43f ae70 	beq.w	8006162 <_printf_float+0xb6>
 8006482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006486:	2200      	movs	r2, #0
 8006488:	2300      	movs	r3, #0
 800648a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800648e:	f7fa fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006492:	b9c0      	cbnz	r0, 80064c6 <_printf_float+0x41a>
 8006494:	4653      	mov	r3, sl
 8006496:	f108 0201 	add.w	r2, r8, #1
 800649a:	4631      	mov	r1, r6
 800649c:	4628      	mov	r0, r5
 800649e:	47b8      	blx	r7
 80064a0:	3001      	adds	r0, #1
 80064a2:	d10c      	bne.n	80064be <_printf_float+0x412>
 80064a4:	e65d      	b.n	8006162 <_printf_float+0xb6>
 80064a6:	2301      	movs	r3, #1
 80064a8:	465a      	mov	r2, fp
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f ae56 	beq.w	8006162 <_printf_float+0xb6>
 80064b6:	f108 0801 	add.w	r8, r8, #1
 80064ba:	45d0      	cmp	r8, sl
 80064bc:	dbf3      	blt.n	80064a6 <_printf_float+0x3fa>
 80064be:	464b      	mov	r3, r9
 80064c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064c4:	e6df      	b.n	8006286 <_printf_float+0x1da>
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	f104 0b1a 	add.w	fp, r4, #26
 80064ce:	e7f4      	b.n	80064ba <_printf_float+0x40e>
 80064d0:	2301      	movs	r3, #1
 80064d2:	4642      	mov	r2, r8
 80064d4:	e7e1      	b.n	800649a <_printf_float+0x3ee>
 80064d6:	2301      	movs	r3, #1
 80064d8:	464a      	mov	r2, r9
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f ae3e 	beq.w	8006162 <_printf_float+0xb6>
 80064e6:	f108 0801 	add.w	r8, r8, #1
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064ee:	1a5b      	subs	r3, r3, r1
 80064f0:	4543      	cmp	r3, r8
 80064f2:	dcf0      	bgt.n	80064d6 <_printf_float+0x42a>
 80064f4:	e6fc      	b.n	80062f0 <_printf_float+0x244>
 80064f6:	f04f 0800 	mov.w	r8, #0
 80064fa:	f104 0919 	add.w	r9, r4, #25
 80064fe:	e7f4      	b.n	80064ea <_printf_float+0x43e>

08006500 <_printf_common>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	4616      	mov	r6, r2
 8006506:	4698      	mov	r8, r3
 8006508:	688a      	ldr	r2, [r1, #8]
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006510:	4293      	cmp	r3, r2
 8006512:	bfb8      	it	lt
 8006514:	4613      	movlt	r3, r2
 8006516:	6033      	str	r3, [r6, #0]
 8006518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800651c:	4607      	mov	r7, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b10a      	cbz	r2, 8006526 <_printf_common+0x26>
 8006522:	3301      	adds	r3, #1
 8006524:	6033      	str	r3, [r6, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	0699      	lsls	r1, r3, #26
 800652a:	bf42      	ittt	mi
 800652c:	6833      	ldrmi	r3, [r6, #0]
 800652e:	3302      	addmi	r3, #2
 8006530:	6033      	strmi	r3, [r6, #0]
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	f015 0506 	ands.w	r5, r5, #6
 8006538:	d106      	bne.n	8006548 <_printf_common+0x48>
 800653a:	f104 0a19 	add.w	sl, r4, #25
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	6832      	ldr	r2, [r6, #0]
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	42ab      	cmp	r3, r5
 8006546:	dc26      	bgt.n	8006596 <_printf_common+0x96>
 8006548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	3b00      	subs	r3, #0
 8006550:	bf18      	it	ne
 8006552:	2301      	movne	r3, #1
 8006554:	0692      	lsls	r2, r2, #26
 8006556:	d42b      	bmi.n	80065b0 <_printf_common+0xb0>
 8006558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800655c:	4641      	mov	r1, r8
 800655e:	4638      	mov	r0, r7
 8006560:	47c8      	blx	r9
 8006562:	3001      	adds	r0, #1
 8006564:	d01e      	beq.n	80065a4 <_printf_common+0xa4>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	6922      	ldr	r2, [r4, #16]
 800656a:	f003 0306 	and.w	r3, r3, #6
 800656e:	2b04      	cmp	r3, #4
 8006570:	bf02      	ittt	eq
 8006572:	68e5      	ldreq	r5, [r4, #12]
 8006574:	6833      	ldreq	r3, [r6, #0]
 8006576:	1aed      	subeq	r5, r5, r3
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	bf0c      	ite	eq
 800657c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006580:	2500      	movne	r5, #0
 8006582:	4293      	cmp	r3, r2
 8006584:	bfc4      	itt	gt
 8006586:	1a9b      	subgt	r3, r3, r2
 8006588:	18ed      	addgt	r5, r5, r3
 800658a:	2600      	movs	r6, #0
 800658c:	341a      	adds	r4, #26
 800658e:	42b5      	cmp	r5, r6
 8006590:	d11a      	bne.n	80065c8 <_printf_common+0xc8>
 8006592:	2000      	movs	r0, #0
 8006594:	e008      	b.n	80065a8 <_printf_common+0xa8>
 8006596:	2301      	movs	r3, #1
 8006598:	4652      	mov	r2, sl
 800659a:	4641      	mov	r1, r8
 800659c:	4638      	mov	r0, r7
 800659e:	47c8      	blx	r9
 80065a0:	3001      	adds	r0, #1
 80065a2:	d103      	bne.n	80065ac <_printf_common+0xac>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ac:	3501      	adds	r5, #1
 80065ae:	e7c6      	b.n	800653e <_printf_common+0x3e>
 80065b0:	18e1      	adds	r1, r4, r3
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	2030      	movs	r0, #48	@ 0x30
 80065b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ba:	4422      	add	r2, r4
 80065bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065c4:	3302      	adds	r3, #2
 80065c6:	e7c7      	b.n	8006558 <_printf_common+0x58>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4622      	mov	r2, r4
 80065cc:	4641      	mov	r1, r8
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c8      	blx	r9
 80065d2:	3001      	adds	r0, #1
 80065d4:	d0e6      	beq.n	80065a4 <_printf_common+0xa4>
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7d9      	b.n	800658e <_printf_common+0x8e>
	...

080065dc <_printf_i>:
 80065dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	7e0f      	ldrb	r7, [r1, #24]
 80065e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065e4:	2f78      	cmp	r7, #120	@ 0x78
 80065e6:	4691      	mov	r9, r2
 80065e8:	4680      	mov	r8, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	469a      	mov	sl, r3
 80065ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065f2:	d807      	bhi.n	8006604 <_printf_i+0x28>
 80065f4:	2f62      	cmp	r7, #98	@ 0x62
 80065f6:	d80a      	bhi.n	800660e <_printf_i+0x32>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	f000 80d2 	beq.w	80067a2 <_printf_i+0x1c6>
 80065fe:	2f58      	cmp	r7, #88	@ 0x58
 8006600:	f000 80b9 	beq.w	8006776 <_printf_i+0x19a>
 8006604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800660c:	e03a      	b.n	8006684 <_printf_i+0xa8>
 800660e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006612:	2b15      	cmp	r3, #21
 8006614:	d8f6      	bhi.n	8006604 <_printf_i+0x28>
 8006616:	a101      	add	r1, pc, #4	@ (adr r1, 800661c <_printf_i+0x40>)
 8006618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800661c:	08006675 	.word	0x08006675
 8006620:	08006689 	.word	0x08006689
 8006624:	08006605 	.word	0x08006605
 8006628:	08006605 	.word	0x08006605
 800662c:	08006605 	.word	0x08006605
 8006630:	08006605 	.word	0x08006605
 8006634:	08006689 	.word	0x08006689
 8006638:	08006605 	.word	0x08006605
 800663c:	08006605 	.word	0x08006605
 8006640:	08006605 	.word	0x08006605
 8006644:	08006605 	.word	0x08006605
 8006648:	08006789 	.word	0x08006789
 800664c:	080066b3 	.word	0x080066b3
 8006650:	08006743 	.word	0x08006743
 8006654:	08006605 	.word	0x08006605
 8006658:	08006605 	.word	0x08006605
 800665c:	080067ab 	.word	0x080067ab
 8006660:	08006605 	.word	0x08006605
 8006664:	080066b3 	.word	0x080066b3
 8006668:	08006605 	.word	0x08006605
 800666c:	08006605 	.word	0x08006605
 8006670:	0800674b 	.word	0x0800674b
 8006674:	6833      	ldr	r3, [r6, #0]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6032      	str	r2, [r6, #0]
 800667c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006684:	2301      	movs	r3, #1
 8006686:	e09d      	b.n	80067c4 <_printf_i+0x1e8>
 8006688:	6833      	ldr	r3, [r6, #0]
 800668a:	6820      	ldr	r0, [r4, #0]
 800668c:	1d19      	adds	r1, r3, #4
 800668e:	6031      	str	r1, [r6, #0]
 8006690:	0606      	lsls	r6, r0, #24
 8006692:	d501      	bpl.n	8006698 <_printf_i+0xbc>
 8006694:	681d      	ldr	r5, [r3, #0]
 8006696:	e003      	b.n	80066a0 <_printf_i+0xc4>
 8006698:	0645      	lsls	r5, r0, #25
 800669a:	d5fb      	bpl.n	8006694 <_printf_i+0xb8>
 800669c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	da03      	bge.n	80066ac <_printf_i+0xd0>
 80066a4:	232d      	movs	r3, #45	@ 0x2d
 80066a6:	426d      	negs	r5, r5
 80066a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066ac:	4859      	ldr	r0, [pc, #356]	@ (8006814 <_printf_i+0x238>)
 80066ae:	230a      	movs	r3, #10
 80066b0:	e011      	b.n	80066d6 <_printf_i+0xfa>
 80066b2:	6821      	ldr	r1, [r4, #0]
 80066b4:	6833      	ldr	r3, [r6, #0]
 80066b6:	0608      	lsls	r0, r1, #24
 80066b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80066bc:	d402      	bmi.n	80066c4 <_printf_i+0xe8>
 80066be:	0649      	lsls	r1, r1, #25
 80066c0:	bf48      	it	mi
 80066c2:	b2ad      	uxthmi	r5, r5
 80066c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80066c6:	4853      	ldr	r0, [pc, #332]	@ (8006814 <_printf_i+0x238>)
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	bf14      	ite	ne
 80066cc:	230a      	movne	r3, #10
 80066ce:	2308      	moveq	r3, #8
 80066d0:	2100      	movs	r1, #0
 80066d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066d6:	6866      	ldr	r6, [r4, #4]
 80066d8:	60a6      	str	r6, [r4, #8]
 80066da:	2e00      	cmp	r6, #0
 80066dc:	bfa2      	ittt	ge
 80066de:	6821      	ldrge	r1, [r4, #0]
 80066e0:	f021 0104 	bicge.w	r1, r1, #4
 80066e4:	6021      	strge	r1, [r4, #0]
 80066e6:	b90d      	cbnz	r5, 80066ec <_printf_i+0x110>
 80066e8:	2e00      	cmp	r6, #0
 80066ea:	d04b      	beq.n	8006784 <_printf_i+0x1a8>
 80066ec:	4616      	mov	r6, r2
 80066ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80066f2:	fb03 5711 	mls	r7, r3, r1, r5
 80066f6:	5dc7      	ldrb	r7, [r0, r7]
 80066f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066fc:	462f      	mov	r7, r5
 80066fe:	42bb      	cmp	r3, r7
 8006700:	460d      	mov	r5, r1
 8006702:	d9f4      	bls.n	80066ee <_printf_i+0x112>
 8006704:	2b08      	cmp	r3, #8
 8006706:	d10b      	bne.n	8006720 <_printf_i+0x144>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	07df      	lsls	r7, r3, #31
 800670c:	d508      	bpl.n	8006720 <_printf_i+0x144>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	6861      	ldr	r1, [r4, #4]
 8006712:	4299      	cmp	r1, r3
 8006714:	bfde      	ittt	le
 8006716:	2330      	movle	r3, #48	@ 0x30
 8006718:	f806 3c01 	strble.w	r3, [r6, #-1]
 800671c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006720:	1b92      	subs	r2, r2, r6
 8006722:	6122      	str	r2, [r4, #16]
 8006724:	f8cd a000 	str.w	sl, [sp]
 8006728:	464b      	mov	r3, r9
 800672a:	aa03      	add	r2, sp, #12
 800672c:	4621      	mov	r1, r4
 800672e:	4640      	mov	r0, r8
 8006730:	f7ff fee6 	bl	8006500 <_printf_common>
 8006734:	3001      	adds	r0, #1
 8006736:	d14a      	bne.n	80067ce <_printf_i+0x1f2>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	b004      	add	sp, #16
 800673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	f043 0320 	orr.w	r3, r3, #32
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	4833      	ldr	r0, [pc, #204]	@ (8006818 <_printf_i+0x23c>)
 800674c:	2778      	movs	r7, #120	@ 0x78
 800674e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	6831      	ldr	r1, [r6, #0]
 8006756:	061f      	lsls	r7, r3, #24
 8006758:	f851 5b04 	ldr.w	r5, [r1], #4
 800675c:	d402      	bmi.n	8006764 <_printf_i+0x188>
 800675e:	065f      	lsls	r7, r3, #25
 8006760:	bf48      	it	mi
 8006762:	b2ad      	uxthmi	r5, r5
 8006764:	6031      	str	r1, [r6, #0]
 8006766:	07d9      	lsls	r1, r3, #31
 8006768:	bf44      	itt	mi
 800676a:	f043 0320 	orrmi.w	r3, r3, #32
 800676e:	6023      	strmi	r3, [r4, #0]
 8006770:	b11d      	cbz	r5, 800677a <_printf_i+0x19e>
 8006772:	2310      	movs	r3, #16
 8006774:	e7ac      	b.n	80066d0 <_printf_i+0xf4>
 8006776:	4827      	ldr	r0, [pc, #156]	@ (8006814 <_printf_i+0x238>)
 8006778:	e7e9      	b.n	800674e <_printf_i+0x172>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f023 0320 	bic.w	r3, r3, #32
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	e7f6      	b.n	8006772 <_printf_i+0x196>
 8006784:	4616      	mov	r6, r2
 8006786:	e7bd      	b.n	8006704 <_printf_i+0x128>
 8006788:	6833      	ldr	r3, [r6, #0]
 800678a:	6825      	ldr	r5, [r4, #0]
 800678c:	6961      	ldr	r1, [r4, #20]
 800678e:	1d18      	adds	r0, r3, #4
 8006790:	6030      	str	r0, [r6, #0]
 8006792:	062e      	lsls	r6, r5, #24
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	d501      	bpl.n	800679c <_printf_i+0x1c0>
 8006798:	6019      	str	r1, [r3, #0]
 800679a:	e002      	b.n	80067a2 <_printf_i+0x1c6>
 800679c:	0668      	lsls	r0, r5, #25
 800679e:	d5fb      	bpl.n	8006798 <_printf_i+0x1bc>
 80067a0:	8019      	strh	r1, [r3, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	4616      	mov	r6, r2
 80067a8:	e7bc      	b.n	8006724 <_printf_i+0x148>
 80067aa:	6833      	ldr	r3, [r6, #0]
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	6032      	str	r2, [r6, #0]
 80067b0:	681e      	ldr	r6, [r3, #0]
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	2100      	movs	r1, #0
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7f9 fd0a 	bl	80001d0 <memchr>
 80067bc:	b108      	cbz	r0, 80067c2 <_printf_i+0x1e6>
 80067be:	1b80      	subs	r0, r0, r6
 80067c0:	6060      	str	r0, [r4, #4]
 80067c2:	6863      	ldr	r3, [r4, #4]
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	2300      	movs	r3, #0
 80067c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067cc:	e7aa      	b.n	8006724 <_printf_i+0x148>
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	4632      	mov	r2, r6
 80067d2:	4649      	mov	r1, r9
 80067d4:	4640      	mov	r0, r8
 80067d6:	47d0      	blx	sl
 80067d8:	3001      	adds	r0, #1
 80067da:	d0ad      	beq.n	8006738 <_printf_i+0x15c>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	079b      	lsls	r3, r3, #30
 80067e0:	d413      	bmi.n	800680a <_printf_i+0x22e>
 80067e2:	68e0      	ldr	r0, [r4, #12]
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	4298      	cmp	r0, r3
 80067e8:	bfb8      	it	lt
 80067ea:	4618      	movlt	r0, r3
 80067ec:	e7a6      	b.n	800673c <_printf_i+0x160>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4632      	mov	r2, r6
 80067f2:	4649      	mov	r1, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	47d0      	blx	sl
 80067f8:	3001      	adds	r0, #1
 80067fa:	d09d      	beq.n	8006738 <_printf_i+0x15c>
 80067fc:	3501      	adds	r5, #1
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	9903      	ldr	r1, [sp, #12]
 8006802:	1a5b      	subs	r3, r3, r1
 8006804:	42ab      	cmp	r3, r5
 8006806:	dcf2      	bgt.n	80067ee <_printf_i+0x212>
 8006808:	e7eb      	b.n	80067e2 <_printf_i+0x206>
 800680a:	2500      	movs	r5, #0
 800680c:	f104 0619 	add.w	r6, r4, #25
 8006810:	e7f5      	b.n	80067fe <_printf_i+0x222>
 8006812:	bf00      	nop
 8006814:	0800b622 	.word	0x0800b622
 8006818:	0800b633 	.word	0x0800b633

0800681c <_scanf_float>:
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006820:	b087      	sub	sp, #28
 8006822:	4617      	mov	r7, r2
 8006824:	9303      	str	r3, [sp, #12]
 8006826:	688b      	ldr	r3, [r1, #8]
 8006828:	1e5a      	subs	r2, r3, #1
 800682a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800682e:	bf81      	itttt	hi
 8006830:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006834:	eb03 0b05 	addhi.w	fp, r3, r5
 8006838:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800683c:	608b      	strhi	r3, [r1, #8]
 800683e:	680b      	ldr	r3, [r1, #0]
 8006840:	460a      	mov	r2, r1
 8006842:	f04f 0500 	mov.w	r5, #0
 8006846:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800684a:	f842 3b1c 	str.w	r3, [r2], #28
 800684e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006852:	4680      	mov	r8, r0
 8006854:	460c      	mov	r4, r1
 8006856:	bf98      	it	ls
 8006858:	f04f 0b00 	movls.w	fp, #0
 800685c:	9201      	str	r2, [sp, #4]
 800685e:	4616      	mov	r6, r2
 8006860:	46aa      	mov	sl, r5
 8006862:	46a9      	mov	r9, r5
 8006864:	9502      	str	r5, [sp, #8]
 8006866:	68a2      	ldr	r2, [r4, #8]
 8006868:	b152      	cbz	r2, 8006880 <_scanf_float+0x64>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006870:	d864      	bhi.n	800693c <_scanf_float+0x120>
 8006872:	2b40      	cmp	r3, #64	@ 0x40
 8006874:	d83c      	bhi.n	80068f0 <_scanf_float+0xd4>
 8006876:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800687a:	b2c8      	uxtb	r0, r1
 800687c:	280e      	cmp	r0, #14
 800687e:	d93a      	bls.n	80068f6 <_scanf_float+0xda>
 8006880:	f1b9 0f00 	cmp.w	r9, #0
 8006884:	d003      	beq.n	800688e <_scanf_float+0x72>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006892:	f1ba 0f01 	cmp.w	sl, #1
 8006896:	f200 8117 	bhi.w	8006ac8 <_scanf_float+0x2ac>
 800689a:	9b01      	ldr	r3, [sp, #4]
 800689c:	429e      	cmp	r6, r3
 800689e:	f200 8108 	bhi.w	8006ab2 <_scanf_float+0x296>
 80068a2:	2001      	movs	r0, #1
 80068a4:	b007      	add	sp, #28
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80068ae:	2a0d      	cmp	r2, #13
 80068b0:	d8e6      	bhi.n	8006880 <_scanf_float+0x64>
 80068b2:	a101      	add	r1, pc, #4	@ (adr r1, 80068b8 <_scanf_float+0x9c>)
 80068b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068b8:	080069ff 	.word	0x080069ff
 80068bc:	08006881 	.word	0x08006881
 80068c0:	08006881 	.word	0x08006881
 80068c4:	08006881 	.word	0x08006881
 80068c8:	08006a5f 	.word	0x08006a5f
 80068cc:	08006a37 	.word	0x08006a37
 80068d0:	08006881 	.word	0x08006881
 80068d4:	08006881 	.word	0x08006881
 80068d8:	08006a0d 	.word	0x08006a0d
 80068dc:	08006881 	.word	0x08006881
 80068e0:	08006881 	.word	0x08006881
 80068e4:	08006881 	.word	0x08006881
 80068e8:	08006881 	.word	0x08006881
 80068ec:	080069c5 	.word	0x080069c5
 80068f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80068f4:	e7db      	b.n	80068ae <_scanf_float+0x92>
 80068f6:	290e      	cmp	r1, #14
 80068f8:	d8c2      	bhi.n	8006880 <_scanf_float+0x64>
 80068fa:	a001      	add	r0, pc, #4	@ (adr r0, 8006900 <_scanf_float+0xe4>)
 80068fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006900:	080069b5 	.word	0x080069b5
 8006904:	08006881 	.word	0x08006881
 8006908:	080069b5 	.word	0x080069b5
 800690c:	08006a4b 	.word	0x08006a4b
 8006910:	08006881 	.word	0x08006881
 8006914:	0800695d 	.word	0x0800695d
 8006918:	0800699b 	.word	0x0800699b
 800691c:	0800699b 	.word	0x0800699b
 8006920:	0800699b 	.word	0x0800699b
 8006924:	0800699b 	.word	0x0800699b
 8006928:	0800699b 	.word	0x0800699b
 800692c:	0800699b 	.word	0x0800699b
 8006930:	0800699b 	.word	0x0800699b
 8006934:	0800699b 	.word	0x0800699b
 8006938:	0800699b 	.word	0x0800699b
 800693c:	2b6e      	cmp	r3, #110	@ 0x6e
 800693e:	d809      	bhi.n	8006954 <_scanf_float+0x138>
 8006940:	2b60      	cmp	r3, #96	@ 0x60
 8006942:	d8b2      	bhi.n	80068aa <_scanf_float+0x8e>
 8006944:	2b54      	cmp	r3, #84	@ 0x54
 8006946:	d07b      	beq.n	8006a40 <_scanf_float+0x224>
 8006948:	2b59      	cmp	r3, #89	@ 0x59
 800694a:	d199      	bne.n	8006880 <_scanf_float+0x64>
 800694c:	2d07      	cmp	r5, #7
 800694e:	d197      	bne.n	8006880 <_scanf_float+0x64>
 8006950:	2508      	movs	r5, #8
 8006952:	e02c      	b.n	80069ae <_scanf_float+0x192>
 8006954:	2b74      	cmp	r3, #116	@ 0x74
 8006956:	d073      	beq.n	8006a40 <_scanf_float+0x224>
 8006958:	2b79      	cmp	r3, #121	@ 0x79
 800695a:	e7f6      	b.n	800694a <_scanf_float+0x12e>
 800695c:	6821      	ldr	r1, [r4, #0]
 800695e:	05c8      	lsls	r0, r1, #23
 8006960:	d51b      	bpl.n	800699a <_scanf_float+0x17e>
 8006962:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006966:	6021      	str	r1, [r4, #0]
 8006968:	f109 0901 	add.w	r9, r9, #1
 800696c:	f1bb 0f00 	cmp.w	fp, #0
 8006970:	d003      	beq.n	800697a <_scanf_float+0x15e>
 8006972:	3201      	adds	r2, #1
 8006974:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006978:	60a2      	str	r2, [r4, #8]
 800697a:	68a3      	ldr	r3, [r4, #8]
 800697c:	3b01      	subs	r3, #1
 800697e:	60a3      	str	r3, [r4, #8]
 8006980:	6923      	ldr	r3, [r4, #16]
 8006982:	3301      	adds	r3, #1
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3b01      	subs	r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	607b      	str	r3, [r7, #4]
 800698e:	f340 8087 	ble.w	8006aa0 <_scanf_float+0x284>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	3301      	adds	r3, #1
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	e765      	b.n	8006866 <_scanf_float+0x4a>
 800699a:	eb1a 0105 	adds.w	r1, sl, r5
 800699e:	f47f af6f 	bne.w	8006880 <_scanf_float+0x64>
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80069a8:	6022      	str	r2, [r4, #0]
 80069aa:	460d      	mov	r5, r1
 80069ac:	468a      	mov	sl, r1
 80069ae:	f806 3b01 	strb.w	r3, [r6], #1
 80069b2:	e7e2      	b.n	800697a <_scanf_float+0x15e>
 80069b4:	6822      	ldr	r2, [r4, #0]
 80069b6:	0610      	lsls	r0, r2, #24
 80069b8:	f57f af62 	bpl.w	8006880 <_scanf_float+0x64>
 80069bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069c0:	6022      	str	r2, [r4, #0]
 80069c2:	e7f4      	b.n	80069ae <_scanf_float+0x192>
 80069c4:	f1ba 0f00 	cmp.w	sl, #0
 80069c8:	d10e      	bne.n	80069e8 <_scanf_float+0x1cc>
 80069ca:	f1b9 0f00 	cmp.w	r9, #0
 80069ce:	d10e      	bne.n	80069ee <_scanf_float+0x1d2>
 80069d0:	6822      	ldr	r2, [r4, #0]
 80069d2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80069d6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80069da:	d108      	bne.n	80069ee <_scanf_float+0x1d2>
 80069dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80069e0:	6022      	str	r2, [r4, #0]
 80069e2:	f04f 0a01 	mov.w	sl, #1
 80069e6:	e7e2      	b.n	80069ae <_scanf_float+0x192>
 80069e8:	f1ba 0f02 	cmp.w	sl, #2
 80069ec:	d055      	beq.n	8006a9a <_scanf_float+0x27e>
 80069ee:	2d01      	cmp	r5, #1
 80069f0:	d002      	beq.n	80069f8 <_scanf_float+0x1dc>
 80069f2:	2d04      	cmp	r5, #4
 80069f4:	f47f af44 	bne.w	8006880 <_scanf_float+0x64>
 80069f8:	3501      	adds	r5, #1
 80069fa:	b2ed      	uxtb	r5, r5
 80069fc:	e7d7      	b.n	80069ae <_scanf_float+0x192>
 80069fe:	f1ba 0f01 	cmp.w	sl, #1
 8006a02:	f47f af3d 	bne.w	8006880 <_scanf_float+0x64>
 8006a06:	f04f 0a02 	mov.w	sl, #2
 8006a0a:	e7d0      	b.n	80069ae <_scanf_float+0x192>
 8006a0c:	b97d      	cbnz	r5, 8006a2e <_scanf_float+0x212>
 8006a0e:	f1b9 0f00 	cmp.w	r9, #0
 8006a12:	f47f af38 	bne.w	8006886 <_scanf_float+0x6a>
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a20:	f040 8108 	bne.w	8006c34 <_scanf_float+0x418>
 8006a24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a28:	6022      	str	r2, [r4, #0]
 8006a2a:	2501      	movs	r5, #1
 8006a2c:	e7bf      	b.n	80069ae <_scanf_float+0x192>
 8006a2e:	2d03      	cmp	r5, #3
 8006a30:	d0e2      	beq.n	80069f8 <_scanf_float+0x1dc>
 8006a32:	2d05      	cmp	r5, #5
 8006a34:	e7de      	b.n	80069f4 <_scanf_float+0x1d8>
 8006a36:	2d02      	cmp	r5, #2
 8006a38:	f47f af22 	bne.w	8006880 <_scanf_float+0x64>
 8006a3c:	2503      	movs	r5, #3
 8006a3e:	e7b6      	b.n	80069ae <_scanf_float+0x192>
 8006a40:	2d06      	cmp	r5, #6
 8006a42:	f47f af1d 	bne.w	8006880 <_scanf_float+0x64>
 8006a46:	2507      	movs	r5, #7
 8006a48:	e7b1      	b.n	80069ae <_scanf_float+0x192>
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	0591      	lsls	r1, r2, #22
 8006a4e:	f57f af17 	bpl.w	8006880 <_scanf_float+0x64>
 8006a52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006a56:	6022      	str	r2, [r4, #0]
 8006a58:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a5c:	e7a7      	b.n	80069ae <_scanf_float+0x192>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006a64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006a68:	d006      	beq.n	8006a78 <_scanf_float+0x25c>
 8006a6a:	0550      	lsls	r0, r2, #21
 8006a6c:	f57f af08 	bpl.w	8006880 <_scanf_float+0x64>
 8006a70:	f1b9 0f00 	cmp.w	r9, #0
 8006a74:	f000 80de 	beq.w	8006c34 <_scanf_float+0x418>
 8006a78:	0591      	lsls	r1, r2, #22
 8006a7a:	bf58      	it	pl
 8006a7c:	9902      	ldrpl	r1, [sp, #8]
 8006a7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a82:	bf58      	it	pl
 8006a84:	eba9 0101 	subpl.w	r1, r9, r1
 8006a88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006a8c:	bf58      	it	pl
 8006a8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a92:	6022      	str	r2, [r4, #0]
 8006a94:	f04f 0900 	mov.w	r9, #0
 8006a98:	e789      	b.n	80069ae <_scanf_float+0x192>
 8006a9a:	f04f 0a03 	mov.w	sl, #3
 8006a9e:	e786      	b.n	80069ae <_scanf_float+0x192>
 8006aa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	4798      	blx	r3
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	f43f aedb 	beq.w	8006866 <_scanf_float+0x4a>
 8006ab0:	e6e6      	b.n	8006880 <_scanf_float+0x64>
 8006ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006aba:	463a      	mov	r2, r7
 8006abc:	4640      	mov	r0, r8
 8006abe:	4798      	blx	r3
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	e6e8      	b.n	800689a <_scanf_float+0x7e>
 8006ac8:	1e6b      	subs	r3, r5, #1
 8006aca:	2b06      	cmp	r3, #6
 8006acc:	d824      	bhi.n	8006b18 <_scanf_float+0x2fc>
 8006ace:	2d02      	cmp	r5, #2
 8006ad0:	d836      	bhi.n	8006b40 <_scanf_float+0x324>
 8006ad2:	9b01      	ldr	r3, [sp, #4]
 8006ad4:	429e      	cmp	r6, r3
 8006ad6:	f67f aee4 	bls.w	80068a2 <_scanf_float+0x86>
 8006ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ae2:	463a      	mov	r2, r7
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	4798      	blx	r3
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	e7f0      	b.n	8006ad2 <_scanf_float+0x2b6>
 8006af0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006af4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006af8:	463a      	mov	r2, r7
 8006afa:	4640      	mov	r0, r8
 8006afc:	4798      	blx	r3
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	6123      	str	r3, [r4, #16]
 8006b04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b08:	fa5f fa8a 	uxtb.w	sl, sl
 8006b0c:	f1ba 0f02 	cmp.w	sl, #2
 8006b10:	d1ee      	bne.n	8006af0 <_scanf_float+0x2d4>
 8006b12:	3d03      	subs	r5, #3
 8006b14:	b2ed      	uxtb	r5, r5
 8006b16:	1b76      	subs	r6, r6, r5
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	05da      	lsls	r2, r3, #23
 8006b1c:	d530      	bpl.n	8006b80 <_scanf_float+0x364>
 8006b1e:	055b      	lsls	r3, r3, #21
 8006b20:	d511      	bpl.n	8006b46 <_scanf_float+0x32a>
 8006b22:	9b01      	ldr	r3, [sp, #4]
 8006b24:	429e      	cmp	r6, r3
 8006b26:	f67f aebc 	bls.w	80068a2 <_scanf_float+0x86>
 8006b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b32:	463a      	mov	r2, r7
 8006b34:	4640      	mov	r0, r8
 8006b36:	4798      	blx	r3
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	6123      	str	r3, [r4, #16]
 8006b3e:	e7f0      	b.n	8006b22 <_scanf_float+0x306>
 8006b40:	46aa      	mov	sl, r5
 8006b42:	46b3      	mov	fp, r6
 8006b44:	e7de      	b.n	8006b04 <_scanf_float+0x2e8>
 8006b46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	2965      	cmp	r1, #101	@ 0x65
 8006b4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b52:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	d00c      	beq.n	8006b74 <_scanf_float+0x358>
 8006b5a:	2945      	cmp	r1, #69	@ 0x45
 8006b5c:	d00a      	beq.n	8006b74 <_scanf_float+0x358>
 8006b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b62:	463a      	mov	r2, r7
 8006b64:	4640      	mov	r0, r8
 8006b66:	4798      	blx	r3
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	1eb5      	subs	r5, r6, #2
 8006b72:	6123      	str	r3, [r4, #16]
 8006b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b78:	463a      	mov	r2, r7
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	4798      	blx	r3
 8006b7e:	462e      	mov	r6, r5
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	f012 0210 	ands.w	r2, r2, #16
 8006b86:	d001      	beq.n	8006b8c <_scanf_float+0x370>
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e68b      	b.n	80068a4 <_scanf_float+0x88>
 8006b8c:	7032      	strb	r2, [r6, #0]
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b98:	d11c      	bne.n	8006bd4 <_scanf_float+0x3b8>
 8006b9a:	9b02      	ldr	r3, [sp, #8]
 8006b9c:	454b      	cmp	r3, r9
 8006b9e:	eba3 0209 	sub.w	r2, r3, r9
 8006ba2:	d123      	bne.n	8006bec <_scanf_float+0x3d0>
 8006ba4:	9901      	ldr	r1, [sp, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	4640      	mov	r0, r8
 8006baa:	f002 fca5 	bl	80094f8 <_strtod_r>
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	6821      	ldr	r1, [r4, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f011 0f02 	tst.w	r1, #2
 8006bb8:	ec57 6b10 	vmov	r6, r7, d0
 8006bbc:	f103 0204 	add.w	r2, r3, #4
 8006bc0:	d01f      	beq.n	8006c02 <_scanf_float+0x3e6>
 8006bc2:	9903      	ldr	r1, [sp, #12]
 8006bc4:	600a      	str	r2, [r1, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	e9c3 6700 	strd	r6, r7, [r3]
 8006bcc:	68e3      	ldr	r3, [r4, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60e3      	str	r3, [r4, #12]
 8006bd2:	e7d9      	b.n	8006b88 <_scanf_float+0x36c>
 8006bd4:	9b04      	ldr	r3, [sp, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0e4      	beq.n	8006ba4 <_scanf_float+0x388>
 8006bda:	9905      	ldr	r1, [sp, #20]
 8006bdc:	230a      	movs	r3, #10
 8006bde:	3101      	adds	r1, #1
 8006be0:	4640      	mov	r0, r8
 8006be2:	f002 fd09 	bl	80095f8 <_strtol_r>
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	9e05      	ldr	r6, [sp, #20]
 8006bea:	1ac2      	subs	r2, r0, r3
 8006bec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006bf0:	429e      	cmp	r6, r3
 8006bf2:	bf28      	it	cs
 8006bf4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006bf8:	4910      	ldr	r1, [pc, #64]	@ (8006c3c <_scanf_float+0x420>)
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f000 f918 	bl	8006e30 <siprintf>
 8006c00:	e7d0      	b.n	8006ba4 <_scanf_float+0x388>
 8006c02:	f011 0f04 	tst.w	r1, #4
 8006c06:	9903      	ldr	r1, [sp, #12]
 8006c08:	600a      	str	r2, [r1, #0]
 8006c0a:	d1dc      	bne.n	8006bc6 <_scanf_float+0x3aa>
 8006c0c:	681d      	ldr	r5, [r3, #0]
 8006c0e:	4632      	mov	r2, r6
 8006c10:	463b      	mov	r3, r7
 8006c12:	4630      	mov	r0, r6
 8006c14:	4639      	mov	r1, r7
 8006c16:	f7f9 ff89 	bl	8000b2c <__aeabi_dcmpun>
 8006c1a:	b128      	cbz	r0, 8006c28 <_scanf_float+0x40c>
 8006c1c:	4808      	ldr	r0, [pc, #32]	@ (8006c40 <_scanf_float+0x424>)
 8006c1e:	f000 fa47 	bl	80070b0 <nanf>
 8006c22:	ed85 0a00 	vstr	s0, [r5]
 8006c26:	e7d1      	b.n	8006bcc <_scanf_float+0x3b0>
 8006c28:	4630      	mov	r0, r6
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	f7f9 ffdc 	bl	8000be8 <__aeabi_d2f>
 8006c30:	6028      	str	r0, [r5, #0]
 8006c32:	e7cb      	b.n	8006bcc <_scanf_float+0x3b0>
 8006c34:	f04f 0900 	mov.w	r9, #0
 8006c38:	e629      	b.n	800688e <_scanf_float+0x72>
 8006c3a:	bf00      	nop
 8006c3c:	0800b644 	.word	0x0800b644
 8006c40:	0800b6f5 	.word	0x0800b6f5

08006c44 <std>:
 8006c44:	2300      	movs	r3, #0
 8006c46:	b510      	push	{r4, lr}
 8006c48:	4604      	mov	r4, r0
 8006c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c52:	6083      	str	r3, [r0, #8]
 8006c54:	8181      	strh	r1, [r0, #12]
 8006c56:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c58:	81c2      	strh	r2, [r0, #14]
 8006c5a:	6183      	str	r3, [r0, #24]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	2208      	movs	r2, #8
 8006c60:	305c      	adds	r0, #92	@ 0x5c
 8006c62:	f000 f948 	bl	8006ef6 <memset>
 8006c66:	4b0d      	ldr	r3, [pc, #52]	@ (8006c9c <std+0x58>)
 8006c68:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <std+0x5c>)
 8006c6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca4 <std+0x60>)
 8006c70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca8 <std+0x64>)
 8006c74:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c76:	4b0d      	ldr	r3, [pc, #52]	@ (8006cac <std+0x68>)
 8006c78:	6224      	str	r4, [r4, #32]
 8006c7a:	429c      	cmp	r4, r3
 8006c7c:	d006      	beq.n	8006c8c <std+0x48>
 8006c7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c82:	4294      	cmp	r4, r2
 8006c84:	d002      	beq.n	8006c8c <std+0x48>
 8006c86:	33d0      	adds	r3, #208	@ 0xd0
 8006c88:	429c      	cmp	r4, r3
 8006c8a:	d105      	bne.n	8006c98 <std+0x54>
 8006c8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c94:	f000 ba08 	b.w	80070a8 <__retarget_lock_init_recursive>
 8006c98:	bd10      	pop	{r4, pc}
 8006c9a:	bf00      	nop
 8006c9c:	08006e71 	.word	0x08006e71
 8006ca0:	08006e93 	.word	0x08006e93
 8006ca4:	08006ecb 	.word	0x08006ecb
 8006ca8:	08006eef 	.word	0x08006eef
 8006cac:	20000598 	.word	0x20000598

08006cb0 <stdio_exit_handler>:
 8006cb0:	4a02      	ldr	r2, [pc, #8]	@ (8006cbc <stdio_exit_handler+0xc>)
 8006cb2:	4903      	ldr	r1, [pc, #12]	@ (8006cc0 <stdio_exit_handler+0x10>)
 8006cb4:	4803      	ldr	r0, [pc, #12]	@ (8006cc4 <stdio_exit_handler+0x14>)
 8006cb6:	f000 b869 	b.w	8006d8c <_fwalk_sglue>
 8006cba:	bf00      	nop
 8006cbc:	20000014 	.word	0x20000014
 8006cc0:	080099b5 	.word	0x080099b5
 8006cc4:	20000024 	.word	0x20000024

08006cc8 <cleanup_stdio>:
 8006cc8:	6841      	ldr	r1, [r0, #4]
 8006cca:	4b0c      	ldr	r3, [pc, #48]	@ (8006cfc <cleanup_stdio+0x34>)
 8006ccc:	4299      	cmp	r1, r3
 8006cce:	b510      	push	{r4, lr}
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	d001      	beq.n	8006cd8 <cleanup_stdio+0x10>
 8006cd4:	f002 fe6e 	bl	80099b4 <_fflush_r>
 8006cd8:	68a1      	ldr	r1, [r4, #8]
 8006cda:	4b09      	ldr	r3, [pc, #36]	@ (8006d00 <cleanup_stdio+0x38>)
 8006cdc:	4299      	cmp	r1, r3
 8006cde:	d002      	beq.n	8006ce6 <cleanup_stdio+0x1e>
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f002 fe67 	bl	80099b4 <_fflush_r>
 8006ce6:	68e1      	ldr	r1, [r4, #12]
 8006ce8:	4b06      	ldr	r3, [pc, #24]	@ (8006d04 <cleanup_stdio+0x3c>)
 8006cea:	4299      	cmp	r1, r3
 8006cec:	d004      	beq.n	8006cf8 <cleanup_stdio+0x30>
 8006cee:	4620      	mov	r0, r4
 8006cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf4:	f002 be5e 	b.w	80099b4 <_fflush_r>
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000598 	.word	0x20000598
 8006d00:	20000600 	.word	0x20000600
 8006d04:	20000668 	.word	0x20000668

08006d08 <global_stdio_init.part.0>:
 8006d08:	b510      	push	{r4, lr}
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d38 <global_stdio_init.part.0+0x30>)
 8006d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8006d3c <global_stdio_init.part.0+0x34>)
 8006d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d40 <global_stdio_init.part.0+0x38>)
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	4620      	mov	r0, r4
 8006d14:	2200      	movs	r2, #0
 8006d16:	2104      	movs	r1, #4
 8006d18:	f7ff ff94 	bl	8006c44 <std>
 8006d1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d20:	2201      	movs	r2, #1
 8006d22:	2109      	movs	r1, #9
 8006d24:	f7ff ff8e 	bl	8006c44 <std>
 8006d28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d32:	2112      	movs	r1, #18
 8006d34:	f7ff bf86 	b.w	8006c44 <std>
 8006d38:	200006d0 	.word	0x200006d0
 8006d3c:	20000598 	.word	0x20000598
 8006d40:	08006cb1 	.word	0x08006cb1

08006d44 <__sfp_lock_acquire>:
 8006d44:	4801      	ldr	r0, [pc, #4]	@ (8006d4c <__sfp_lock_acquire+0x8>)
 8006d46:	f000 b9b0 	b.w	80070aa <__retarget_lock_acquire_recursive>
 8006d4a:	bf00      	nop
 8006d4c:	200006d9 	.word	0x200006d9

08006d50 <__sfp_lock_release>:
 8006d50:	4801      	ldr	r0, [pc, #4]	@ (8006d58 <__sfp_lock_release+0x8>)
 8006d52:	f000 b9ab 	b.w	80070ac <__retarget_lock_release_recursive>
 8006d56:	bf00      	nop
 8006d58:	200006d9 	.word	0x200006d9

08006d5c <__sinit>:
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	4604      	mov	r4, r0
 8006d60:	f7ff fff0 	bl	8006d44 <__sfp_lock_acquire>
 8006d64:	6a23      	ldr	r3, [r4, #32]
 8006d66:	b11b      	cbz	r3, 8006d70 <__sinit+0x14>
 8006d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d6c:	f7ff bff0 	b.w	8006d50 <__sfp_lock_release>
 8006d70:	4b04      	ldr	r3, [pc, #16]	@ (8006d84 <__sinit+0x28>)
 8006d72:	6223      	str	r3, [r4, #32]
 8006d74:	4b04      	ldr	r3, [pc, #16]	@ (8006d88 <__sinit+0x2c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1f5      	bne.n	8006d68 <__sinit+0xc>
 8006d7c:	f7ff ffc4 	bl	8006d08 <global_stdio_init.part.0>
 8006d80:	e7f2      	b.n	8006d68 <__sinit+0xc>
 8006d82:	bf00      	nop
 8006d84:	08006cc9 	.word	0x08006cc9
 8006d88:	200006d0 	.word	0x200006d0

08006d8c <_fwalk_sglue>:
 8006d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d90:	4607      	mov	r7, r0
 8006d92:	4688      	mov	r8, r1
 8006d94:	4614      	mov	r4, r2
 8006d96:	2600      	movs	r6, #0
 8006d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8006da0:	d505      	bpl.n	8006dae <_fwalk_sglue+0x22>
 8006da2:	6824      	ldr	r4, [r4, #0]
 8006da4:	2c00      	cmp	r4, #0
 8006da6:	d1f7      	bne.n	8006d98 <_fwalk_sglue+0xc>
 8006da8:	4630      	mov	r0, r6
 8006daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dae:	89ab      	ldrh	r3, [r5, #12]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d907      	bls.n	8006dc4 <_fwalk_sglue+0x38>
 8006db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006db8:	3301      	adds	r3, #1
 8006dba:	d003      	beq.n	8006dc4 <_fwalk_sglue+0x38>
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	47c0      	blx	r8
 8006dc2:	4306      	orrs	r6, r0
 8006dc4:	3568      	adds	r5, #104	@ 0x68
 8006dc6:	e7e9      	b.n	8006d9c <_fwalk_sglue+0x10>

08006dc8 <sniprintf>:
 8006dc8:	b40c      	push	{r2, r3}
 8006dca:	b530      	push	{r4, r5, lr}
 8006dcc:	4b17      	ldr	r3, [pc, #92]	@ (8006e2c <sniprintf+0x64>)
 8006dce:	1e0c      	subs	r4, r1, #0
 8006dd0:	681d      	ldr	r5, [r3, #0]
 8006dd2:	b09d      	sub	sp, #116	@ 0x74
 8006dd4:	da08      	bge.n	8006de8 <sniprintf+0x20>
 8006dd6:	238b      	movs	r3, #139	@ 0x8b
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	f04f 30ff 	mov.w	r0, #4294967295
 8006dde:	b01d      	add	sp, #116	@ 0x74
 8006de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006de4:	b002      	add	sp, #8
 8006de6:	4770      	bx	lr
 8006de8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006dec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006df0:	bf14      	ite	ne
 8006df2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006df6:	4623      	moveq	r3, r4
 8006df8:	9304      	str	r3, [sp, #16]
 8006dfa:	9307      	str	r3, [sp, #28]
 8006dfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e00:	9002      	str	r0, [sp, #8]
 8006e02:	9006      	str	r0, [sp, #24]
 8006e04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e0a:	ab21      	add	r3, sp, #132	@ 0x84
 8006e0c:	a902      	add	r1, sp, #8
 8006e0e:	4628      	mov	r0, r5
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	f002 fc4f 	bl	80096b4 <_svfiprintf_r>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	bfbc      	itt	lt
 8006e1a:	238b      	movlt	r3, #139	@ 0x8b
 8006e1c:	602b      	strlt	r3, [r5, #0]
 8006e1e:	2c00      	cmp	r4, #0
 8006e20:	d0dd      	beq.n	8006dde <sniprintf+0x16>
 8006e22:	9b02      	ldr	r3, [sp, #8]
 8006e24:	2200      	movs	r2, #0
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	e7d9      	b.n	8006dde <sniprintf+0x16>
 8006e2a:	bf00      	nop
 8006e2c:	20000020 	.word	0x20000020

08006e30 <siprintf>:
 8006e30:	b40e      	push	{r1, r2, r3}
 8006e32:	b500      	push	{lr}
 8006e34:	b09c      	sub	sp, #112	@ 0x70
 8006e36:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e38:	9002      	str	r0, [sp, #8]
 8006e3a:	9006      	str	r0, [sp, #24]
 8006e3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e40:	4809      	ldr	r0, [pc, #36]	@ (8006e68 <siprintf+0x38>)
 8006e42:	9107      	str	r1, [sp, #28]
 8006e44:	9104      	str	r1, [sp, #16]
 8006e46:	4909      	ldr	r1, [pc, #36]	@ (8006e6c <siprintf+0x3c>)
 8006e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4c:	9105      	str	r1, [sp, #20]
 8006e4e:	6800      	ldr	r0, [r0, #0]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	a902      	add	r1, sp, #8
 8006e54:	f002 fc2e 	bl	80096b4 <_svfiprintf_r>
 8006e58:	9b02      	ldr	r3, [sp, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	b01c      	add	sp, #112	@ 0x70
 8006e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e64:	b003      	add	sp, #12
 8006e66:	4770      	bx	lr
 8006e68:	20000020 	.word	0x20000020
 8006e6c:	ffff0208 	.word	0xffff0208

08006e70 <__sread>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	460c      	mov	r4, r1
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	f000 f8c8 	bl	800700c <_read_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	bfab      	itete	ge
 8006e80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e82:	89a3      	ldrhlt	r3, [r4, #12]
 8006e84:	181b      	addge	r3, r3, r0
 8006e86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e8a:	bfac      	ite	ge
 8006e8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e8e:	81a3      	strhlt	r3, [r4, #12]
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <__swrite>:
 8006e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e96:	461f      	mov	r7, r3
 8006e98:	898b      	ldrh	r3, [r1, #12]
 8006e9a:	05db      	lsls	r3, r3, #23
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	d505      	bpl.n	8006eb0 <__swrite+0x1e>
 8006ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f000 f89c 	bl	8006fe8 <_lseek_r>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec6:	f000 b8b3 	b.w	8007030 <_write_r>

08006eca <__sseek>:
 8006eca:	b510      	push	{r4, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed2:	f000 f889 	bl	8006fe8 <_lseek_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	bf15      	itete	ne
 8006edc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ede:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ee2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ee6:	81a3      	strheq	r3, [r4, #12]
 8006ee8:	bf18      	it	ne
 8006eea:	81a3      	strhne	r3, [r4, #12]
 8006eec:	bd10      	pop	{r4, pc}

08006eee <__sclose>:
 8006eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef2:	f000 b869 	b.w	8006fc8 <_close_r>

08006ef6 <memset>:
 8006ef6:	4402      	add	r2, r0
 8006ef8:	4603      	mov	r3, r0
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d100      	bne.n	8006f00 <memset+0xa>
 8006efe:	4770      	bx	lr
 8006f00:	f803 1b01 	strb.w	r1, [r3], #1
 8006f04:	e7f9      	b.n	8006efa <memset+0x4>
	...

08006f08 <strtok>:
 8006f08:	4b16      	ldr	r3, [pc, #88]	@ (8006f64 <strtok+0x5c>)
 8006f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0e:	681f      	ldr	r7, [r3, #0]
 8006f10:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006f12:	4605      	mov	r5, r0
 8006f14:	460e      	mov	r6, r1
 8006f16:	b9ec      	cbnz	r4, 8006f54 <strtok+0x4c>
 8006f18:	2050      	movs	r0, #80	@ 0x50
 8006f1a:	f000 ff83 	bl	8007e24 <malloc>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	6478      	str	r0, [r7, #68]	@ 0x44
 8006f22:	b920      	cbnz	r0, 8006f2e <strtok+0x26>
 8006f24:	4b10      	ldr	r3, [pc, #64]	@ (8006f68 <strtok+0x60>)
 8006f26:	4811      	ldr	r0, [pc, #68]	@ (8006f6c <strtok+0x64>)
 8006f28:	215b      	movs	r1, #91	@ 0x5b
 8006f2a:	f000 f8c7 	bl	80070bc <__assert_func>
 8006f2e:	e9c0 4400 	strd	r4, r4, [r0]
 8006f32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006f36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006f3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006f3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006f42:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006f46:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006f4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006f4e:	6184      	str	r4, [r0, #24]
 8006f50:	7704      	strb	r4, [r0, #28]
 8006f52:	6244      	str	r4, [r0, #36]	@ 0x24
 8006f54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f60:	f000 b806 	b.w	8006f70 <__strtok_r>
 8006f64:	20000020 	.word	0x20000020
 8006f68:	0800b649 	.word	0x0800b649
 8006f6c:	0800b660 	.word	0x0800b660

08006f70 <__strtok_r>:
 8006f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f72:	4604      	mov	r4, r0
 8006f74:	b908      	cbnz	r0, 8006f7a <__strtok_r+0xa>
 8006f76:	6814      	ldr	r4, [r2, #0]
 8006f78:	b144      	cbz	r4, 8006f8c <__strtok_r+0x1c>
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006f80:	460f      	mov	r7, r1
 8006f82:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006f86:	b91e      	cbnz	r6, 8006f90 <__strtok_r+0x20>
 8006f88:	b965      	cbnz	r5, 8006fa4 <__strtok_r+0x34>
 8006f8a:	6015      	str	r5, [r2, #0]
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e005      	b.n	8006f9c <__strtok_r+0x2c>
 8006f90:	42b5      	cmp	r5, r6
 8006f92:	d1f6      	bne.n	8006f82 <__strtok_r+0x12>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f0      	bne.n	8006f7a <__strtok_r+0xa>
 8006f98:	6014      	str	r4, [r2, #0]
 8006f9a:	7003      	strb	r3, [r0, #0]
 8006f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f9e:	461c      	mov	r4, r3
 8006fa0:	e00c      	b.n	8006fbc <__strtok_r+0x4c>
 8006fa2:	b915      	cbnz	r5, 8006faa <__strtok_r+0x3a>
 8006fa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006fa8:	460e      	mov	r6, r1
 8006faa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006fae:	42ab      	cmp	r3, r5
 8006fb0:	d1f7      	bne.n	8006fa2 <__strtok_r+0x32>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0f3      	beq.n	8006f9e <__strtok_r+0x2e>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006fbc:	6014      	str	r4, [r2, #0]
 8006fbe:	e7ed      	b.n	8006f9c <__strtok_r+0x2c>

08006fc0 <_localeconv_r>:
 8006fc0:	4800      	ldr	r0, [pc, #0]	@ (8006fc4 <_localeconv_r+0x4>)
 8006fc2:	4770      	bx	lr
 8006fc4:	20000160 	.word	0x20000160

08006fc8 <_close_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d06      	ldr	r5, [pc, #24]	@ (8006fe4 <_close_r+0x1c>)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	f7fb fac2 	bl	800255c <_close>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_close_r+0x1a>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_close_r+0x1a>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	200006d4 	.word	0x200006d4

08006fe8 <_lseek_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d07      	ldr	r5, [pc, #28]	@ (8007008 <_lseek_r+0x20>)
 8006fec:	4604      	mov	r4, r0
 8006fee:	4608      	mov	r0, r1
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	602a      	str	r2, [r5, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f7fb fad7 	bl	80025aa <_lseek>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_lseek_r+0x1e>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_lseek_r+0x1e>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	200006d4 	.word	0x200006d4

0800700c <_read_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4d07      	ldr	r5, [pc, #28]	@ (800702c <_read_r+0x20>)
 8007010:	4604      	mov	r4, r0
 8007012:	4608      	mov	r0, r1
 8007014:	4611      	mov	r1, r2
 8007016:	2200      	movs	r2, #0
 8007018:	602a      	str	r2, [r5, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	f7fb fa65 	bl	80024ea <_read>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_read_r+0x1e>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_read_r+0x1e>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	200006d4 	.word	0x200006d4

08007030 <_write_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d07      	ldr	r5, [pc, #28]	@ (8007050 <_write_r+0x20>)
 8007034:	4604      	mov	r4, r0
 8007036:	4608      	mov	r0, r1
 8007038:	4611      	mov	r1, r2
 800703a:	2200      	movs	r2, #0
 800703c:	602a      	str	r2, [r5, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	f7fb fa70 	bl	8002524 <_write>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_write_r+0x1e>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_write_r+0x1e>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	200006d4 	.word	0x200006d4

08007054 <__errno>:
 8007054:	4b01      	ldr	r3, [pc, #4]	@ (800705c <__errno+0x8>)
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20000020 	.word	0x20000020

08007060 <__libc_init_array>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	4d0d      	ldr	r5, [pc, #52]	@ (8007098 <__libc_init_array+0x38>)
 8007064:	4c0d      	ldr	r4, [pc, #52]	@ (800709c <__libc_init_array+0x3c>)
 8007066:	1b64      	subs	r4, r4, r5
 8007068:	10a4      	asrs	r4, r4, #2
 800706a:	2600      	movs	r6, #0
 800706c:	42a6      	cmp	r6, r4
 800706e:	d109      	bne.n	8007084 <__libc_init_array+0x24>
 8007070:	4d0b      	ldr	r5, [pc, #44]	@ (80070a0 <__libc_init_array+0x40>)
 8007072:	4c0c      	ldr	r4, [pc, #48]	@ (80070a4 <__libc_init_array+0x44>)
 8007074:	f003 fb72 	bl	800a75c <_init>
 8007078:	1b64      	subs	r4, r4, r5
 800707a:	10a4      	asrs	r4, r4, #2
 800707c:	2600      	movs	r6, #0
 800707e:	42a6      	cmp	r6, r4
 8007080:	d105      	bne.n	800708e <__libc_init_array+0x2e>
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	f855 3b04 	ldr.w	r3, [r5], #4
 8007088:	4798      	blx	r3
 800708a:	3601      	adds	r6, #1
 800708c:	e7ee      	b.n	800706c <__libc_init_array+0xc>
 800708e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007092:	4798      	blx	r3
 8007094:	3601      	adds	r6, #1
 8007096:	e7f2      	b.n	800707e <__libc_init_array+0x1e>
 8007098:	0800baa4 	.word	0x0800baa4
 800709c:	0800baa4 	.word	0x0800baa4
 80070a0:	0800baa4 	.word	0x0800baa4
 80070a4:	0800baa8 	.word	0x0800baa8

080070a8 <__retarget_lock_init_recursive>:
 80070a8:	4770      	bx	lr

080070aa <__retarget_lock_acquire_recursive>:
 80070aa:	4770      	bx	lr

080070ac <__retarget_lock_release_recursive>:
 80070ac:	4770      	bx	lr
	...

080070b0 <nanf>:
 80070b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80070b8 <nanf+0x8>
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	7fc00000 	.word	0x7fc00000

080070bc <__assert_func>:
 80070bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070be:	4614      	mov	r4, r2
 80070c0:	461a      	mov	r2, r3
 80070c2:	4b09      	ldr	r3, [pc, #36]	@ (80070e8 <__assert_func+0x2c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4605      	mov	r5, r0
 80070c8:	68d8      	ldr	r0, [r3, #12]
 80070ca:	b954      	cbnz	r4, 80070e2 <__assert_func+0x26>
 80070cc:	4b07      	ldr	r3, [pc, #28]	@ (80070ec <__assert_func+0x30>)
 80070ce:	461c      	mov	r4, r3
 80070d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070d4:	9100      	str	r1, [sp, #0]
 80070d6:	462b      	mov	r3, r5
 80070d8:	4905      	ldr	r1, [pc, #20]	@ (80070f0 <__assert_func+0x34>)
 80070da:	f002 fc93 	bl	8009a04 <fiprintf>
 80070de:	f002 fcf7 	bl	8009ad0 <abort>
 80070e2:	4b04      	ldr	r3, [pc, #16]	@ (80070f4 <__assert_func+0x38>)
 80070e4:	e7f4      	b.n	80070d0 <__assert_func+0x14>
 80070e6:	bf00      	nop
 80070e8:	20000020 	.word	0x20000020
 80070ec:	0800b6f5 	.word	0x0800b6f5
 80070f0:	0800b6c7 	.word	0x0800b6c7
 80070f4:	0800b6ba 	.word	0x0800b6ba

080070f8 <quorem>:
 80070f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	6903      	ldr	r3, [r0, #16]
 80070fe:	690c      	ldr	r4, [r1, #16]
 8007100:	42a3      	cmp	r3, r4
 8007102:	4607      	mov	r7, r0
 8007104:	db7e      	blt.n	8007204 <quorem+0x10c>
 8007106:	3c01      	subs	r4, #1
 8007108:	f101 0814 	add.w	r8, r1, #20
 800710c:	00a3      	lsls	r3, r4, #2
 800710e:	f100 0514 	add.w	r5, r0, #20
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800711e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007122:	3301      	adds	r3, #1
 8007124:	429a      	cmp	r2, r3
 8007126:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800712a:	fbb2 f6f3 	udiv	r6, r2, r3
 800712e:	d32e      	bcc.n	800718e <quorem+0x96>
 8007130:	f04f 0a00 	mov.w	sl, #0
 8007134:	46c4      	mov	ip, r8
 8007136:	46ae      	mov	lr, r5
 8007138:	46d3      	mov	fp, sl
 800713a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800713e:	b298      	uxth	r0, r3
 8007140:	fb06 a000 	mla	r0, r6, r0, sl
 8007144:	0c02      	lsrs	r2, r0, #16
 8007146:	0c1b      	lsrs	r3, r3, #16
 8007148:	fb06 2303 	mla	r3, r6, r3, r2
 800714c:	f8de 2000 	ldr.w	r2, [lr]
 8007150:	b280      	uxth	r0, r0
 8007152:	b292      	uxth	r2, r2
 8007154:	1a12      	subs	r2, r2, r0
 8007156:	445a      	add	r2, fp
 8007158:	f8de 0000 	ldr.w	r0, [lr]
 800715c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007160:	b29b      	uxth	r3, r3
 8007162:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007166:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800716a:	b292      	uxth	r2, r2
 800716c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007170:	45e1      	cmp	r9, ip
 8007172:	f84e 2b04 	str.w	r2, [lr], #4
 8007176:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800717a:	d2de      	bcs.n	800713a <quorem+0x42>
 800717c:	9b00      	ldr	r3, [sp, #0]
 800717e:	58eb      	ldr	r3, [r5, r3]
 8007180:	b92b      	cbnz	r3, 800718e <quorem+0x96>
 8007182:	9b01      	ldr	r3, [sp, #4]
 8007184:	3b04      	subs	r3, #4
 8007186:	429d      	cmp	r5, r3
 8007188:	461a      	mov	r2, r3
 800718a:	d32f      	bcc.n	80071ec <quorem+0xf4>
 800718c:	613c      	str	r4, [r7, #16]
 800718e:	4638      	mov	r0, r7
 8007190:	f001 f9c2 	bl	8008518 <__mcmp>
 8007194:	2800      	cmp	r0, #0
 8007196:	db25      	blt.n	80071e4 <quorem+0xec>
 8007198:	4629      	mov	r1, r5
 800719a:	2000      	movs	r0, #0
 800719c:	f858 2b04 	ldr.w	r2, [r8], #4
 80071a0:	f8d1 c000 	ldr.w	ip, [r1]
 80071a4:	fa1f fe82 	uxth.w	lr, r2
 80071a8:	fa1f f38c 	uxth.w	r3, ip
 80071ac:	eba3 030e 	sub.w	r3, r3, lr
 80071b0:	4403      	add	r3, r0
 80071b2:	0c12      	lsrs	r2, r2, #16
 80071b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071bc:	b29b      	uxth	r3, r3
 80071be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071c2:	45c1      	cmp	r9, r8
 80071c4:	f841 3b04 	str.w	r3, [r1], #4
 80071c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071cc:	d2e6      	bcs.n	800719c <quorem+0xa4>
 80071ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071d6:	b922      	cbnz	r2, 80071e2 <quorem+0xea>
 80071d8:	3b04      	subs	r3, #4
 80071da:	429d      	cmp	r5, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	d30b      	bcc.n	80071f8 <quorem+0x100>
 80071e0:	613c      	str	r4, [r7, #16]
 80071e2:	3601      	adds	r6, #1
 80071e4:	4630      	mov	r0, r6
 80071e6:	b003      	add	sp, #12
 80071e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ec:	6812      	ldr	r2, [r2, #0]
 80071ee:	3b04      	subs	r3, #4
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	d1cb      	bne.n	800718c <quorem+0x94>
 80071f4:	3c01      	subs	r4, #1
 80071f6:	e7c6      	b.n	8007186 <quorem+0x8e>
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	3b04      	subs	r3, #4
 80071fc:	2a00      	cmp	r2, #0
 80071fe:	d1ef      	bne.n	80071e0 <quorem+0xe8>
 8007200:	3c01      	subs	r4, #1
 8007202:	e7ea      	b.n	80071da <quorem+0xe2>
 8007204:	2000      	movs	r0, #0
 8007206:	e7ee      	b.n	80071e6 <quorem+0xee>

08007208 <_dtoa_r>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	69c7      	ldr	r7, [r0, #28]
 800720e:	b099      	sub	sp, #100	@ 0x64
 8007210:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007214:	ec55 4b10 	vmov	r4, r5, d0
 8007218:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800721a:	9109      	str	r1, [sp, #36]	@ 0x24
 800721c:	4683      	mov	fp, r0
 800721e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007220:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007222:	b97f      	cbnz	r7, 8007244 <_dtoa_r+0x3c>
 8007224:	2010      	movs	r0, #16
 8007226:	f000 fdfd 	bl	8007e24 <malloc>
 800722a:	4602      	mov	r2, r0
 800722c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007230:	b920      	cbnz	r0, 800723c <_dtoa_r+0x34>
 8007232:	4ba7      	ldr	r3, [pc, #668]	@ (80074d0 <_dtoa_r+0x2c8>)
 8007234:	21ef      	movs	r1, #239	@ 0xef
 8007236:	48a7      	ldr	r0, [pc, #668]	@ (80074d4 <_dtoa_r+0x2cc>)
 8007238:	f7ff ff40 	bl	80070bc <__assert_func>
 800723c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007240:	6007      	str	r7, [r0, #0]
 8007242:	60c7      	str	r7, [r0, #12]
 8007244:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007248:	6819      	ldr	r1, [r3, #0]
 800724a:	b159      	cbz	r1, 8007264 <_dtoa_r+0x5c>
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	604a      	str	r2, [r1, #4]
 8007250:	2301      	movs	r3, #1
 8007252:	4093      	lsls	r3, r2
 8007254:	608b      	str	r3, [r1, #8]
 8007256:	4658      	mov	r0, fp
 8007258:	f000 feda 	bl	8008010 <_Bfree>
 800725c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	1e2b      	subs	r3, r5, #0
 8007266:	bfb9      	ittee	lt
 8007268:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800726c:	9303      	strlt	r3, [sp, #12]
 800726e:	2300      	movge	r3, #0
 8007270:	6033      	strge	r3, [r6, #0]
 8007272:	9f03      	ldr	r7, [sp, #12]
 8007274:	4b98      	ldr	r3, [pc, #608]	@ (80074d8 <_dtoa_r+0x2d0>)
 8007276:	bfbc      	itt	lt
 8007278:	2201      	movlt	r2, #1
 800727a:	6032      	strlt	r2, [r6, #0]
 800727c:	43bb      	bics	r3, r7
 800727e:	d112      	bne.n	80072a6 <_dtoa_r+0x9e>
 8007280:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007282:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800728c:	4323      	orrs	r3, r4
 800728e:	f000 854d 	beq.w	8007d2c <_dtoa_r+0xb24>
 8007292:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007294:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80074ec <_dtoa_r+0x2e4>
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 854f 	beq.w	8007d3c <_dtoa_r+0xb34>
 800729e:	f10a 0303 	add.w	r3, sl, #3
 80072a2:	f000 bd49 	b.w	8007d38 <_dtoa_r+0xb30>
 80072a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	ec51 0b17 	vmov	r0, r1, d7
 80072b0:	2300      	movs	r3, #0
 80072b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072b6:	f7f9 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ba:	4680      	mov	r8, r0
 80072bc:	b158      	cbz	r0, 80072d6 <_dtoa_r+0xce>
 80072be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072c0:	2301      	movs	r3, #1
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072c6:	b113      	cbz	r3, 80072ce <_dtoa_r+0xc6>
 80072c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80072ca:	4b84      	ldr	r3, [pc, #528]	@ (80074dc <_dtoa_r+0x2d4>)
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80074f0 <_dtoa_r+0x2e8>
 80072d2:	f000 bd33 	b.w	8007d3c <_dtoa_r+0xb34>
 80072d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072da:	aa16      	add	r2, sp, #88	@ 0x58
 80072dc:	a917      	add	r1, sp, #92	@ 0x5c
 80072de:	4658      	mov	r0, fp
 80072e0:	f001 fa3a 	bl	8008758 <__d2b>
 80072e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072e8:	4681      	mov	r9, r0
 80072ea:	2e00      	cmp	r6, #0
 80072ec:	d077      	beq.n	80073de <_dtoa_r+0x1d6>
 80072ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80072f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007300:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007304:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007308:	4619      	mov	r1, r3
 800730a:	2200      	movs	r2, #0
 800730c:	4b74      	ldr	r3, [pc, #464]	@ (80074e0 <_dtoa_r+0x2d8>)
 800730e:	f7f8 ffbb 	bl	8000288 <__aeabi_dsub>
 8007312:	a369      	add	r3, pc, #420	@ (adr r3, 80074b8 <_dtoa_r+0x2b0>)
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	f7f9 f96e 	bl	80005f8 <__aeabi_dmul>
 800731c:	a368      	add	r3, pc, #416	@ (adr r3, 80074c0 <_dtoa_r+0x2b8>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	f7f8 ffb3 	bl	800028c <__adddf3>
 8007326:	4604      	mov	r4, r0
 8007328:	4630      	mov	r0, r6
 800732a:	460d      	mov	r5, r1
 800732c:	f7f9 f8fa 	bl	8000524 <__aeabi_i2d>
 8007330:	a365      	add	r3, pc, #404	@ (adr r3, 80074c8 <_dtoa_r+0x2c0>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f7f9 f95f 	bl	80005f8 <__aeabi_dmul>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4620      	mov	r0, r4
 8007340:	4629      	mov	r1, r5
 8007342:	f7f8 ffa3 	bl	800028c <__adddf3>
 8007346:	4604      	mov	r4, r0
 8007348:	460d      	mov	r5, r1
 800734a:	f7f9 fc05 	bl	8000b58 <__aeabi_d2iz>
 800734e:	2200      	movs	r2, #0
 8007350:	4607      	mov	r7, r0
 8007352:	2300      	movs	r3, #0
 8007354:	4620      	mov	r0, r4
 8007356:	4629      	mov	r1, r5
 8007358:	f7f9 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800735c:	b140      	cbz	r0, 8007370 <_dtoa_r+0x168>
 800735e:	4638      	mov	r0, r7
 8007360:	f7f9 f8e0 	bl	8000524 <__aeabi_i2d>
 8007364:	4622      	mov	r2, r4
 8007366:	462b      	mov	r3, r5
 8007368:	f7f9 fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800736c:	b900      	cbnz	r0, 8007370 <_dtoa_r+0x168>
 800736e:	3f01      	subs	r7, #1
 8007370:	2f16      	cmp	r7, #22
 8007372:	d851      	bhi.n	8007418 <_dtoa_r+0x210>
 8007374:	4b5b      	ldr	r3, [pc, #364]	@ (80074e4 <_dtoa_r+0x2dc>)
 8007376:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007382:	f7f9 fbab 	bl	8000adc <__aeabi_dcmplt>
 8007386:	2800      	cmp	r0, #0
 8007388:	d048      	beq.n	800741c <_dtoa_r+0x214>
 800738a:	3f01      	subs	r7, #1
 800738c:	2300      	movs	r3, #0
 800738e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007390:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007392:	1b9b      	subs	r3, r3, r6
 8007394:	1e5a      	subs	r2, r3, #1
 8007396:	bf44      	itt	mi
 8007398:	f1c3 0801 	rsbmi	r8, r3, #1
 800739c:	2300      	movmi	r3, #0
 800739e:	9208      	str	r2, [sp, #32]
 80073a0:	bf54      	ite	pl
 80073a2:	f04f 0800 	movpl.w	r8, #0
 80073a6:	9308      	strmi	r3, [sp, #32]
 80073a8:	2f00      	cmp	r7, #0
 80073aa:	db39      	blt.n	8007420 <_dtoa_r+0x218>
 80073ac:	9b08      	ldr	r3, [sp, #32]
 80073ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073b0:	443b      	add	r3, r7
 80073b2:	9308      	str	r3, [sp, #32]
 80073b4:	2300      	movs	r3, #0
 80073b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ba:	2b09      	cmp	r3, #9
 80073bc:	d864      	bhi.n	8007488 <_dtoa_r+0x280>
 80073be:	2b05      	cmp	r3, #5
 80073c0:	bfc4      	itt	gt
 80073c2:	3b04      	subgt	r3, #4
 80073c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80073c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c8:	f1a3 0302 	sub.w	r3, r3, #2
 80073cc:	bfcc      	ite	gt
 80073ce:	2400      	movgt	r4, #0
 80073d0:	2401      	movle	r4, #1
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d863      	bhi.n	800749e <_dtoa_r+0x296>
 80073d6:	e8df f003 	tbb	[pc, r3]
 80073da:	372a      	.short	0x372a
 80073dc:	5535      	.short	0x5535
 80073de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80073e2:	441e      	add	r6, r3
 80073e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	bfc1      	itttt	gt
 80073ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073f0:	409f      	lslgt	r7, r3
 80073f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073fa:	bfd6      	itet	le
 80073fc:	f1c3 0320 	rsble	r3, r3, #32
 8007400:	ea47 0003 	orrgt.w	r0, r7, r3
 8007404:	fa04 f003 	lslle.w	r0, r4, r3
 8007408:	f7f9 f87c 	bl	8000504 <__aeabi_ui2d>
 800740c:	2201      	movs	r2, #1
 800740e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007412:	3e01      	subs	r6, #1
 8007414:	9214      	str	r2, [sp, #80]	@ 0x50
 8007416:	e777      	b.n	8007308 <_dtoa_r+0x100>
 8007418:	2301      	movs	r3, #1
 800741a:	e7b8      	b.n	800738e <_dtoa_r+0x186>
 800741c:	9012      	str	r0, [sp, #72]	@ 0x48
 800741e:	e7b7      	b.n	8007390 <_dtoa_r+0x188>
 8007420:	427b      	negs	r3, r7
 8007422:	930a      	str	r3, [sp, #40]	@ 0x28
 8007424:	2300      	movs	r3, #0
 8007426:	eba8 0807 	sub.w	r8, r8, r7
 800742a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800742c:	e7c4      	b.n	80073b8 <_dtoa_r+0x1b0>
 800742e:	2300      	movs	r3, #0
 8007430:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007434:	2b00      	cmp	r3, #0
 8007436:	dc35      	bgt.n	80074a4 <_dtoa_r+0x29c>
 8007438:	2301      	movs	r3, #1
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	9307      	str	r3, [sp, #28]
 800743e:	461a      	mov	r2, r3
 8007440:	920e      	str	r2, [sp, #56]	@ 0x38
 8007442:	e00b      	b.n	800745c <_dtoa_r+0x254>
 8007444:	2301      	movs	r3, #1
 8007446:	e7f3      	b.n	8007430 <_dtoa_r+0x228>
 8007448:	2300      	movs	r3, #0
 800744a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800744c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800744e:	18fb      	adds	r3, r7, r3
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	3301      	adds	r3, #1
 8007454:	2b01      	cmp	r3, #1
 8007456:	9307      	str	r3, [sp, #28]
 8007458:	bfb8      	it	lt
 800745a:	2301      	movlt	r3, #1
 800745c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007460:	2100      	movs	r1, #0
 8007462:	2204      	movs	r2, #4
 8007464:	f102 0514 	add.w	r5, r2, #20
 8007468:	429d      	cmp	r5, r3
 800746a:	d91f      	bls.n	80074ac <_dtoa_r+0x2a4>
 800746c:	6041      	str	r1, [r0, #4]
 800746e:	4658      	mov	r0, fp
 8007470:	f000 fd8e 	bl	8007f90 <_Balloc>
 8007474:	4682      	mov	sl, r0
 8007476:	2800      	cmp	r0, #0
 8007478:	d13c      	bne.n	80074f4 <_dtoa_r+0x2ec>
 800747a:	4b1b      	ldr	r3, [pc, #108]	@ (80074e8 <_dtoa_r+0x2e0>)
 800747c:	4602      	mov	r2, r0
 800747e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007482:	e6d8      	b.n	8007236 <_dtoa_r+0x2e>
 8007484:	2301      	movs	r3, #1
 8007486:	e7e0      	b.n	800744a <_dtoa_r+0x242>
 8007488:	2401      	movs	r4, #1
 800748a:	2300      	movs	r3, #0
 800748c:	9309      	str	r3, [sp, #36]	@ 0x24
 800748e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007490:	f04f 33ff 	mov.w	r3, #4294967295
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	9307      	str	r3, [sp, #28]
 8007498:	2200      	movs	r2, #0
 800749a:	2312      	movs	r3, #18
 800749c:	e7d0      	b.n	8007440 <_dtoa_r+0x238>
 800749e:	2301      	movs	r3, #1
 80074a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074a2:	e7f5      	b.n	8007490 <_dtoa_r+0x288>
 80074a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	9307      	str	r3, [sp, #28]
 80074aa:	e7d7      	b.n	800745c <_dtoa_r+0x254>
 80074ac:	3101      	adds	r1, #1
 80074ae:	0052      	lsls	r2, r2, #1
 80074b0:	e7d8      	b.n	8007464 <_dtoa_r+0x25c>
 80074b2:	bf00      	nop
 80074b4:	f3af 8000 	nop.w
 80074b8:	636f4361 	.word	0x636f4361
 80074bc:	3fd287a7 	.word	0x3fd287a7
 80074c0:	8b60c8b3 	.word	0x8b60c8b3
 80074c4:	3fc68a28 	.word	0x3fc68a28
 80074c8:	509f79fb 	.word	0x509f79fb
 80074cc:	3fd34413 	.word	0x3fd34413
 80074d0:	0800b649 	.word	0x0800b649
 80074d4:	0800b703 	.word	0x0800b703
 80074d8:	7ff00000 	.word	0x7ff00000
 80074dc:	0800b621 	.word	0x0800b621
 80074e0:	3ff80000 	.word	0x3ff80000
 80074e4:	0800b800 	.word	0x0800b800
 80074e8:	0800b75b 	.word	0x0800b75b
 80074ec:	0800b6ff 	.word	0x0800b6ff
 80074f0:	0800b620 	.word	0x0800b620
 80074f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074f8:	6018      	str	r0, [r3, #0]
 80074fa:	9b07      	ldr	r3, [sp, #28]
 80074fc:	2b0e      	cmp	r3, #14
 80074fe:	f200 80a4 	bhi.w	800764a <_dtoa_r+0x442>
 8007502:	2c00      	cmp	r4, #0
 8007504:	f000 80a1 	beq.w	800764a <_dtoa_r+0x442>
 8007508:	2f00      	cmp	r7, #0
 800750a:	dd33      	ble.n	8007574 <_dtoa_r+0x36c>
 800750c:	4bad      	ldr	r3, [pc, #692]	@ (80077c4 <_dtoa_r+0x5bc>)
 800750e:	f007 020f 	and.w	r2, r7, #15
 8007512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007516:	ed93 7b00 	vldr	d7, [r3]
 800751a:	05f8      	lsls	r0, r7, #23
 800751c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007520:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007524:	d516      	bpl.n	8007554 <_dtoa_r+0x34c>
 8007526:	4ba8      	ldr	r3, [pc, #672]	@ (80077c8 <_dtoa_r+0x5c0>)
 8007528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800752c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007530:	f7f9 f98c 	bl	800084c <__aeabi_ddiv>
 8007534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007538:	f004 040f 	and.w	r4, r4, #15
 800753c:	2603      	movs	r6, #3
 800753e:	4da2      	ldr	r5, [pc, #648]	@ (80077c8 <_dtoa_r+0x5c0>)
 8007540:	b954      	cbnz	r4, 8007558 <_dtoa_r+0x350>
 8007542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800754a:	f7f9 f97f 	bl	800084c <__aeabi_ddiv>
 800754e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007552:	e028      	b.n	80075a6 <_dtoa_r+0x39e>
 8007554:	2602      	movs	r6, #2
 8007556:	e7f2      	b.n	800753e <_dtoa_r+0x336>
 8007558:	07e1      	lsls	r1, r4, #31
 800755a:	d508      	bpl.n	800756e <_dtoa_r+0x366>
 800755c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007560:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007564:	f7f9 f848 	bl	80005f8 <__aeabi_dmul>
 8007568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800756c:	3601      	adds	r6, #1
 800756e:	1064      	asrs	r4, r4, #1
 8007570:	3508      	adds	r5, #8
 8007572:	e7e5      	b.n	8007540 <_dtoa_r+0x338>
 8007574:	f000 80d2 	beq.w	800771c <_dtoa_r+0x514>
 8007578:	427c      	negs	r4, r7
 800757a:	4b92      	ldr	r3, [pc, #584]	@ (80077c4 <_dtoa_r+0x5bc>)
 800757c:	4d92      	ldr	r5, [pc, #584]	@ (80077c8 <_dtoa_r+0x5c0>)
 800757e:	f004 020f 	and.w	r2, r4, #15
 8007582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800758e:	f7f9 f833 	bl	80005f8 <__aeabi_dmul>
 8007592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007596:	1124      	asrs	r4, r4, #4
 8007598:	2300      	movs	r3, #0
 800759a:	2602      	movs	r6, #2
 800759c:	2c00      	cmp	r4, #0
 800759e:	f040 80b2 	bne.w	8007706 <_dtoa_r+0x4fe>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1d3      	bne.n	800754e <_dtoa_r+0x346>
 80075a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 80b7 	beq.w	8007720 <_dtoa_r+0x518>
 80075b2:	4b86      	ldr	r3, [pc, #536]	@ (80077cc <_dtoa_r+0x5c4>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	4620      	mov	r0, r4
 80075b8:	4629      	mov	r1, r5
 80075ba:	f7f9 fa8f 	bl	8000adc <__aeabi_dcmplt>
 80075be:	2800      	cmp	r0, #0
 80075c0:	f000 80ae 	beq.w	8007720 <_dtoa_r+0x518>
 80075c4:	9b07      	ldr	r3, [sp, #28]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 80aa 	beq.w	8007720 <_dtoa_r+0x518>
 80075cc:	9b00      	ldr	r3, [sp, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	dd37      	ble.n	8007642 <_dtoa_r+0x43a>
 80075d2:	1e7b      	subs	r3, r7, #1
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	4620      	mov	r0, r4
 80075d8:	4b7d      	ldr	r3, [pc, #500]	@ (80077d0 <_dtoa_r+0x5c8>)
 80075da:	2200      	movs	r2, #0
 80075dc:	4629      	mov	r1, r5
 80075de:	f7f9 f80b 	bl	80005f8 <__aeabi_dmul>
 80075e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075e6:	9c00      	ldr	r4, [sp, #0]
 80075e8:	3601      	adds	r6, #1
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7f8 ff9a 	bl	8000524 <__aeabi_i2d>
 80075f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075f4:	f7f9 f800 	bl	80005f8 <__aeabi_dmul>
 80075f8:	4b76      	ldr	r3, [pc, #472]	@ (80077d4 <_dtoa_r+0x5cc>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	f7f8 fe46 	bl	800028c <__adddf3>
 8007600:	4605      	mov	r5, r0
 8007602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007606:	2c00      	cmp	r4, #0
 8007608:	f040 808d 	bne.w	8007726 <_dtoa_r+0x51e>
 800760c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007610:	4b71      	ldr	r3, [pc, #452]	@ (80077d8 <_dtoa_r+0x5d0>)
 8007612:	2200      	movs	r2, #0
 8007614:	f7f8 fe38 	bl	8000288 <__aeabi_dsub>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007620:	462a      	mov	r2, r5
 8007622:	4633      	mov	r3, r6
 8007624:	f7f9 fa78 	bl	8000b18 <__aeabi_dcmpgt>
 8007628:	2800      	cmp	r0, #0
 800762a:	f040 828b 	bne.w	8007b44 <_dtoa_r+0x93c>
 800762e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007632:	462a      	mov	r2, r5
 8007634:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007638:	f7f9 fa50 	bl	8000adc <__aeabi_dcmplt>
 800763c:	2800      	cmp	r0, #0
 800763e:	f040 8128 	bne.w	8007892 <_dtoa_r+0x68a>
 8007642:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007646:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800764a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800764c:	2b00      	cmp	r3, #0
 800764e:	f2c0 815a 	blt.w	8007906 <_dtoa_r+0x6fe>
 8007652:	2f0e      	cmp	r7, #14
 8007654:	f300 8157 	bgt.w	8007906 <_dtoa_r+0x6fe>
 8007658:	4b5a      	ldr	r3, [pc, #360]	@ (80077c4 <_dtoa_r+0x5bc>)
 800765a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800765e:	ed93 7b00 	vldr	d7, [r3]
 8007662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007664:	2b00      	cmp	r3, #0
 8007666:	ed8d 7b00 	vstr	d7, [sp]
 800766a:	da03      	bge.n	8007674 <_dtoa_r+0x46c>
 800766c:	9b07      	ldr	r3, [sp, #28]
 800766e:	2b00      	cmp	r3, #0
 8007670:	f340 8101 	ble.w	8007876 <_dtoa_r+0x66e>
 8007674:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007678:	4656      	mov	r6, sl
 800767a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800767e:	4620      	mov	r0, r4
 8007680:	4629      	mov	r1, r5
 8007682:	f7f9 f8e3 	bl	800084c <__aeabi_ddiv>
 8007686:	f7f9 fa67 	bl	8000b58 <__aeabi_d2iz>
 800768a:	4680      	mov	r8, r0
 800768c:	f7f8 ff4a 	bl	8000524 <__aeabi_i2d>
 8007690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007694:	f7f8 ffb0 	bl	80005f8 <__aeabi_dmul>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4620      	mov	r0, r4
 800769e:	4629      	mov	r1, r5
 80076a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076a4:	f7f8 fdf0 	bl	8000288 <__aeabi_dsub>
 80076a8:	f806 4b01 	strb.w	r4, [r6], #1
 80076ac:	9d07      	ldr	r5, [sp, #28]
 80076ae:	eba6 040a 	sub.w	r4, r6, sl
 80076b2:	42a5      	cmp	r5, r4
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	f040 8117 	bne.w	80078ea <_dtoa_r+0x6e2>
 80076bc:	f7f8 fde6 	bl	800028c <__adddf3>
 80076c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076c4:	4604      	mov	r4, r0
 80076c6:	460d      	mov	r5, r1
 80076c8:	f7f9 fa26 	bl	8000b18 <__aeabi_dcmpgt>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f040 80f9 	bne.w	80078c4 <_dtoa_r+0x6bc>
 80076d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076d6:	4620      	mov	r0, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	f7f9 f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80076de:	b118      	cbz	r0, 80076e8 <_dtoa_r+0x4e0>
 80076e0:	f018 0f01 	tst.w	r8, #1
 80076e4:	f040 80ee 	bne.w	80078c4 <_dtoa_r+0x6bc>
 80076e8:	4649      	mov	r1, r9
 80076ea:	4658      	mov	r0, fp
 80076ec:	f000 fc90 	bl	8008010 <_Bfree>
 80076f0:	2300      	movs	r3, #0
 80076f2:	7033      	strb	r3, [r6, #0]
 80076f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076f6:	3701      	adds	r7, #1
 80076f8:	601f      	str	r7, [r3, #0]
 80076fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 831d 	beq.w	8007d3c <_dtoa_r+0xb34>
 8007702:	601e      	str	r6, [r3, #0]
 8007704:	e31a      	b.n	8007d3c <_dtoa_r+0xb34>
 8007706:	07e2      	lsls	r2, r4, #31
 8007708:	d505      	bpl.n	8007716 <_dtoa_r+0x50e>
 800770a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800770e:	f7f8 ff73 	bl	80005f8 <__aeabi_dmul>
 8007712:	3601      	adds	r6, #1
 8007714:	2301      	movs	r3, #1
 8007716:	1064      	asrs	r4, r4, #1
 8007718:	3508      	adds	r5, #8
 800771a:	e73f      	b.n	800759c <_dtoa_r+0x394>
 800771c:	2602      	movs	r6, #2
 800771e:	e742      	b.n	80075a6 <_dtoa_r+0x39e>
 8007720:	9c07      	ldr	r4, [sp, #28]
 8007722:	9704      	str	r7, [sp, #16]
 8007724:	e761      	b.n	80075ea <_dtoa_r+0x3e2>
 8007726:	4b27      	ldr	r3, [pc, #156]	@ (80077c4 <_dtoa_r+0x5bc>)
 8007728:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800772a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800772e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007732:	4454      	add	r4, sl
 8007734:	2900      	cmp	r1, #0
 8007736:	d053      	beq.n	80077e0 <_dtoa_r+0x5d8>
 8007738:	4928      	ldr	r1, [pc, #160]	@ (80077dc <_dtoa_r+0x5d4>)
 800773a:	2000      	movs	r0, #0
 800773c:	f7f9 f886 	bl	800084c <__aeabi_ddiv>
 8007740:	4633      	mov	r3, r6
 8007742:	462a      	mov	r2, r5
 8007744:	f7f8 fda0 	bl	8000288 <__aeabi_dsub>
 8007748:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800774c:	4656      	mov	r6, sl
 800774e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007752:	f7f9 fa01 	bl	8000b58 <__aeabi_d2iz>
 8007756:	4605      	mov	r5, r0
 8007758:	f7f8 fee4 	bl	8000524 <__aeabi_i2d>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007764:	f7f8 fd90 	bl	8000288 <__aeabi_dsub>
 8007768:	3530      	adds	r5, #48	@ 0x30
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007772:	f806 5b01 	strb.w	r5, [r6], #1
 8007776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800777a:	f7f9 f9af 	bl	8000adc <__aeabi_dcmplt>
 800777e:	2800      	cmp	r0, #0
 8007780:	d171      	bne.n	8007866 <_dtoa_r+0x65e>
 8007782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007786:	4911      	ldr	r1, [pc, #68]	@ (80077cc <_dtoa_r+0x5c4>)
 8007788:	2000      	movs	r0, #0
 800778a:	f7f8 fd7d 	bl	8000288 <__aeabi_dsub>
 800778e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007792:	f7f9 f9a3 	bl	8000adc <__aeabi_dcmplt>
 8007796:	2800      	cmp	r0, #0
 8007798:	f040 8095 	bne.w	80078c6 <_dtoa_r+0x6be>
 800779c:	42a6      	cmp	r6, r4
 800779e:	f43f af50 	beq.w	8007642 <_dtoa_r+0x43a>
 80077a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077a6:	4b0a      	ldr	r3, [pc, #40]	@ (80077d0 <_dtoa_r+0x5c8>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	f7f8 ff25 	bl	80005f8 <__aeabi_dmul>
 80077ae:	4b08      	ldr	r3, [pc, #32]	@ (80077d0 <_dtoa_r+0x5c8>)
 80077b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077b4:	2200      	movs	r2, #0
 80077b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ba:	f7f8 ff1d 	bl	80005f8 <__aeabi_dmul>
 80077be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077c2:	e7c4      	b.n	800774e <_dtoa_r+0x546>
 80077c4:	0800b800 	.word	0x0800b800
 80077c8:	0800b7d8 	.word	0x0800b7d8
 80077cc:	3ff00000 	.word	0x3ff00000
 80077d0:	40240000 	.word	0x40240000
 80077d4:	401c0000 	.word	0x401c0000
 80077d8:	40140000 	.word	0x40140000
 80077dc:	3fe00000 	.word	0x3fe00000
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	f7f8 ff08 	bl	80005f8 <__aeabi_dmul>
 80077e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80077ee:	4656      	mov	r6, sl
 80077f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f4:	f7f9 f9b0 	bl	8000b58 <__aeabi_d2iz>
 80077f8:	4605      	mov	r5, r0
 80077fa:	f7f8 fe93 	bl	8000524 <__aeabi_i2d>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007806:	f7f8 fd3f 	bl	8000288 <__aeabi_dsub>
 800780a:	3530      	adds	r5, #48	@ 0x30
 800780c:	f806 5b01 	strb.w	r5, [r6], #1
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	42a6      	cmp	r6, r4
 8007816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	d124      	bne.n	800786a <_dtoa_r+0x662>
 8007820:	4bac      	ldr	r3, [pc, #688]	@ (8007ad4 <_dtoa_r+0x8cc>)
 8007822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007826:	f7f8 fd31 	bl	800028c <__adddf3>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007832:	f7f9 f971 	bl	8000b18 <__aeabi_dcmpgt>
 8007836:	2800      	cmp	r0, #0
 8007838:	d145      	bne.n	80078c6 <_dtoa_r+0x6be>
 800783a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800783e:	49a5      	ldr	r1, [pc, #660]	@ (8007ad4 <_dtoa_r+0x8cc>)
 8007840:	2000      	movs	r0, #0
 8007842:	f7f8 fd21 	bl	8000288 <__aeabi_dsub>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800784e:	f7f9 f945 	bl	8000adc <__aeabi_dcmplt>
 8007852:	2800      	cmp	r0, #0
 8007854:	f43f aef5 	beq.w	8007642 <_dtoa_r+0x43a>
 8007858:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800785a:	1e73      	subs	r3, r6, #1
 800785c:	9315      	str	r3, [sp, #84]	@ 0x54
 800785e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007862:	2b30      	cmp	r3, #48	@ 0x30
 8007864:	d0f8      	beq.n	8007858 <_dtoa_r+0x650>
 8007866:	9f04      	ldr	r7, [sp, #16]
 8007868:	e73e      	b.n	80076e8 <_dtoa_r+0x4e0>
 800786a:	4b9b      	ldr	r3, [pc, #620]	@ (8007ad8 <_dtoa_r+0x8d0>)
 800786c:	f7f8 fec4 	bl	80005f8 <__aeabi_dmul>
 8007870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007874:	e7bc      	b.n	80077f0 <_dtoa_r+0x5e8>
 8007876:	d10c      	bne.n	8007892 <_dtoa_r+0x68a>
 8007878:	4b98      	ldr	r3, [pc, #608]	@ (8007adc <_dtoa_r+0x8d4>)
 800787a:	2200      	movs	r2, #0
 800787c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007880:	f7f8 feba 	bl	80005f8 <__aeabi_dmul>
 8007884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007888:	f7f9 f93c 	bl	8000b04 <__aeabi_dcmpge>
 800788c:	2800      	cmp	r0, #0
 800788e:	f000 8157 	beq.w	8007b40 <_dtoa_r+0x938>
 8007892:	2400      	movs	r4, #0
 8007894:	4625      	mov	r5, r4
 8007896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007898:	43db      	mvns	r3, r3
 800789a:	9304      	str	r3, [sp, #16]
 800789c:	4656      	mov	r6, sl
 800789e:	2700      	movs	r7, #0
 80078a0:	4621      	mov	r1, r4
 80078a2:	4658      	mov	r0, fp
 80078a4:	f000 fbb4 	bl	8008010 <_Bfree>
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	d0dc      	beq.n	8007866 <_dtoa_r+0x65e>
 80078ac:	b12f      	cbz	r7, 80078ba <_dtoa_r+0x6b2>
 80078ae:	42af      	cmp	r7, r5
 80078b0:	d003      	beq.n	80078ba <_dtoa_r+0x6b2>
 80078b2:	4639      	mov	r1, r7
 80078b4:	4658      	mov	r0, fp
 80078b6:	f000 fbab 	bl	8008010 <_Bfree>
 80078ba:	4629      	mov	r1, r5
 80078bc:	4658      	mov	r0, fp
 80078be:	f000 fba7 	bl	8008010 <_Bfree>
 80078c2:	e7d0      	b.n	8007866 <_dtoa_r+0x65e>
 80078c4:	9704      	str	r7, [sp, #16]
 80078c6:	4633      	mov	r3, r6
 80078c8:	461e      	mov	r6, r3
 80078ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ce:	2a39      	cmp	r2, #57	@ 0x39
 80078d0:	d107      	bne.n	80078e2 <_dtoa_r+0x6da>
 80078d2:	459a      	cmp	sl, r3
 80078d4:	d1f8      	bne.n	80078c8 <_dtoa_r+0x6c0>
 80078d6:	9a04      	ldr	r2, [sp, #16]
 80078d8:	3201      	adds	r2, #1
 80078da:	9204      	str	r2, [sp, #16]
 80078dc:	2230      	movs	r2, #48	@ 0x30
 80078de:	f88a 2000 	strb.w	r2, [sl]
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	3201      	adds	r2, #1
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	e7bd      	b.n	8007866 <_dtoa_r+0x65e>
 80078ea:	4b7b      	ldr	r3, [pc, #492]	@ (8007ad8 <_dtoa_r+0x8d0>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	f7f8 fe83 	bl	80005f8 <__aeabi_dmul>
 80078f2:	2200      	movs	r2, #0
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	460d      	mov	r5, r1
 80078fa:	f7f9 f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f aebb 	beq.w	800767a <_dtoa_r+0x472>
 8007904:	e6f0      	b.n	80076e8 <_dtoa_r+0x4e0>
 8007906:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007908:	2a00      	cmp	r2, #0
 800790a:	f000 80db 	beq.w	8007ac4 <_dtoa_r+0x8bc>
 800790e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007910:	2a01      	cmp	r2, #1
 8007912:	f300 80bf 	bgt.w	8007a94 <_dtoa_r+0x88c>
 8007916:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007918:	2a00      	cmp	r2, #0
 800791a:	f000 80b7 	beq.w	8007a8c <_dtoa_r+0x884>
 800791e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007922:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007924:	4646      	mov	r6, r8
 8007926:	9a08      	ldr	r2, [sp, #32]
 8007928:	2101      	movs	r1, #1
 800792a:	441a      	add	r2, r3
 800792c:	4658      	mov	r0, fp
 800792e:	4498      	add	r8, r3
 8007930:	9208      	str	r2, [sp, #32]
 8007932:	f000 fc6b 	bl	800820c <__i2b>
 8007936:	4605      	mov	r5, r0
 8007938:	b15e      	cbz	r6, 8007952 <_dtoa_r+0x74a>
 800793a:	9b08      	ldr	r3, [sp, #32]
 800793c:	2b00      	cmp	r3, #0
 800793e:	dd08      	ble.n	8007952 <_dtoa_r+0x74a>
 8007940:	42b3      	cmp	r3, r6
 8007942:	9a08      	ldr	r2, [sp, #32]
 8007944:	bfa8      	it	ge
 8007946:	4633      	movge	r3, r6
 8007948:	eba8 0803 	sub.w	r8, r8, r3
 800794c:	1af6      	subs	r6, r6, r3
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	9308      	str	r3, [sp, #32]
 8007952:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007954:	b1f3      	cbz	r3, 8007994 <_dtoa_r+0x78c>
 8007956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 80b7 	beq.w	8007acc <_dtoa_r+0x8c4>
 800795e:	b18c      	cbz	r4, 8007984 <_dtoa_r+0x77c>
 8007960:	4629      	mov	r1, r5
 8007962:	4622      	mov	r2, r4
 8007964:	4658      	mov	r0, fp
 8007966:	f000 fd11 	bl	800838c <__pow5mult>
 800796a:	464a      	mov	r2, r9
 800796c:	4601      	mov	r1, r0
 800796e:	4605      	mov	r5, r0
 8007970:	4658      	mov	r0, fp
 8007972:	f000 fc61 	bl	8008238 <__multiply>
 8007976:	4649      	mov	r1, r9
 8007978:	9004      	str	r0, [sp, #16]
 800797a:	4658      	mov	r0, fp
 800797c:	f000 fb48 	bl	8008010 <_Bfree>
 8007980:	9b04      	ldr	r3, [sp, #16]
 8007982:	4699      	mov	r9, r3
 8007984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007986:	1b1a      	subs	r2, r3, r4
 8007988:	d004      	beq.n	8007994 <_dtoa_r+0x78c>
 800798a:	4649      	mov	r1, r9
 800798c:	4658      	mov	r0, fp
 800798e:	f000 fcfd 	bl	800838c <__pow5mult>
 8007992:	4681      	mov	r9, r0
 8007994:	2101      	movs	r1, #1
 8007996:	4658      	mov	r0, fp
 8007998:	f000 fc38 	bl	800820c <__i2b>
 800799c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800799e:	4604      	mov	r4, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 81cf 	beq.w	8007d44 <_dtoa_r+0xb3c>
 80079a6:	461a      	mov	r2, r3
 80079a8:	4601      	mov	r1, r0
 80079aa:	4658      	mov	r0, fp
 80079ac:	f000 fcee 	bl	800838c <__pow5mult>
 80079b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	4604      	mov	r4, r0
 80079b6:	f300 8095 	bgt.w	8007ae4 <_dtoa_r+0x8dc>
 80079ba:	9b02      	ldr	r3, [sp, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 8087 	bne.w	8007ad0 <_dtoa_r+0x8c8>
 80079c2:	9b03      	ldr	r3, [sp, #12]
 80079c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f040 8089 	bne.w	8007ae0 <_dtoa_r+0x8d8>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079d4:	0d1b      	lsrs	r3, r3, #20
 80079d6:	051b      	lsls	r3, r3, #20
 80079d8:	b12b      	cbz	r3, 80079e6 <_dtoa_r+0x7de>
 80079da:	9b08      	ldr	r3, [sp, #32]
 80079dc:	3301      	adds	r3, #1
 80079de:	9308      	str	r3, [sp, #32]
 80079e0:	f108 0801 	add.w	r8, r8, #1
 80079e4:	2301      	movs	r3, #1
 80079e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 81b0 	beq.w	8007d50 <_dtoa_r+0xb48>
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079f6:	6918      	ldr	r0, [r3, #16]
 80079f8:	f000 fbbc 	bl	8008174 <__hi0bits>
 80079fc:	f1c0 0020 	rsb	r0, r0, #32
 8007a00:	9b08      	ldr	r3, [sp, #32]
 8007a02:	4418      	add	r0, r3
 8007a04:	f010 001f 	ands.w	r0, r0, #31
 8007a08:	d077      	beq.n	8007afa <_dtoa_r+0x8f2>
 8007a0a:	f1c0 0320 	rsb	r3, r0, #32
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	dd6b      	ble.n	8007aea <_dtoa_r+0x8e2>
 8007a12:	9b08      	ldr	r3, [sp, #32]
 8007a14:	f1c0 001c 	rsb	r0, r0, #28
 8007a18:	4403      	add	r3, r0
 8007a1a:	4480      	add	r8, r0
 8007a1c:	4406      	add	r6, r0
 8007a1e:	9308      	str	r3, [sp, #32]
 8007a20:	f1b8 0f00 	cmp.w	r8, #0
 8007a24:	dd05      	ble.n	8007a32 <_dtoa_r+0x82a>
 8007a26:	4649      	mov	r1, r9
 8007a28:	4642      	mov	r2, r8
 8007a2a:	4658      	mov	r0, fp
 8007a2c:	f000 fd08 	bl	8008440 <__lshift>
 8007a30:	4681      	mov	r9, r0
 8007a32:	9b08      	ldr	r3, [sp, #32]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dd05      	ble.n	8007a44 <_dtoa_r+0x83c>
 8007a38:	4621      	mov	r1, r4
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	4658      	mov	r0, fp
 8007a3e:	f000 fcff 	bl	8008440 <__lshift>
 8007a42:	4604      	mov	r4, r0
 8007a44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d059      	beq.n	8007afe <_dtoa_r+0x8f6>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4648      	mov	r0, r9
 8007a4e:	f000 fd63 	bl	8008518 <__mcmp>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	da53      	bge.n	8007afe <_dtoa_r+0x8f6>
 8007a56:	1e7b      	subs	r3, r7, #1
 8007a58:	9304      	str	r3, [sp, #16]
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	220a      	movs	r2, #10
 8007a60:	4658      	mov	r0, fp
 8007a62:	f000 faf7 	bl	8008054 <__multadd>
 8007a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a68:	4681      	mov	r9, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 8172 	beq.w	8007d54 <_dtoa_r+0xb4c>
 8007a70:	2300      	movs	r3, #0
 8007a72:	4629      	mov	r1, r5
 8007a74:	220a      	movs	r2, #10
 8007a76:	4658      	mov	r0, fp
 8007a78:	f000 faec 	bl	8008054 <__multadd>
 8007a7c:	9b00      	ldr	r3, [sp, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	4605      	mov	r5, r0
 8007a82:	dc67      	bgt.n	8007b54 <_dtoa_r+0x94c>
 8007a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	dc41      	bgt.n	8007b0e <_dtoa_r+0x906>
 8007a8a:	e063      	b.n	8007b54 <_dtoa_r+0x94c>
 8007a8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a92:	e746      	b.n	8007922 <_dtoa_r+0x71a>
 8007a94:	9b07      	ldr	r3, [sp, #28]
 8007a96:	1e5c      	subs	r4, r3, #1
 8007a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a9a:	42a3      	cmp	r3, r4
 8007a9c:	bfbf      	itttt	lt
 8007a9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007aa0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007aa2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007aa4:	1ae3      	sublt	r3, r4, r3
 8007aa6:	bfb4      	ite	lt
 8007aa8:	18d2      	addlt	r2, r2, r3
 8007aaa:	1b1c      	subge	r4, r3, r4
 8007aac:	9b07      	ldr	r3, [sp, #28]
 8007aae:	bfbc      	itt	lt
 8007ab0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007ab2:	2400      	movlt	r4, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bfb5      	itete	lt
 8007ab8:	eba8 0603 	sublt.w	r6, r8, r3
 8007abc:	9b07      	ldrge	r3, [sp, #28]
 8007abe:	2300      	movlt	r3, #0
 8007ac0:	4646      	movge	r6, r8
 8007ac2:	e730      	b.n	8007926 <_dtoa_r+0x71e>
 8007ac4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ac6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ac8:	4646      	mov	r6, r8
 8007aca:	e735      	b.n	8007938 <_dtoa_r+0x730>
 8007acc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ace:	e75c      	b.n	800798a <_dtoa_r+0x782>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e788      	b.n	80079e6 <_dtoa_r+0x7de>
 8007ad4:	3fe00000 	.word	0x3fe00000
 8007ad8:	40240000 	.word	0x40240000
 8007adc:	40140000 	.word	0x40140000
 8007ae0:	9b02      	ldr	r3, [sp, #8]
 8007ae2:	e780      	b.n	80079e6 <_dtoa_r+0x7de>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ae8:	e782      	b.n	80079f0 <_dtoa_r+0x7e8>
 8007aea:	d099      	beq.n	8007a20 <_dtoa_r+0x818>
 8007aec:	9a08      	ldr	r2, [sp, #32]
 8007aee:	331c      	adds	r3, #28
 8007af0:	441a      	add	r2, r3
 8007af2:	4498      	add	r8, r3
 8007af4:	441e      	add	r6, r3
 8007af6:	9208      	str	r2, [sp, #32]
 8007af8:	e792      	b.n	8007a20 <_dtoa_r+0x818>
 8007afa:	4603      	mov	r3, r0
 8007afc:	e7f6      	b.n	8007aec <_dtoa_r+0x8e4>
 8007afe:	9b07      	ldr	r3, [sp, #28]
 8007b00:	9704      	str	r7, [sp, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	dc20      	bgt.n	8007b48 <_dtoa_r+0x940>
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	dd1e      	ble.n	8007b4c <_dtoa_r+0x944>
 8007b0e:	9b00      	ldr	r3, [sp, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f47f aec0 	bne.w	8007896 <_dtoa_r+0x68e>
 8007b16:	4621      	mov	r1, r4
 8007b18:	2205      	movs	r2, #5
 8007b1a:	4658      	mov	r0, fp
 8007b1c:	f000 fa9a 	bl	8008054 <__multadd>
 8007b20:	4601      	mov	r1, r0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4648      	mov	r0, r9
 8007b26:	f000 fcf7 	bl	8008518 <__mcmp>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	f77f aeb3 	ble.w	8007896 <_dtoa_r+0x68e>
 8007b30:	4656      	mov	r6, sl
 8007b32:	2331      	movs	r3, #49	@ 0x31
 8007b34:	f806 3b01 	strb.w	r3, [r6], #1
 8007b38:	9b04      	ldr	r3, [sp, #16]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	e6ae      	b.n	800789e <_dtoa_r+0x696>
 8007b40:	9c07      	ldr	r4, [sp, #28]
 8007b42:	9704      	str	r7, [sp, #16]
 8007b44:	4625      	mov	r5, r4
 8007b46:	e7f3      	b.n	8007b30 <_dtoa_r+0x928>
 8007b48:	9b07      	ldr	r3, [sp, #28]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 8104 	beq.w	8007d5c <_dtoa_r+0xb54>
 8007b54:	2e00      	cmp	r6, #0
 8007b56:	dd05      	ble.n	8007b64 <_dtoa_r+0x95c>
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4632      	mov	r2, r6
 8007b5c:	4658      	mov	r0, fp
 8007b5e:	f000 fc6f 	bl	8008440 <__lshift>
 8007b62:	4605      	mov	r5, r0
 8007b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d05a      	beq.n	8007c20 <_dtoa_r+0xa18>
 8007b6a:	6869      	ldr	r1, [r5, #4]
 8007b6c:	4658      	mov	r0, fp
 8007b6e:	f000 fa0f 	bl	8007f90 <_Balloc>
 8007b72:	4606      	mov	r6, r0
 8007b74:	b928      	cbnz	r0, 8007b82 <_dtoa_r+0x97a>
 8007b76:	4b84      	ldr	r3, [pc, #528]	@ (8007d88 <_dtoa_r+0xb80>)
 8007b78:	4602      	mov	r2, r0
 8007b7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b7e:	f7ff bb5a 	b.w	8007236 <_dtoa_r+0x2e>
 8007b82:	692a      	ldr	r2, [r5, #16]
 8007b84:	3202      	adds	r2, #2
 8007b86:	0092      	lsls	r2, r2, #2
 8007b88:	f105 010c 	add.w	r1, r5, #12
 8007b8c:	300c      	adds	r0, #12
 8007b8e:	f001 ff87 	bl	8009aa0 <memcpy>
 8007b92:	2201      	movs	r2, #1
 8007b94:	4631      	mov	r1, r6
 8007b96:	4658      	mov	r0, fp
 8007b98:	f000 fc52 	bl	8008440 <__lshift>
 8007b9c:	f10a 0301 	add.w	r3, sl, #1
 8007ba0:	9307      	str	r3, [sp, #28]
 8007ba2:	9b00      	ldr	r3, [sp, #0]
 8007ba4:	4453      	add	r3, sl
 8007ba6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ba8:	9b02      	ldr	r3, [sp, #8]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	462f      	mov	r7, r5
 8007bb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	9b07      	ldr	r3, [sp, #28]
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	4648      	mov	r0, r9
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	f7ff fa9b 	bl	80070f8 <quorem>
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	9002      	str	r0, [sp, #8]
 8007bc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007bca:	4648      	mov	r0, r9
 8007bcc:	f000 fca4 	bl	8008518 <__mcmp>
 8007bd0:	462a      	mov	r2, r5
 8007bd2:	9008      	str	r0, [sp, #32]
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4658      	mov	r0, fp
 8007bd8:	f000 fcba 	bl	8008550 <__mdiff>
 8007bdc:	68c2      	ldr	r2, [r0, #12]
 8007bde:	4606      	mov	r6, r0
 8007be0:	bb02      	cbnz	r2, 8007c24 <_dtoa_r+0xa1c>
 8007be2:	4601      	mov	r1, r0
 8007be4:	4648      	mov	r0, r9
 8007be6:	f000 fc97 	bl	8008518 <__mcmp>
 8007bea:	4602      	mov	r2, r0
 8007bec:	4631      	mov	r1, r6
 8007bee:	4658      	mov	r0, fp
 8007bf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bf2:	f000 fa0d 	bl	8008010 <_Bfree>
 8007bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bfa:	9e07      	ldr	r6, [sp, #28]
 8007bfc:	ea43 0102 	orr.w	r1, r3, r2
 8007c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c02:	4319      	orrs	r1, r3
 8007c04:	d110      	bne.n	8007c28 <_dtoa_r+0xa20>
 8007c06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c0a:	d029      	beq.n	8007c60 <_dtoa_r+0xa58>
 8007c0c:	9b08      	ldr	r3, [sp, #32]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dd02      	ble.n	8007c18 <_dtoa_r+0xa10>
 8007c12:	9b02      	ldr	r3, [sp, #8]
 8007c14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c18:	9b00      	ldr	r3, [sp, #0]
 8007c1a:	f883 8000 	strb.w	r8, [r3]
 8007c1e:	e63f      	b.n	80078a0 <_dtoa_r+0x698>
 8007c20:	4628      	mov	r0, r5
 8007c22:	e7bb      	b.n	8007b9c <_dtoa_r+0x994>
 8007c24:	2201      	movs	r2, #1
 8007c26:	e7e1      	b.n	8007bec <_dtoa_r+0x9e4>
 8007c28:	9b08      	ldr	r3, [sp, #32]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	db04      	blt.n	8007c38 <_dtoa_r+0xa30>
 8007c2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c30:	430b      	orrs	r3, r1
 8007c32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c34:	430b      	orrs	r3, r1
 8007c36:	d120      	bne.n	8007c7a <_dtoa_r+0xa72>
 8007c38:	2a00      	cmp	r2, #0
 8007c3a:	dded      	ble.n	8007c18 <_dtoa_r+0xa10>
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	2201      	movs	r2, #1
 8007c40:	4658      	mov	r0, fp
 8007c42:	f000 fbfd 	bl	8008440 <__lshift>
 8007c46:	4621      	mov	r1, r4
 8007c48:	4681      	mov	r9, r0
 8007c4a:	f000 fc65 	bl	8008518 <__mcmp>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	dc03      	bgt.n	8007c5a <_dtoa_r+0xa52>
 8007c52:	d1e1      	bne.n	8007c18 <_dtoa_r+0xa10>
 8007c54:	f018 0f01 	tst.w	r8, #1
 8007c58:	d0de      	beq.n	8007c18 <_dtoa_r+0xa10>
 8007c5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c5e:	d1d8      	bne.n	8007c12 <_dtoa_r+0xa0a>
 8007c60:	9a00      	ldr	r2, [sp, #0]
 8007c62:	2339      	movs	r3, #57	@ 0x39
 8007c64:	7013      	strb	r3, [r2, #0]
 8007c66:	4633      	mov	r3, r6
 8007c68:	461e      	mov	r6, r3
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c70:	2a39      	cmp	r2, #57	@ 0x39
 8007c72:	d052      	beq.n	8007d1a <_dtoa_r+0xb12>
 8007c74:	3201      	adds	r2, #1
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e612      	b.n	80078a0 <_dtoa_r+0x698>
 8007c7a:	2a00      	cmp	r2, #0
 8007c7c:	dd07      	ble.n	8007c8e <_dtoa_r+0xa86>
 8007c7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c82:	d0ed      	beq.n	8007c60 <_dtoa_r+0xa58>
 8007c84:	9a00      	ldr	r2, [sp, #0]
 8007c86:	f108 0301 	add.w	r3, r8, #1
 8007c8a:	7013      	strb	r3, [r2, #0]
 8007c8c:	e608      	b.n	80078a0 <_dtoa_r+0x698>
 8007c8e:	9b07      	ldr	r3, [sp, #28]
 8007c90:	9a07      	ldr	r2, [sp, #28]
 8007c92:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d028      	beq.n	8007cee <_dtoa_r+0xae6>
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	220a      	movs	r2, #10
 8007ca2:	4658      	mov	r0, fp
 8007ca4:	f000 f9d6 	bl	8008054 <__multadd>
 8007ca8:	42af      	cmp	r7, r5
 8007caa:	4681      	mov	r9, r0
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	f04f 020a 	mov.w	r2, #10
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	4658      	mov	r0, fp
 8007cb8:	d107      	bne.n	8007cca <_dtoa_r+0xac2>
 8007cba:	f000 f9cb 	bl	8008054 <__multadd>
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	9b07      	ldr	r3, [sp, #28]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	9307      	str	r3, [sp, #28]
 8007cc8:	e774      	b.n	8007bb4 <_dtoa_r+0x9ac>
 8007cca:	f000 f9c3 	bl	8008054 <__multadd>
 8007cce:	4629      	mov	r1, r5
 8007cd0:	4607      	mov	r7, r0
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	220a      	movs	r2, #10
 8007cd6:	4658      	mov	r0, fp
 8007cd8:	f000 f9bc 	bl	8008054 <__multadd>
 8007cdc:	4605      	mov	r5, r0
 8007cde:	e7f0      	b.n	8007cc2 <_dtoa_r+0xaba>
 8007ce0:	9b00      	ldr	r3, [sp, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	bfcc      	ite	gt
 8007ce6:	461e      	movgt	r6, r3
 8007ce8:	2601      	movle	r6, #1
 8007cea:	4456      	add	r6, sl
 8007cec:	2700      	movs	r7, #0
 8007cee:	4649      	mov	r1, r9
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	4658      	mov	r0, fp
 8007cf4:	f000 fba4 	bl	8008440 <__lshift>
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	4681      	mov	r9, r0
 8007cfc:	f000 fc0c 	bl	8008518 <__mcmp>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	dcb0      	bgt.n	8007c66 <_dtoa_r+0xa5e>
 8007d04:	d102      	bne.n	8007d0c <_dtoa_r+0xb04>
 8007d06:	f018 0f01 	tst.w	r8, #1
 8007d0a:	d1ac      	bne.n	8007c66 <_dtoa_r+0xa5e>
 8007d0c:	4633      	mov	r3, r6
 8007d0e:	461e      	mov	r6, r3
 8007d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d14:	2a30      	cmp	r2, #48	@ 0x30
 8007d16:	d0fa      	beq.n	8007d0e <_dtoa_r+0xb06>
 8007d18:	e5c2      	b.n	80078a0 <_dtoa_r+0x698>
 8007d1a:	459a      	cmp	sl, r3
 8007d1c:	d1a4      	bne.n	8007c68 <_dtoa_r+0xa60>
 8007d1e:	9b04      	ldr	r3, [sp, #16]
 8007d20:	3301      	adds	r3, #1
 8007d22:	9304      	str	r3, [sp, #16]
 8007d24:	2331      	movs	r3, #49	@ 0x31
 8007d26:	f88a 3000 	strb.w	r3, [sl]
 8007d2a:	e5b9      	b.n	80078a0 <_dtoa_r+0x698>
 8007d2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d8c <_dtoa_r+0xb84>
 8007d32:	b11b      	cbz	r3, 8007d3c <_dtoa_r+0xb34>
 8007d34:	f10a 0308 	add.w	r3, sl, #8
 8007d38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	b019      	add	sp, #100	@ 0x64
 8007d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	f77f ae37 	ble.w	80079ba <_dtoa_r+0x7b2>
 8007d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d50:	2001      	movs	r0, #1
 8007d52:	e655      	b.n	8007a00 <_dtoa_r+0x7f8>
 8007d54:	9b00      	ldr	r3, [sp, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f77f aed6 	ble.w	8007b08 <_dtoa_r+0x900>
 8007d5c:	4656      	mov	r6, sl
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4648      	mov	r0, r9
 8007d62:	f7ff f9c9 	bl	80070f8 <quorem>
 8007d66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d6a:	f806 8b01 	strb.w	r8, [r6], #1
 8007d6e:	9b00      	ldr	r3, [sp, #0]
 8007d70:	eba6 020a 	sub.w	r2, r6, sl
 8007d74:	4293      	cmp	r3, r2
 8007d76:	ddb3      	ble.n	8007ce0 <_dtoa_r+0xad8>
 8007d78:	4649      	mov	r1, r9
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	220a      	movs	r2, #10
 8007d7e:	4658      	mov	r0, fp
 8007d80:	f000 f968 	bl	8008054 <__multadd>
 8007d84:	4681      	mov	r9, r0
 8007d86:	e7ea      	b.n	8007d5e <_dtoa_r+0xb56>
 8007d88:	0800b75b 	.word	0x0800b75b
 8007d8c:	0800b6f6 	.word	0x0800b6f6

08007d90 <_free_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4605      	mov	r5, r0
 8007d94:	2900      	cmp	r1, #0
 8007d96:	d041      	beq.n	8007e1c <_free_r+0x8c>
 8007d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d9c:	1f0c      	subs	r4, r1, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfb8      	it	lt
 8007da2:	18e4      	addlt	r4, r4, r3
 8007da4:	f000 f8e8 	bl	8007f78 <__malloc_lock>
 8007da8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e20 <_free_r+0x90>)
 8007daa:	6813      	ldr	r3, [r2, #0]
 8007dac:	b933      	cbnz	r3, 8007dbc <_free_r+0x2c>
 8007dae:	6063      	str	r3, [r4, #4]
 8007db0:	6014      	str	r4, [r2, #0]
 8007db2:	4628      	mov	r0, r5
 8007db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db8:	f000 b8e4 	b.w	8007f84 <__malloc_unlock>
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	d908      	bls.n	8007dd2 <_free_r+0x42>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	1821      	adds	r1, r4, r0
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	bf01      	itttt	eq
 8007dc8:	6819      	ldreq	r1, [r3, #0]
 8007dca:	685b      	ldreq	r3, [r3, #4]
 8007dcc:	1809      	addeq	r1, r1, r0
 8007dce:	6021      	streq	r1, [r4, #0]
 8007dd0:	e7ed      	b.n	8007dae <_free_r+0x1e>
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	b10b      	cbz	r3, 8007ddc <_free_r+0x4c>
 8007dd8:	42a3      	cmp	r3, r4
 8007dda:	d9fa      	bls.n	8007dd2 <_free_r+0x42>
 8007ddc:	6811      	ldr	r1, [r2, #0]
 8007dde:	1850      	adds	r0, r2, r1
 8007de0:	42a0      	cmp	r0, r4
 8007de2:	d10b      	bne.n	8007dfc <_free_r+0x6c>
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	4401      	add	r1, r0
 8007de8:	1850      	adds	r0, r2, r1
 8007dea:	4283      	cmp	r3, r0
 8007dec:	6011      	str	r1, [r2, #0]
 8007dee:	d1e0      	bne.n	8007db2 <_free_r+0x22>
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	6053      	str	r3, [r2, #4]
 8007df6:	4408      	add	r0, r1
 8007df8:	6010      	str	r0, [r2, #0]
 8007dfa:	e7da      	b.n	8007db2 <_free_r+0x22>
 8007dfc:	d902      	bls.n	8007e04 <_free_r+0x74>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	e7d6      	b.n	8007db2 <_free_r+0x22>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	1821      	adds	r1, r4, r0
 8007e08:	428b      	cmp	r3, r1
 8007e0a:	bf04      	itt	eq
 8007e0c:	6819      	ldreq	r1, [r3, #0]
 8007e0e:	685b      	ldreq	r3, [r3, #4]
 8007e10:	6063      	str	r3, [r4, #4]
 8007e12:	bf04      	itt	eq
 8007e14:	1809      	addeq	r1, r1, r0
 8007e16:	6021      	streq	r1, [r4, #0]
 8007e18:	6054      	str	r4, [r2, #4]
 8007e1a:	e7ca      	b.n	8007db2 <_free_r+0x22>
 8007e1c:	bd38      	pop	{r3, r4, r5, pc}
 8007e1e:	bf00      	nop
 8007e20:	200006e0 	.word	0x200006e0

08007e24 <malloc>:
 8007e24:	4b02      	ldr	r3, [pc, #8]	@ (8007e30 <malloc+0xc>)
 8007e26:	4601      	mov	r1, r0
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	f000 b825 	b.w	8007e78 <_malloc_r>
 8007e2e:	bf00      	nop
 8007e30:	20000020 	.word	0x20000020

08007e34 <sbrk_aligned>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	4e0f      	ldr	r6, [pc, #60]	@ (8007e74 <sbrk_aligned+0x40>)
 8007e38:	460c      	mov	r4, r1
 8007e3a:	6831      	ldr	r1, [r6, #0]
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	b911      	cbnz	r1, 8007e46 <sbrk_aligned+0x12>
 8007e40:	f001 fe1e 	bl	8009a80 <_sbrk_r>
 8007e44:	6030      	str	r0, [r6, #0]
 8007e46:	4621      	mov	r1, r4
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f001 fe19 	bl	8009a80 <_sbrk_r>
 8007e4e:	1c43      	adds	r3, r0, #1
 8007e50:	d103      	bne.n	8007e5a <sbrk_aligned+0x26>
 8007e52:	f04f 34ff 	mov.w	r4, #4294967295
 8007e56:	4620      	mov	r0, r4
 8007e58:	bd70      	pop	{r4, r5, r6, pc}
 8007e5a:	1cc4      	adds	r4, r0, #3
 8007e5c:	f024 0403 	bic.w	r4, r4, #3
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d0f8      	beq.n	8007e56 <sbrk_aligned+0x22>
 8007e64:	1a21      	subs	r1, r4, r0
 8007e66:	4628      	mov	r0, r5
 8007e68:	f001 fe0a 	bl	8009a80 <_sbrk_r>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d1f2      	bne.n	8007e56 <sbrk_aligned+0x22>
 8007e70:	e7ef      	b.n	8007e52 <sbrk_aligned+0x1e>
 8007e72:	bf00      	nop
 8007e74:	200006dc 	.word	0x200006dc

08007e78 <_malloc_r>:
 8007e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e7c:	1ccd      	adds	r5, r1, #3
 8007e7e:	f025 0503 	bic.w	r5, r5, #3
 8007e82:	3508      	adds	r5, #8
 8007e84:	2d0c      	cmp	r5, #12
 8007e86:	bf38      	it	cc
 8007e88:	250c      	movcc	r5, #12
 8007e8a:	2d00      	cmp	r5, #0
 8007e8c:	4606      	mov	r6, r0
 8007e8e:	db01      	blt.n	8007e94 <_malloc_r+0x1c>
 8007e90:	42a9      	cmp	r1, r5
 8007e92:	d904      	bls.n	8007e9e <_malloc_r+0x26>
 8007e94:	230c      	movs	r3, #12
 8007e96:	6033      	str	r3, [r6, #0]
 8007e98:	2000      	movs	r0, #0
 8007e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f74 <_malloc_r+0xfc>
 8007ea2:	f000 f869 	bl	8007f78 <__malloc_lock>
 8007ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eaa:	461c      	mov	r4, r3
 8007eac:	bb44      	cbnz	r4, 8007f00 <_malloc_r+0x88>
 8007eae:	4629      	mov	r1, r5
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f7ff ffbf 	bl	8007e34 <sbrk_aligned>
 8007eb6:	1c43      	adds	r3, r0, #1
 8007eb8:	4604      	mov	r4, r0
 8007eba:	d158      	bne.n	8007f6e <_malloc_r+0xf6>
 8007ebc:	f8d8 4000 	ldr.w	r4, [r8]
 8007ec0:	4627      	mov	r7, r4
 8007ec2:	2f00      	cmp	r7, #0
 8007ec4:	d143      	bne.n	8007f4e <_malloc_r+0xd6>
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	d04b      	beq.n	8007f62 <_malloc_r+0xea>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4630      	mov	r0, r6
 8007ed0:	eb04 0903 	add.w	r9, r4, r3
 8007ed4:	f001 fdd4 	bl	8009a80 <_sbrk_r>
 8007ed8:	4581      	cmp	r9, r0
 8007eda:	d142      	bne.n	8007f62 <_malloc_r+0xea>
 8007edc:	6821      	ldr	r1, [r4, #0]
 8007ede:	1a6d      	subs	r5, r5, r1
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7ff ffa6 	bl	8007e34 <sbrk_aligned>
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d03a      	beq.n	8007f62 <_malloc_r+0xea>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	442b      	add	r3, r5
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	bb62      	cbnz	r2, 8007f54 <_malloc_r+0xdc>
 8007efa:	f8c8 7000 	str.w	r7, [r8]
 8007efe:	e00f      	b.n	8007f20 <_malloc_r+0xa8>
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	1b52      	subs	r2, r2, r5
 8007f04:	d420      	bmi.n	8007f48 <_malloc_r+0xd0>
 8007f06:	2a0b      	cmp	r2, #11
 8007f08:	d917      	bls.n	8007f3a <_malloc_r+0xc2>
 8007f0a:	1961      	adds	r1, r4, r5
 8007f0c:	42a3      	cmp	r3, r4
 8007f0e:	6025      	str	r5, [r4, #0]
 8007f10:	bf18      	it	ne
 8007f12:	6059      	strne	r1, [r3, #4]
 8007f14:	6863      	ldr	r3, [r4, #4]
 8007f16:	bf08      	it	eq
 8007f18:	f8c8 1000 	streq.w	r1, [r8]
 8007f1c:	5162      	str	r2, [r4, r5]
 8007f1e:	604b      	str	r3, [r1, #4]
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 f82f 	bl	8007f84 <__malloc_unlock>
 8007f26:	f104 000b 	add.w	r0, r4, #11
 8007f2a:	1d23      	adds	r3, r4, #4
 8007f2c:	f020 0007 	bic.w	r0, r0, #7
 8007f30:	1ac2      	subs	r2, r0, r3
 8007f32:	bf1c      	itt	ne
 8007f34:	1a1b      	subne	r3, r3, r0
 8007f36:	50a3      	strne	r3, [r4, r2]
 8007f38:	e7af      	b.n	8007e9a <_malloc_r+0x22>
 8007f3a:	6862      	ldr	r2, [r4, #4]
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	bf0c      	ite	eq
 8007f40:	f8c8 2000 	streq.w	r2, [r8]
 8007f44:	605a      	strne	r2, [r3, #4]
 8007f46:	e7eb      	b.n	8007f20 <_malloc_r+0xa8>
 8007f48:	4623      	mov	r3, r4
 8007f4a:	6864      	ldr	r4, [r4, #4]
 8007f4c:	e7ae      	b.n	8007eac <_malloc_r+0x34>
 8007f4e:	463c      	mov	r4, r7
 8007f50:	687f      	ldr	r7, [r7, #4]
 8007f52:	e7b6      	b.n	8007ec2 <_malloc_r+0x4a>
 8007f54:	461a      	mov	r2, r3
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	d1fb      	bne.n	8007f54 <_malloc_r+0xdc>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6053      	str	r3, [r2, #4]
 8007f60:	e7de      	b.n	8007f20 <_malloc_r+0xa8>
 8007f62:	230c      	movs	r3, #12
 8007f64:	6033      	str	r3, [r6, #0]
 8007f66:	4630      	mov	r0, r6
 8007f68:	f000 f80c 	bl	8007f84 <__malloc_unlock>
 8007f6c:	e794      	b.n	8007e98 <_malloc_r+0x20>
 8007f6e:	6005      	str	r5, [r0, #0]
 8007f70:	e7d6      	b.n	8007f20 <_malloc_r+0xa8>
 8007f72:	bf00      	nop
 8007f74:	200006e0 	.word	0x200006e0

08007f78 <__malloc_lock>:
 8007f78:	4801      	ldr	r0, [pc, #4]	@ (8007f80 <__malloc_lock+0x8>)
 8007f7a:	f7ff b896 	b.w	80070aa <__retarget_lock_acquire_recursive>
 8007f7e:	bf00      	nop
 8007f80:	200006d8 	.word	0x200006d8

08007f84 <__malloc_unlock>:
 8007f84:	4801      	ldr	r0, [pc, #4]	@ (8007f8c <__malloc_unlock+0x8>)
 8007f86:	f7ff b891 	b.w	80070ac <__retarget_lock_release_recursive>
 8007f8a:	bf00      	nop
 8007f8c:	200006d8 	.word	0x200006d8

08007f90 <_Balloc>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	69c6      	ldr	r6, [r0, #28]
 8007f94:	4604      	mov	r4, r0
 8007f96:	460d      	mov	r5, r1
 8007f98:	b976      	cbnz	r6, 8007fb8 <_Balloc+0x28>
 8007f9a:	2010      	movs	r0, #16
 8007f9c:	f7ff ff42 	bl	8007e24 <malloc>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	61e0      	str	r0, [r4, #28]
 8007fa4:	b920      	cbnz	r0, 8007fb0 <_Balloc+0x20>
 8007fa6:	4b18      	ldr	r3, [pc, #96]	@ (8008008 <_Balloc+0x78>)
 8007fa8:	4818      	ldr	r0, [pc, #96]	@ (800800c <_Balloc+0x7c>)
 8007faa:	216b      	movs	r1, #107	@ 0x6b
 8007fac:	f7ff f886 	bl	80070bc <__assert_func>
 8007fb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fb4:	6006      	str	r6, [r0, #0]
 8007fb6:	60c6      	str	r6, [r0, #12]
 8007fb8:	69e6      	ldr	r6, [r4, #28]
 8007fba:	68f3      	ldr	r3, [r6, #12]
 8007fbc:	b183      	cbz	r3, 8007fe0 <_Balloc+0x50>
 8007fbe:	69e3      	ldr	r3, [r4, #28]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007fc6:	b9b8      	cbnz	r0, 8007ff8 <_Balloc+0x68>
 8007fc8:	2101      	movs	r1, #1
 8007fca:	fa01 f605 	lsl.w	r6, r1, r5
 8007fce:	1d72      	adds	r2, r6, #5
 8007fd0:	0092      	lsls	r2, r2, #2
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f001 fd83 	bl	8009ade <_calloc_r>
 8007fd8:	b160      	cbz	r0, 8007ff4 <_Balloc+0x64>
 8007fda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fde:	e00e      	b.n	8007ffe <_Balloc+0x6e>
 8007fe0:	2221      	movs	r2, #33	@ 0x21
 8007fe2:	2104      	movs	r1, #4
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f001 fd7a 	bl	8009ade <_calloc_r>
 8007fea:	69e3      	ldr	r3, [r4, #28]
 8007fec:	60f0      	str	r0, [r6, #12]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e4      	bne.n	8007fbe <_Balloc+0x2e>
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}
 8007ff8:	6802      	ldr	r2, [r0, #0]
 8007ffa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ffe:	2300      	movs	r3, #0
 8008000:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008004:	e7f7      	b.n	8007ff6 <_Balloc+0x66>
 8008006:	bf00      	nop
 8008008:	0800b649 	.word	0x0800b649
 800800c:	0800b76c 	.word	0x0800b76c

08008010 <_Bfree>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	69c6      	ldr	r6, [r0, #28]
 8008014:	4605      	mov	r5, r0
 8008016:	460c      	mov	r4, r1
 8008018:	b976      	cbnz	r6, 8008038 <_Bfree+0x28>
 800801a:	2010      	movs	r0, #16
 800801c:	f7ff ff02 	bl	8007e24 <malloc>
 8008020:	4602      	mov	r2, r0
 8008022:	61e8      	str	r0, [r5, #28]
 8008024:	b920      	cbnz	r0, 8008030 <_Bfree+0x20>
 8008026:	4b09      	ldr	r3, [pc, #36]	@ (800804c <_Bfree+0x3c>)
 8008028:	4809      	ldr	r0, [pc, #36]	@ (8008050 <_Bfree+0x40>)
 800802a:	218f      	movs	r1, #143	@ 0x8f
 800802c:	f7ff f846 	bl	80070bc <__assert_func>
 8008030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008034:	6006      	str	r6, [r0, #0]
 8008036:	60c6      	str	r6, [r0, #12]
 8008038:	b13c      	cbz	r4, 800804a <_Bfree+0x3a>
 800803a:	69eb      	ldr	r3, [r5, #28]
 800803c:	6862      	ldr	r2, [r4, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008044:	6021      	str	r1, [r4, #0]
 8008046:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	0800b649 	.word	0x0800b649
 8008050:	0800b76c 	.word	0x0800b76c

08008054 <__multadd>:
 8008054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008058:	690d      	ldr	r5, [r1, #16]
 800805a:	4607      	mov	r7, r0
 800805c:	460c      	mov	r4, r1
 800805e:	461e      	mov	r6, r3
 8008060:	f101 0c14 	add.w	ip, r1, #20
 8008064:	2000      	movs	r0, #0
 8008066:	f8dc 3000 	ldr.w	r3, [ip]
 800806a:	b299      	uxth	r1, r3
 800806c:	fb02 6101 	mla	r1, r2, r1, r6
 8008070:	0c1e      	lsrs	r6, r3, #16
 8008072:	0c0b      	lsrs	r3, r1, #16
 8008074:	fb02 3306 	mla	r3, r2, r6, r3
 8008078:	b289      	uxth	r1, r1
 800807a:	3001      	adds	r0, #1
 800807c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008080:	4285      	cmp	r5, r0
 8008082:	f84c 1b04 	str.w	r1, [ip], #4
 8008086:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800808a:	dcec      	bgt.n	8008066 <__multadd+0x12>
 800808c:	b30e      	cbz	r6, 80080d2 <__multadd+0x7e>
 800808e:	68a3      	ldr	r3, [r4, #8]
 8008090:	42ab      	cmp	r3, r5
 8008092:	dc19      	bgt.n	80080c8 <__multadd+0x74>
 8008094:	6861      	ldr	r1, [r4, #4]
 8008096:	4638      	mov	r0, r7
 8008098:	3101      	adds	r1, #1
 800809a:	f7ff ff79 	bl	8007f90 <_Balloc>
 800809e:	4680      	mov	r8, r0
 80080a0:	b928      	cbnz	r0, 80080ae <__multadd+0x5a>
 80080a2:	4602      	mov	r2, r0
 80080a4:	4b0c      	ldr	r3, [pc, #48]	@ (80080d8 <__multadd+0x84>)
 80080a6:	480d      	ldr	r0, [pc, #52]	@ (80080dc <__multadd+0x88>)
 80080a8:	21ba      	movs	r1, #186	@ 0xba
 80080aa:	f7ff f807 	bl	80070bc <__assert_func>
 80080ae:	6922      	ldr	r2, [r4, #16]
 80080b0:	3202      	adds	r2, #2
 80080b2:	f104 010c 	add.w	r1, r4, #12
 80080b6:	0092      	lsls	r2, r2, #2
 80080b8:	300c      	adds	r0, #12
 80080ba:	f001 fcf1 	bl	8009aa0 <memcpy>
 80080be:	4621      	mov	r1, r4
 80080c0:	4638      	mov	r0, r7
 80080c2:	f7ff ffa5 	bl	8008010 <_Bfree>
 80080c6:	4644      	mov	r4, r8
 80080c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080cc:	3501      	adds	r5, #1
 80080ce:	615e      	str	r6, [r3, #20]
 80080d0:	6125      	str	r5, [r4, #16]
 80080d2:	4620      	mov	r0, r4
 80080d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d8:	0800b75b 	.word	0x0800b75b
 80080dc:	0800b76c 	.word	0x0800b76c

080080e0 <__s2b>:
 80080e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e4:	460c      	mov	r4, r1
 80080e6:	4615      	mov	r5, r2
 80080e8:	461f      	mov	r7, r3
 80080ea:	2209      	movs	r2, #9
 80080ec:	3308      	adds	r3, #8
 80080ee:	4606      	mov	r6, r0
 80080f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080f4:	2100      	movs	r1, #0
 80080f6:	2201      	movs	r2, #1
 80080f8:	429a      	cmp	r2, r3
 80080fa:	db09      	blt.n	8008110 <__s2b+0x30>
 80080fc:	4630      	mov	r0, r6
 80080fe:	f7ff ff47 	bl	8007f90 <_Balloc>
 8008102:	b940      	cbnz	r0, 8008116 <__s2b+0x36>
 8008104:	4602      	mov	r2, r0
 8008106:	4b19      	ldr	r3, [pc, #100]	@ (800816c <__s2b+0x8c>)
 8008108:	4819      	ldr	r0, [pc, #100]	@ (8008170 <__s2b+0x90>)
 800810a:	21d3      	movs	r1, #211	@ 0xd3
 800810c:	f7fe ffd6 	bl	80070bc <__assert_func>
 8008110:	0052      	lsls	r2, r2, #1
 8008112:	3101      	adds	r1, #1
 8008114:	e7f0      	b.n	80080f8 <__s2b+0x18>
 8008116:	9b08      	ldr	r3, [sp, #32]
 8008118:	6143      	str	r3, [r0, #20]
 800811a:	2d09      	cmp	r5, #9
 800811c:	f04f 0301 	mov.w	r3, #1
 8008120:	6103      	str	r3, [r0, #16]
 8008122:	dd16      	ble.n	8008152 <__s2b+0x72>
 8008124:	f104 0909 	add.w	r9, r4, #9
 8008128:	46c8      	mov	r8, r9
 800812a:	442c      	add	r4, r5
 800812c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008130:	4601      	mov	r1, r0
 8008132:	3b30      	subs	r3, #48	@ 0x30
 8008134:	220a      	movs	r2, #10
 8008136:	4630      	mov	r0, r6
 8008138:	f7ff ff8c 	bl	8008054 <__multadd>
 800813c:	45a0      	cmp	r8, r4
 800813e:	d1f5      	bne.n	800812c <__s2b+0x4c>
 8008140:	f1a5 0408 	sub.w	r4, r5, #8
 8008144:	444c      	add	r4, r9
 8008146:	1b2d      	subs	r5, r5, r4
 8008148:	1963      	adds	r3, r4, r5
 800814a:	42bb      	cmp	r3, r7
 800814c:	db04      	blt.n	8008158 <__s2b+0x78>
 800814e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008152:	340a      	adds	r4, #10
 8008154:	2509      	movs	r5, #9
 8008156:	e7f6      	b.n	8008146 <__s2b+0x66>
 8008158:	f814 3b01 	ldrb.w	r3, [r4], #1
 800815c:	4601      	mov	r1, r0
 800815e:	3b30      	subs	r3, #48	@ 0x30
 8008160:	220a      	movs	r2, #10
 8008162:	4630      	mov	r0, r6
 8008164:	f7ff ff76 	bl	8008054 <__multadd>
 8008168:	e7ee      	b.n	8008148 <__s2b+0x68>
 800816a:	bf00      	nop
 800816c:	0800b75b 	.word	0x0800b75b
 8008170:	0800b76c 	.word	0x0800b76c

08008174 <__hi0bits>:
 8008174:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008178:	4603      	mov	r3, r0
 800817a:	bf36      	itet	cc
 800817c:	0403      	lslcc	r3, r0, #16
 800817e:	2000      	movcs	r0, #0
 8008180:	2010      	movcc	r0, #16
 8008182:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008186:	bf3c      	itt	cc
 8008188:	021b      	lslcc	r3, r3, #8
 800818a:	3008      	addcc	r0, #8
 800818c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008190:	bf3c      	itt	cc
 8008192:	011b      	lslcc	r3, r3, #4
 8008194:	3004      	addcc	r0, #4
 8008196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800819a:	bf3c      	itt	cc
 800819c:	009b      	lslcc	r3, r3, #2
 800819e:	3002      	addcc	r0, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	db05      	blt.n	80081b0 <__hi0bits+0x3c>
 80081a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081a8:	f100 0001 	add.w	r0, r0, #1
 80081ac:	bf08      	it	eq
 80081ae:	2020      	moveq	r0, #32
 80081b0:	4770      	bx	lr

080081b2 <__lo0bits>:
 80081b2:	6803      	ldr	r3, [r0, #0]
 80081b4:	4602      	mov	r2, r0
 80081b6:	f013 0007 	ands.w	r0, r3, #7
 80081ba:	d00b      	beq.n	80081d4 <__lo0bits+0x22>
 80081bc:	07d9      	lsls	r1, r3, #31
 80081be:	d421      	bmi.n	8008204 <__lo0bits+0x52>
 80081c0:	0798      	lsls	r0, r3, #30
 80081c2:	bf49      	itett	mi
 80081c4:	085b      	lsrmi	r3, r3, #1
 80081c6:	089b      	lsrpl	r3, r3, #2
 80081c8:	2001      	movmi	r0, #1
 80081ca:	6013      	strmi	r3, [r2, #0]
 80081cc:	bf5c      	itt	pl
 80081ce:	6013      	strpl	r3, [r2, #0]
 80081d0:	2002      	movpl	r0, #2
 80081d2:	4770      	bx	lr
 80081d4:	b299      	uxth	r1, r3
 80081d6:	b909      	cbnz	r1, 80081dc <__lo0bits+0x2a>
 80081d8:	0c1b      	lsrs	r3, r3, #16
 80081da:	2010      	movs	r0, #16
 80081dc:	b2d9      	uxtb	r1, r3
 80081de:	b909      	cbnz	r1, 80081e4 <__lo0bits+0x32>
 80081e0:	3008      	adds	r0, #8
 80081e2:	0a1b      	lsrs	r3, r3, #8
 80081e4:	0719      	lsls	r1, r3, #28
 80081e6:	bf04      	itt	eq
 80081e8:	091b      	lsreq	r3, r3, #4
 80081ea:	3004      	addeq	r0, #4
 80081ec:	0799      	lsls	r1, r3, #30
 80081ee:	bf04      	itt	eq
 80081f0:	089b      	lsreq	r3, r3, #2
 80081f2:	3002      	addeq	r0, #2
 80081f4:	07d9      	lsls	r1, r3, #31
 80081f6:	d403      	bmi.n	8008200 <__lo0bits+0x4e>
 80081f8:	085b      	lsrs	r3, r3, #1
 80081fa:	f100 0001 	add.w	r0, r0, #1
 80081fe:	d003      	beq.n	8008208 <__lo0bits+0x56>
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	4770      	bx	lr
 8008204:	2000      	movs	r0, #0
 8008206:	4770      	bx	lr
 8008208:	2020      	movs	r0, #32
 800820a:	4770      	bx	lr

0800820c <__i2b>:
 800820c:	b510      	push	{r4, lr}
 800820e:	460c      	mov	r4, r1
 8008210:	2101      	movs	r1, #1
 8008212:	f7ff febd 	bl	8007f90 <_Balloc>
 8008216:	4602      	mov	r2, r0
 8008218:	b928      	cbnz	r0, 8008226 <__i2b+0x1a>
 800821a:	4b05      	ldr	r3, [pc, #20]	@ (8008230 <__i2b+0x24>)
 800821c:	4805      	ldr	r0, [pc, #20]	@ (8008234 <__i2b+0x28>)
 800821e:	f240 1145 	movw	r1, #325	@ 0x145
 8008222:	f7fe ff4b 	bl	80070bc <__assert_func>
 8008226:	2301      	movs	r3, #1
 8008228:	6144      	str	r4, [r0, #20]
 800822a:	6103      	str	r3, [r0, #16]
 800822c:	bd10      	pop	{r4, pc}
 800822e:	bf00      	nop
 8008230:	0800b75b 	.word	0x0800b75b
 8008234:	0800b76c 	.word	0x0800b76c

08008238 <__multiply>:
 8008238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823c:	4614      	mov	r4, r2
 800823e:	690a      	ldr	r2, [r1, #16]
 8008240:	6923      	ldr	r3, [r4, #16]
 8008242:	429a      	cmp	r2, r3
 8008244:	bfa8      	it	ge
 8008246:	4623      	movge	r3, r4
 8008248:	460f      	mov	r7, r1
 800824a:	bfa4      	itt	ge
 800824c:	460c      	movge	r4, r1
 800824e:	461f      	movge	r7, r3
 8008250:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008254:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008258:	68a3      	ldr	r3, [r4, #8]
 800825a:	6861      	ldr	r1, [r4, #4]
 800825c:	eb0a 0609 	add.w	r6, sl, r9
 8008260:	42b3      	cmp	r3, r6
 8008262:	b085      	sub	sp, #20
 8008264:	bfb8      	it	lt
 8008266:	3101      	addlt	r1, #1
 8008268:	f7ff fe92 	bl	8007f90 <_Balloc>
 800826c:	b930      	cbnz	r0, 800827c <__multiply+0x44>
 800826e:	4602      	mov	r2, r0
 8008270:	4b44      	ldr	r3, [pc, #272]	@ (8008384 <__multiply+0x14c>)
 8008272:	4845      	ldr	r0, [pc, #276]	@ (8008388 <__multiply+0x150>)
 8008274:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008278:	f7fe ff20 	bl	80070bc <__assert_func>
 800827c:	f100 0514 	add.w	r5, r0, #20
 8008280:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008284:	462b      	mov	r3, r5
 8008286:	2200      	movs	r2, #0
 8008288:	4543      	cmp	r3, r8
 800828a:	d321      	bcc.n	80082d0 <__multiply+0x98>
 800828c:	f107 0114 	add.w	r1, r7, #20
 8008290:	f104 0214 	add.w	r2, r4, #20
 8008294:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008298:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800829c:	9302      	str	r3, [sp, #8]
 800829e:	1b13      	subs	r3, r2, r4
 80082a0:	3b15      	subs	r3, #21
 80082a2:	f023 0303 	bic.w	r3, r3, #3
 80082a6:	3304      	adds	r3, #4
 80082a8:	f104 0715 	add.w	r7, r4, #21
 80082ac:	42ba      	cmp	r2, r7
 80082ae:	bf38      	it	cc
 80082b0:	2304      	movcc	r3, #4
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	9b02      	ldr	r3, [sp, #8]
 80082b6:	9103      	str	r1, [sp, #12]
 80082b8:	428b      	cmp	r3, r1
 80082ba:	d80c      	bhi.n	80082d6 <__multiply+0x9e>
 80082bc:	2e00      	cmp	r6, #0
 80082be:	dd03      	ble.n	80082c8 <__multiply+0x90>
 80082c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d05b      	beq.n	8008380 <__multiply+0x148>
 80082c8:	6106      	str	r6, [r0, #16]
 80082ca:	b005      	add	sp, #20
 80082cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d0:	f843 2b04 	str.w	r2, [r3], #4
 80082d4:	e7d8      	b.n	8008288 <__multiply+0x50>
 80082d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80082da:	f1ba 0f00 	cmp.w	sl, #0
 80082de:	d024      	beq.n	800832a <__multiply+0xf2>
 80082e0:	f104 0e14 	add.w	lr, r4, #20
 80082e4:	46a9      	mov	r9, r5
 80082e6:	f04f 0c00 	mov.w	ip, #0
 80082ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082ee:	f8d9 3000 	ldr.w	r3, [r9]
 80082f2:	fa1f fb87 	uxth.w	fp, r7
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80082fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008300:	f8d9 7000 	ldr.w	r7, [r9]
 8008304:	4463      	add	r3, ip
 8008306:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800830a:	fb0a c70b 	mla	r7, sl, fp, ip
 800830e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008312:	b29b      	uxth	r3, r3
 8008314:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008318:	4572      	cmp	r2, lr
 800831a:	f849 3b04 	str.w	r3, [r9], #4
 800831e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008322:	d8e2      	bhi.n	80082ea <__multiply+0xb2>
 8008324:	9b01      	ldr	r3, [sp, #4]
 8008326:	f845 c003 	str.w	ip, [r5, r3]
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008330:	3104      	adds	r1, #4
 8008332:	f1b9 0f00 	cmp.w	r9, #0
 8008336:	d021      	beq.n	800837c <__multiply+0x144>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	f104 0c14 	add.w	ip, r4, #20
 800833e:	46ae      	mov	lr, r5
 8008340:	f04f 0a00 	mov.w	sl, #0
 8008344:	f8bc b000 	ldrh.w	fp, [ip]
 8008348:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800834c:	fb09 770b 	mla	r7, r9, fp, r7
 8008350:	4457      	add	r7, sl
 8008352:	b29b      	uxth	r3, r3
 8008354:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008358:	f84e 3b04 	str.w	r3, [lr], #4
 800835c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008360:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008364:	f8be 3000 	ldrh.w	r3, [lr]
 8008368:	fb09 330a 	mla	r3, r9, sl, r3
 800836c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008370:	4562      	cmp	r2, ip
 8008372:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008376:	d8e5      	bhi.n	8008344 <__multiply+0x10c>
 8008378:	9f01      	ldr	r7, [sp, #4]
 800837a:	51eb      	str	r3, [r5, r7]
 800837c:	3504      	adds	r5, #4
 800837e:	e799      	b.n	80082b4 <__multiply+0x7c>
 8008380:	3e01      	subs	r6, #1
 8008382:	e79b      	b.n	80082bc <__multiply+0x84>
 8008384:	0800b75b 	.word	0x0800b75b
 8008388:	0800b76c 	.word	0x0800b76c

0800838c <__pow5mult>:
 800838c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008390:	4615      	mov	r5, r2
 8008392:	f012 0203 	ands.w	r2, r2, #3
 8008396:	4607      	mov	r7, r0
 8008398:	460e      	mov	r6, r1
 800839a:	d007      	beq.n	80083ac <__pow5mult+0x20>
 800839c:	4c25      	ldr	r4, [pc, #148]	@ (8008434 <__pow5mult+0xa8>)
 800839e:	3a01      	subs	r2, #1
 80083a0:	2300      	movs	r3, #0
 80083a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083a6:	f7ff fe55 	bl	8008054 <__multadd>
 80083aa:	4606      	mov	r6, r0
 80083ac:	10ad      	asrs	r5, r5, #2
 80083ae:	d03d      	beq.n	800842c <__pow5mult+0xa0>
 80083b0:	69fc      	ldr	r4, [r7, #28]
 80083b2:	b97c      	cbnz	r4, 80083d4 <__pow5mult+0x48>
 80083b4:	2010      	movs	r0, #16
 80083b6:	f7ff fd35 	bl	8007e24 <malloc>
 80083ba:	4602      	mov	r2, r0
 80083bc:	61f8      	str	r0, [r7, #28]
 80083be:	b928      	cbnz	r0, 80083cc <__pow5mult+0x40>
 80083c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008438 <__pow5mult+0xac>)
 80083c2:	481e      	ldr	r0, [pc, #120]	@ (800843c <__pow5mult+0xb0>)
 80083c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083c8:	f7fe fe78 	bl	80070bc <__assert_func>
 80083cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d0:	6004      	str	r4, [r0, #0]
 80083d2:	60c4      	str	r4, [r0, #12]
 80083d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083dc:	b94c      	cbnz	r4, 80083f2 <__pow5mult+0x66>
 80083de:	f240 2171 	movw	r1, #625	@ 0x271
 80083e2:	4638      	mov	r0, r7
 80083e4:	f7ff ff12 	bl	800820c <__i2b>
 80083e8:	2300      	movs	r3, #0
 80083ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80083ee:	4604      	mov	r4, r0
 80083f0:	6003      	str	r3, [r0, #0]
 80083f2:	f04f 0900 	mov.w	r9, #0
 80083f6:	07eb      	lsls	r3, r5, #31
 80083f8:	d50a      	bpl.n	8008410 <__pow5mult+0x84>
 80083fa:	4631      	mov	r1, r6
 80083fc:	4622      	mov	r2, r4
 80083fe:	4638      	mov	r0, r7
 8008400:	f7ff ff1a 	bl	8008238 <__multiply>
 8008404:	4631      	mov	r1, r6
 8008406:	4680      	mov	r8, r0
 8008408:	4638      	mov	r0, r7
 800840a:	f7ff fe01 	bl	8008010 <_Bfree>
 800840e:	4646      	mov	r6, r8
 8008410:	106d      	asrs	r5, r5, #1
 8008412:	d00b      	beq.n	800842c <__pow5mult+0xa0>
 8008414:	6820      	ldr	r0, [r4, #0]
 8008416:	b938      	cbnz	r0, 8008428 <__pow5mult+0x9c>
 8008418:	4622      	mov	r2, r4
 800841a:	4621      	mov	r1, r4
 800841c:	4638      	mov	r0, r7
 800841e:	f7ff ff0b 	bl	8008238 <__multiply>
 8008422:	6020      	str	r0, [r4, #0]
 8008424:	f8c0 9000 	str.w	r9, [r0]
 8008428:	4604      	mov	r4, r0
 800842a:	e7e4      	b.n	80083f6 <__pow5mult+0x6a>
 800842c:	4630      	mov	r0, r6
 800842e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008432:	bf00      	nop
 8008434:	0800b7c8 	.word	0x0800b7c8
 8008438:	0800b649 	.word	0x0800b649
 800843c:	0800b76c 	.word	0x0800b76c

08008440 <__lshift>:
 8008440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008444:	460c      	mov	r4, r1
 8008446:	6849      	ldr	r1, [r1, #4]
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	4607      	mov	r7, r0
 8008452:	4691      	mov	r9, r2
 8008454:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008458:	f108 0601 	add.w	r6, r8, #1
 800845c:	42b3      	cmp	r3, r6
 800845e:	db0b      	blt.n	8008478 <__lshift+0x38>
 8008460:	4638      	mov	r0, r7
 8008462:	f7ff fd95 	bl	8007f90 <_Balloc>
 8008466:	4605      	mov	r5, r0
 8008468:	b948      	cbnz	r0, 800847e <__lshift+0x3e>
 800846a:	4602      	mov	r2, r0
 800846c:	4b28      	ldr	r3, [pc, #160]	@ (8008510 <__lshift+0xd0>)
 800846e:	4829      	ldr	r0, [pc, #164]	@ (8008514 <__lshift+0xd4>)
 8008470:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008474:	f7fe fe22 	bl	80070bc <__assert_func>
 8008478:	3101      	adds	r1, #1
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	e7ee      	b.n	800845c <__lshift+0x1c>
 800847e:	2300      	movs	r3, #0
 8008480:	f100 0114 	add.w	r1, r0, #20
 8008484:	f100 0210 	add.w	r2, r0, #16
 8008488:	4618      	mov	r0, r3
 800848a:	4553      	cmp	r3, sl
 800848c:	db33      	blt.n	80084f6 <__lshift+0xb6>
 800848e:	6920      	ldr	r0, [r4, #16]
 8008490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008494:	f104 0314 	add.w	r3, r4, #20
 8008498:	f019 091f 	ands.w	r9, r9, #31
 800849c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084a4:	d02b      	beq.n	80084fe <__lshift+0xbe>
 80084a6:	f1c9 0e20 	rsb	lr, r9, #32
 80084aa:	468a      	mov	sl, r1
 80084ac:	2200      	movs	r2, #0
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	fa00 f009 	lsl.w	r0, r0, r9
 80084b4:	4310      	orrs	r0, r2
 80084b6:	f84a 0b04 	str.w	r0, [sl], #4
 80084ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80084be:	459c      	cmp	ip, r3
 80084c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80084c4:	d8f3      	bhi.n	80084ae <__lshift+0x6e>
 80084c6:	ebac 0304 	sub.w	r3, ip, r4
 80084ca:	3b15      	subs	r3, #21
 80084cc:	f023 0303 	bic.w	r3, r3, #3
 80084d0:	3304      	adds	r3, #4
 80084d2:	f104 0015 	add.w	r0, r4, #21
 80084d6:	4584      	cmp	ip, r0
 80084d8:	bf38      	it	cc
 80084da:	2304      	movcc	r3, #4
 80084dc:	50ca      	str	r2, [r1, r3]
 80084de:	b10a      	cbz	r2, 80084e4 <__lshift+0xa4>
 80084e0:	f108 0602 	add.w	r6, r8, #2
 80084e4:	3e01      	subs	r6, #1
 80084e6:	4638      	mov	r0, r7
 80084e8:	612e      	str	r6, [r5, #16]
 80084ea:	4621      	mov	r1, r4
 80084ec:	f7ff fd90 	bl	8008010 <_Bfree>
 80084f0:	4628      	mov	r0, r5
 80084f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80084fa:	3301      	adds	r3, #1
 80084fc:	e7c5      	b.n	800848a <__lshift+0x4a>
 80084fe:	3904      	subs	r1, #4
 8008500:	f853 2b04 	ldr.w	r2, [r3], #4
 8008504:	f841 2f04 	str.w	r2, [r1, #4]!
 8008508:	459c      	cmp	ip, r3
 800850a:	d8f9      	bhi.n	8008500 <__lshift+0xc0>
 800850c:	e7ea      	b.n	80084e4 <__lshift+0xa4>
 800850e:	bf00      	nop
 8008510:	0800b75b 	.word	0x0800b75b
 8008514:	0800b76c 	.word	0x0800b76c

08008518 <__mcmp>:
 8008518:	690a      	ldr	r2, [r1, #16]
 800851a:	4603      	mov	r3, r0
 800851c:	6900      	ldr	r0, [r0, #16]
 800851e:	1a80      	subs	r0, r0, r2
 8008520:	b530      	push	{r4, r5, lr}
 8008522:	d10e      	bne.n	8008542 <__mcmp+0x2a>
 8008524:	3314      	adds	r3, #20
 8008526:	3114      	adds	r1, #20
 8008528:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800852c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008530:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008534:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008538:	4295      	cmp	r5, r2
 800853a:	d003      	beq.n	8008544 <__mcmp+0x2c>
 800853c:	d205      	bcs.n	800854a <__mcmp+0x32>
 800853e:	f04f 30ff 	mov.w	r0, #4294967295
 8008542:	bd30      	pop	{r4, r5, pc}
 8008544:	42a3      	cmp	r3, r4
 8008546:	d3f3      	bcc.n	8008530 <__mcmp+0x18>
 8008548:	e7fb      	b.n	8008542 <__mcmp+0x2a>
 800854a:	2001      	movs	r0, #1
 800854c:	e7f9      	b.n	8008542 <__mcmp+0x2a>
	...

08008550 <__mdiff>:
 8008550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008554:	4689      	mov	r9, r1
 8008556:	4606      	mov	r6, r0
 8008558:	4611      	mov	r1, r2
 800855a:	4648      	mov	r0, r9
 800855c:	4614      	mov	r4, r2
 800855e:	f7ff ffdb 	bl	8008518 <__mcmp>
 8008562:	1e05      	subs	r5, r0, #0
 8008564:	d112      	bne.n	800858c <__mdiff+0x3c>
 8008566:	4629      	mov	r1, r5
 8008568:	4630      	mov	r0, r6
 800856a:	f7ff fd11 	bl	8007f90 <_Balloc>
 800856e:	4602      	mov	r2, r0
 8008570:	b928      	cbnz	r0, 800857e <__mdiff+0x2e>
 8008572:	4b3f      	ldr	r3, [pc, #252]	@ (8008670 <__mdiff+0x120>)
 8008574:	f240 2137 	movw	r1, #567	@ 0x237
 8008578:	483e      	ldr	r0, [pc, #248]	@ (8008674 <__mdiff+0x124>)
 800857a:	f7fe fd9f 	bl	80070bc <__assert_func>
 800857e:	2301      	movs	r3, #1
 8008580:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008584:	4610      	mov	r0, r2
 8008586:	b003      	add	sp, #12
 8008588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858c:	bfbc      	itt	lt
 800858e:	464b      	movlt	r3, r9
 8008590:	46a1      	movlt	r9, r4
 8008592:	4630      	mov	r0, r6
 8008594:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008598:	bfba      	itte	lt
 800859a:	461c      	movlt	r4, r3
 800859c:	2501      	movlt	r5, #1
 800859e:	2500      	movge	r5, #0
 80085a0:	f7ff fcf6 	bl	8007f90 <_Balloc>
 80085a4:	4602      	mov	r2, r0
 80085a6:	b918      	cbnz	r0, 80085b0 <__mdiff+0x60>
 80085a8:	4b31      	ldr	r3, [pc, #196]	@ (8008670 <__mdiff+0x120>)
 80085aa:	f240 2145 	movw	r1, #581	@ 0x245
 80085ae:	e7e3      	b.n	8008578 <__mdiff+0x28>
 80085b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085b4:	6926      	ldr	r6, [r4, #16]
 80085b6:	60c5      	str	r5, [r0, #12]
 80085b8:	f109 0310 	add.w	r3, r9, #16
 80085bc:	f109 0514 	add.w	r5, r9, #20
 80085c0:	f104 0e14 	add.w	lr, r4, #20
 80085c4:	f100 0b14 	add.w	fp, r0, #20
 80085c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	46d9      	mov	r9, fp
 80085d4:	f04f 0c00 	mov.w	ip, #0
 80085d8:	9b01      	ldr	r3, [sp, #4]
 80085da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085e2:	9301      	str	r3, [sp, #4]
 80085e4:	fa1f f38a 	uxth.w	r3, sl
 80085e8:	4619      	mov	r1, r3
 80085ea:	b283      	uxth	r3, r0
 80085ec:	1acb      	subs	r3, r1, r3
 80085ee:	0c00      	lsrs	r0, r0, #16
 80085f0:	4463      	add	r3, ip
 80085f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008600:	4576      	cmp	r6, lr
 8008602:	f849 3b04 	str.w	r3, [r9], #4
 8008606:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800860a:	d8e5      	bhi.n	80085d8 <__mdiff+0x88>
 800860c:	1b33      	subs	r3, r6, r4
 800860e:	3b15      	subs	r3, #21
 8008610:	f023 0303 	bic.w	r3, r3, #3
 8008614:	3415      	adds	r4, #21
 8008616:	3304      	adds	r3, #4
 8008618:	42a6      	cmp	r6, r4
 800861a:	bf38      	it	cc
 800861c:	2304      	movcc	r3, #4
 800861e:	441d      	add	r5, r3
 8008620:	445b      	add	r3, fp
 8008622:	461e      	mov	r6, r3
 8008624:	462c      	mov	r4, r5
 8008626:	4544      	cmp	r4, r8
 8008628:	d30e      	bcc.n	8008648 <__mdiff+0xf8>
 800862a:	f108 0103 	add.w	r1, r8, #3
 800862e:	1b49      	subs	r1, r1, r5
 8008630:	f021 0103 	bic.w	r1, r1, #3
 8008634:	3d03      	subs	r5, #3
 8008636:	45a8      	cmp	r8, r5
 8008638:	bf38      	it	cc
 800863a:	2100      	movcc	r1, #0
 800863c:	440b      	add	r3, r1
 800863e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008642:	b191      	cbz	r1, 800866a <__mdiff+0x11a>
 8008644:	6117      	str	r7, [r2, #16]
 8008646:	e79d      	b.n	8008584 <__mdiff+0x34>
 8008648:	f854 1b04 	ldr.w	r1, [r4], #4
 800864c:	46e6      	mov	lr, ip
 800864e:	0c08      	lsrs	r0, r1, #16
 8008650:	fa1c fc81 	uxtah	ip, ip, r1
 8008654:	4471      	add	r1, lr
 8008656:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800865a:	b289      	uxth	r1, r1
 800865c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008660:	f846 1b04 	str.w	r1, [r6], #4
 8008664:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008668:	e7dd      	b.n	8008626 <__mdiff+0xd6>
 800866a:	3f01      	subs	r7, #1
 800866c:	e7e7      	b.n	800863e <__mdiff+0xee>
 800866e:	bf00      	nop
 8008670:	0800b75b 	.word	0x0800b75b
 8008674:	0800b76c 	.word	0x0800b76c

08008678 <__ulp>:
 8008678:	b082      	sub	sp, #8
 800867a:	ed8d 0b00 	vstr	d0, [sp]
 800867e:	9a01      	ldr	r2, [sp, #4]
 8008680:	4b0f      	ldr	r3, [pc, #60]	@ (80086c0 <__ulp+0x48>)
 8008682:	4013      	ands	r3, r2
 8008684:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008688:	2b00      	cmp	r3, #0
 800868a:	dc08      	bgt.n	800869e <__ulp+0x26>
 800868c:	425b      	negs	r3, r3
 800868e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008692:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008696:	da04      	bge.n	80086a2 <__ulp+0x2a>
 8008698:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800869c:	4113      	asrs	r3, r2
 800869e:	2200      	movs	r2, #0
 80086a0:	e008      	b.n	80086b4 <__ulp+0x3c>
 80086a2:	f1a2 0314 	sub.w	r3, r2, #20
 80086a6:	2b1e      	cmp	r3, #30
 80086a8:	bfda      	itte	le
 80086aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80086ae:	40da      	lsrle	r2, r3
 80086b0:	2201      	movgt	r2, #1
 80086b2:	2300      	movs	r3, #0
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	ec41 0b10 	vmov	d0, r0, r1
 80086bc:	b002      	add	sp, #8
 80086be:	4770      	bx	lr
 80086c0:	7ff00000 	.word	0x7ff00000

080086c4 <__b2d>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	6906      	ldr	r6, [r0, #16]
 80086ca:	f100 0814 	add.w	r8, r0, #20
 80086ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80086d2:	1f37      	subs	r7, r6, #4
 80086d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80086d8:	4610      	mov	r0, r2
 80086da:	f7ff fd4b 	bl	8008174 <__hi0bits>
 80086de:	f1c0 0320 	rsb	r3, r0, #32
 80086e2:	280a      	cmp	r0, #10
 80086e4:	600b      	str	r3, [r1, #0]
 80086e6:	491b      	ldr	r1, [pc, #108]	@ (8008754 <__b2d+0x90>)
 80086e8:	dc15      	bgt.n	8008716 <__b2d+0x52>
 80086ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80086ee:	fa22 f30c 	lsr.w	r3, r2, ip
 80086f2:	45b8      	cmp	r8, r7
 80086f4:	ea43 0501 	orr.w	r5, r3, r1
 80086f8:	bf34      	ite	cc
 80086fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086fe:	2300      	movcs	r3, #0
 8008700:	3015      	adds	r0, #21
 8008702:	fa02 f000 	lsl.w	r0, r2, r0
 8008706:	fa23 f30c 	lsr.w	r3, r3, ip
 800870a:	4303      	orrs	r3, r0
 800870c:	461c      	mov	r4, r3
 800870e:	ec45 4b10 	vmov	d0, r4, r5
 8008712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008716:	45b8      	cmp	r8, r7
 8008718:	bf3a      	itte	cc
 800871a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800871e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008722:	2300      	movcs	r3, #0
 8008724:	380b      	subs	r0, #11
 8008726:	d012      	beq.n	800874e <__b2d+0x8a>
 8008728:	f1c0 0120 	rsb	r1, r0, #32
 800872c:	fa23 f401 	lsr.w	r4, r3, r1
 8008730:	4082      	lsls	r2, r0
 8008732:	4322      	orrs	r2, r4
 8008734:	4547      	cmp	r7, r8
 8008736:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800873a:	bf8c      	ite	hi
 800873c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008740:	2200      	movls	r2, #0
 8008742:	4083      	lsls	r3, r0
 8008744:	40ca      	lsrs	r2, r1
 8008746:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800874a:	4313      	orrs	r3, r2
 800874c:	e7de      	b.n	800870c <__b2d+0x48>
 800874e:	ea42 0501 	orr.w	r5, r2, r1
 8008752:	e7db      	b.n	800870c <__b2d+0x48>
 8008754:	3ff00000 	.word	0x3ff00000

08008758 <__d2b>:
 8008758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800875c:	460f      	mov	r7, r1
 800875e:	2101      	movs	r1, #1
 8008760:	ec59 8b10 	vmov	r8, r9, d0
 8008764:	4616      	mov	r6, r2
 8008766:	f7ff fc13 	bl	8007f90 <_Balloc>
 800876a:	4604      	mov	r4, r0
 800876c:	b930      	cbnz	r0, 800877c <__d2b+0x24>
 800876e:	4602      	mov	r2, r0
 8008770:	4b23      	ldr	r3, [pc, #140]	@ (8008800 <__d2b+0xa8>)
 8008772:	4824      	ldr	r0, [pc, #144]	@ (8008804 <__d2b+0xac>)
 8008774:	f240 310f 	movw	r1, #783	@ 0x30f
 8008778:	f7fe fca0 	bl	80070bc <__assert_func>
 800877c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008784:	b10d      	cbz	r5, 800878a <__d2b+0x32>
 8008786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	f1b8 0300 	subs.w	r3, r8, #0
 8008790:	d023      	beq.n	80087da <__d2b+0x82>
 8008792:	4668      	mov	r0, sp
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	f7ff fd0c 	bl	80081b2 <__lo0bits>
 800879a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800879e:	b1d0      	cbz	r0, 80087d6 <__d2b+0x7e>
 80087a0:	f1c0 0320 	rsb	r3, r0, #32
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	430b      	orrs	r3, r1
 80087aa:	40c2      	lsrs	r2, r0
 80087ac:	6163      	str	r3, [r4, #20]
 80087ae:	9201      	str	r2, [sp, #4]
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	61a3      	str	r3, [r4, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bf0c      	ite	eq
 80087b8:	2201      	moveq	r2, #1
 80087ba:	2202      	movne	r2, #2
 80087bc:	6122      	str	r2, [r4, #16]
 80087be:	b1a5      	cbz	r5, 80087ea <__d2b+0x92>
 80087c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087c4:	4405      	add	r5, r0
 80087c6:	603d      	str	r5, [r7, #0]
 80087c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80087cc:	6030      	str	r0, [r6, #0]
 80087ce:	4620      	mov	r0, r4
 80087d0:	b003      	add	sp, #12
 80087d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087d6:	6161      	str	r1, [r4, #20]
 80087d8:	e7ea      	b.n	80087b0 <__d2b+0x58>
 80087da:	a801      	add	r0, sp, #4
 80087dc:	f7ff fce9 	bl	80081b2 <__lo0bits>
 80087e0:	9b01      	ldr	r3, [sp, #4]
 80087e2:	6163      	str	r3, [r4, #20]
 80087e4:	3020      	adds	r0, #32
 80087e6:	2201      	movs	r2, #1
 80087e8:	e7e8      	b.n	80087bc <__d2b+0x64>
 80087ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80087f2:	6038      	str	r0, [r7, #0]
 80087f4:	6918      	ldr	r0, [r3, #16]
 80087f6:	f7ff fcbd 	bl	8008174 <__hi0bits>
 80087fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087fe:	e7e5      	b.n	80087cc <__d2b+0x74>
 8008800:	0800b75b 	.word	0x0800b75b
 8008804:	0800b76c 	.word	0x0800b76c

08008808 <__ratio>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	b085      	sub	sp, #20
 800880e:	e9cd 1000 	strd	r1, r0, [sp]
 8008812:	a902      	add	r1, sp, #8
 8008814:	f7ff ff56 	bl	80086c4 <__b2d>
 8008818:	9800      	ldr	r0, [sp, #0]
 800881a:	a903      	add	r1, sp, #12
 800881c:	ec55 4b10 	vmov	r4, r5, d0
 8008820:	f7ff ff50 	bl	80086c4 <__b2d>
 8008824:	9b01      	ldr	r3, [sp, #4]
 8008826:	6919      	ldr	r1, [r3, #16]
 8008828:	9b00      	ldr	r3, [sp, #0]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	1ac9      	subs	r1, r1, r3
 800882e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	ec5b ab10 	vmov	sl, fp, d0
 8008838:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfce      	itee	gt
 8008840:	462a      	movgt	r2, r5
 8008842:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008846:	465a      	movle	r2, fp
 8008848:	462f      	mov	r7, r5
 800884a:	46d9      	mov	r9, fp
 800884c:	bfcc      	ite	gt
 800884e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008852:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008856:	464b      	mov	r3, r9
 8008858:	4652      	mov	r2, sl
 800885a:	4620      	mov	r0, r4
 800885c:	4639      	mov	r1, r7
 800885e:	f7f7 fff5 	bl	800084c <__aeabi_ddiv>
 8008862:	ec41 0b10 	vmov	d0, r0, r1
 8008866:	b005      	add	sp, #20
 8008868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800886c <__copybits>:
 800886c:	3901      	subs	r1, #1
 800886e:	b570      	push	{r4, r5, r6, lr}
 8008870:	1149      	asrs	r1, r1, #5
 8008872:	6914      	ldr	r4, [r2, #16]
 8008874:	3101      	adds	r1, #1
 8008876:	f102 0314 	add.w	r3, r2, #20
 800887a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800887e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008882:	1f05      	subs	r5, r0, #4
 8008884:	42a3      	cmp	r3, r4
 8008886:	d30c      	bcc.n	80088a2 <__copybits+0x36>
 8008888:	1aa3      	subs	r3, r4, r2
 800888a:	3b11      	subs	r3, #17
 800888c:	f023 0303 	bic.w	r3, r3, #3
 8008890:	3211      	adds	r2, #17
 8008892:	42a2      	cmp	r2, r4
 8008894:	bf88      	it	hi
 8008896:	2300      	movhi	r3, #0
 8008898:	4418      	add	r0, r3
 800889a:	2300      	movs	r3, #0
 800889c:	4288      	cmp	r0, r1
 800889e:	d305      	bcc.n	80088ac <__copybits+0x40>
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
 80088a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80088a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80088aa:	e7eb      	b.n	8008884 <__copybits+0x18>
 80088ac:	f840 3b04 	str.w	r3, [r0], #4
 80088b0:	e7f4      	b.n	800889c <__copybits+0x30>

080088b2 <__any_on>:
 80088b2:	f100 0214 	add.w	r2, r0, #20
 80088b6:	6900      	ldr	r0, [r0, #16]
 80088b8:	114b      	asrs	r3, r1, #5
 80088ba:	4298      	cmp	r0, r3
 80088bc:	b510      	push	{r4, lr}
 80088be:	db11      	blt.n	80088e4 <__any_on+0x32>
 80088c0:	dd0a      	ble.n	80088d8 <__any_on+0x26>
 80088c2:	f011 011f 	ands.w	r1, r1, #31
 80088c6:	d007      	beq.n	80088d8 <__any_on+0x26>
 80088c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80088cc:	fa24 f001 	lsr.w	r0, r4, r1
 80088d0:	fa00 f101 	lsl.w	r1, r0, r1
 80088d4:	428c      	cmp	r4, r1
 80088d6:	d10b      	bne.n	80088f0 <__any_on+0x3e>
 80088d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088dc:	4293      	cmp	r3, r2
 80088de:	d803      	bhi.n	80088e8 <__any_on+0x36>
 80088e0:	2000      	movs	r0, #0
 80088e2:	bd10      	pop	{r4, pc}
 80088e4:	4603      	mov	r3, r0
 80088e6:	e7f7      	b.n	80088d8 <__any_on+0x26>
 80088e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088ec:	2900      	cmp	r1, #0
 80088ee:	d0f5      	beq.n	80088dc <__any_on+0x2a>
 80088f0:	2001      	movs	r0, #1
 80088f2:	e7f6      	b.n	80088e2 <__any_on+0x30>

080088f4 <sulp>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	4604      	mov	r4, r0
 80088f8:	460d      	mov	r5, r1
 80088fa:	ec45 4b10 	vmov	d0, r4, r5
 80088fe:	4616      	mov	r6, r2
 8008900:	f7ff feba 	bl	8008678 <__ulp>
 8008904:	ec51 0b10 	vmov	r0, r1, d0
 8008908:	b17e      	cbz	r6, 800892a <sulp+0x36>
 800890a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800890e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008912:	2b00      	cmp	r3, #0
 8008914:	dd09      	ble.n	800892a <sulp+0x36>
 8008916:	051b      	lsls	r3, r3, #20
 8008918:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800891c:	2400      	movs	r4, #0
 800891e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008922:	4622      	mov	r2, r4
 8008924:	462b      	mov	r3, r5
 8008926:	f7f7 fe67 	bl	80005f8 <__aeabi_dmul>
 800892a:	ec41 0b10 	vmov	d0, r0, r1
 800892e:	bd70      	pop	{r4, r5, r6, pc}

08008930 <_strtod_l>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	b09f      	sub	sp, #124	@ 0x7c
 8008936:	460c      	mov	r4, r1
 8008938:	9217      	str	r2, [sp, #92]	@ 0x5c
 800893a:	2200      	movs	r2, #0
 800893c:	921a      	str	r2, [sp, #104]	@ 0x68
 800893e:	9005      	str	r0, [sp, #20]
 8008940:	f04f 0a00 	mov.w	sl, #0
 8008944:	f04f 0b00 	mov.w	fp, #0
 8008948:	460a      	mov	r2, r1
 800894a:	9219      	str	r2, [sp, #100]	@ 0x64
 800894c:	7811      	ldrb	r1, [r2, #0]
 800894e:	292b      	cmp	r1, #43	@ 0x2b
 8008950:	d04a      	beq.n	80089e8 <_strtod_l+0xb8>
 8008952:	d838      	bhi.n	80089c6 <_strtod_l+0x96>
 8008954:	290d      	cmp	r1, #13
 8008956:	d832      	bhi.n	80089be <_strtod_l+0x8e>
 8008958:	2908      	cmp	r1, #8
 800895a:	d832      	bhi.n	80089c2 <_strtod_l+0x92>
 800895c:	2900      	cmp	r1, #0
 800895e:	d03b      	beq.n	80089d8 <_strtod_l+0xa8>
 8008960:	2200      	movs	r2, #0
 8008962:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008964:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008966:	782a      	ldrb	r2, [r5, #0]
 8008968:	2a30      	cmp	r2, #48	@ 0x30
 800896a:	f040 80b3 	bne.w	8008ad4 <_strtod_l+0x1a4>
 800896e:	786a      	ldrb	r2, [r5, #1]
 8008970:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008974:	2a58      	cmp	r2, #88	@ 0x58
 8008976:	d16e      	bne.n	8008a56 <_strtod_l+0x126>
 8008978:	9302      	str	r3, [sp, #8]
 800897a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	4a8e      	ldr	r2, [pc, #568]	@ (8008bbc <_strtod_l+0x28c>)
 8008984:	9805      	ldr	r0, [sp, #20]
 8008986:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008988:	a919      	add	r1, sp, #100	@ 0x64
 800898a:	f001 f923 	bl	8009bd4 <__gethex>
 800898e:	f010 060f 	ands.w	r6, r0, #15
 8008992:	4604      	mov	r4, r0
 8008994:	d005      	beq.n	80089a2 <_strtod_l+0x72>
 8008996:	2e06      	cmp	r6, #6
 8008998:	d128      	bne.n	80089ec <_strtod_l+0xbc>
 800899a:	3501      	adds	r5, #1
 800899c:	2300      	movs	r3, #0
 800899e:	9519      	str	r5, [sp, #100]	@ 0x64
 80089a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f040 858e 	bne.w	80094c6 <_strtod_l+0xb96>
 80089aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089ac:	b1cb      	cbz	r3, 80089e2 <_strtod_l+0xb2>
 80089ae:	4652      	mov	r2, sl
 80089b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80089b4:	ec43 2b10 	vmov	d0, r2, r3
 80089b8:	b01f      	add	sp, #124	@ 0x7c
 80089ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089be:	2920      	cmp	r1, #32
 80089c0:	d1ce      	bne.n	8008960 <_strtod_l+0x30>
 80089c2:	3201      	adds	r2, #1
 80089c4:	e7c1      	b.n	800894a <_strtod_l+0x1a>
 80089c6:	292d      	cmp	r1, #45	@ 0x2d
 80089c8:	d1ca      	bne.n	8008960 <_strtod_l+0x30>
 80089ca:	2101      	movs	r1, #1
 80089cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80089ce:	1c51      	adds	r1, r2, #1
 80089d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80089d2:	7852      	ldrb	r2, [r2, #1]
 80089d4:	2a00      	cmp	r2, #0
 80089d6:	d1c5      	bne.n	8008964 <_strtod_l+0x34>
 80089d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089da:	9419      	str	r4, [sp, #100]	@ 0x64
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f040 8570 	bne.w	80094c2 <_strtod_l+0xb92>
 80089e2:	4652      	mov	r2, sl
 80089e4:	465b      	mov	r3, fp
 80089e6:	e7e5      	b.n	80089b4 <_strtod_l+0x84>
 80089e8:	2100      	movs	r1, #0
 80089ea:	e7ef      	b.n	80089cc <_strtod_l+0x9c>
 80089ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089ee:	b13a      	cbz	r2, 8008a00 <_strtod_l+0xd0>
 80089f0:	2135      	movs	r1, #53	@ 0x35
 80089f2:	a81c      	add	r0, sp, #112	@ 0x70
 80089f4:	f7ff ff3a 	bl	800886c <__copybits>
 80089f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089fa:	9805      	ldr	r0, [sp, #20]
 80089fc:	f7ff fb08 	bl	8008010 <_Bfree>
 8008a00:	3e01      	subs	r6, #1
 8008a02:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008a04:	2e04      	cmp	r6, #4
 8008a06:	d806      	bhi.n	8008a16 <_strtod_l+0xe6>
 8008a08:	e8df f006 	tbb	[pc, r6]
 8008a0c:	201d0314 	.word	0x201d0314
 8008a10:	14          	.byte	0x14
 8008a11:	00          	.byte	0x00
 8008a12:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a16:	05e1      	lsls	r1, r4, #23
 8008a18:	bf48      	it	mi
 8008a1a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a22:	0d1b      	lsrs	r3, r3, #20
 8008a24:	051b      	lsls	r3, r3, #20
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1bb      	bne.n	80089a2 <_strtod_l+0x72>
 8008a2a:	f7fe fb13 	bl	8007054 <__errno>
 8008a2e:	2322      	movs	r3, #34	@ 0x22
 8008a30:	6003      	str	r3, [r0, #0]
 8008a32:	e7b6      	b.n	80089a2 <_strtod_l+0x72>
 8008a34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a40:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a44:	e7e7      	b.n	8008a16 <_strtod_l+0xe6>
 8008a46:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008bc4 <_strtod_l+0x294>
 8008a4a:	e7e4      	b.n	8008a16 <_strtod_l+0xe6>
 8008a4c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a50:	f04f 3aff 	mov.w	sl, #4294967295
 8008a54:	e7df      	b.n	8008a16 <_strtod_l+0xe6>
 8008a56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b30      	cmp	r3, #48	@ 0x30
 8008a60:	d0f9      	beq.n	8008a56 <_strtod_l+0x126>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d09d      	beq.n	80089a2 <_strtod_l+0x72>
 8008a66:	2301      	movs	r3, #1
 8008a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9308      	str	r3, [sp, #32]
 8008a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a74:	461f      	mov	r7, r3
 8008a76:	220a      	movs	r2, #10
 8008a78:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008a7a:	7805      	ldrb	r5, [r0, #0]
 8008a7c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008a80:	b2d9      	uxtb	r1, r3
 8008a82:	2909      	cmp	r1, #9
 8008a84:	d928      	bls.n	8008ad8 <_strtod_l+0x1a8>
 8008a86:	494e      	ldr	r1, [pc, #312]	@ (8008bc0 <_strtod_l+0x290>)
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f000 ffe7 	bl	8009a5c <strncmp>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d032      	beq.n	8008af8 <_strtod_l+0x1c8>
 8008a92:	2000      	movs	r0, #0
 8008a94:	462a      	mov	r2, r5
 8008a96:	4681      	mov	r9, r0
 8008a98:	463d      	mov	r5, r7
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2a65      	cmp	r2, #101	@ 0x65
 8008a9e:	d001      	beq.n	8008aa4 <_strtod_l+0x174>
 8008aa0:	2a45      	cmp	r2, #69	@ 0x45
 8008aa2:	d114      	bne.n	8008ace <_strtod_l+0x19e>
 8008aa4:	b91d      	cbnz	r5, 8008aae <_strtod_l+0x17e>
 8008aa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aa8:	4302      	orrs	r2, r0
 8008aaa:	d095      	beq.n	80089d8 <_strtod_l+0xa8>
 8008aac:	2500      	movs	r5, #0
 8008aae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ab0:	1c62      	adds	r2, r4, #1
 8008ab2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ab4:	7862      	ldrb	r2, [r4, #1]
 8008ab6:	2a2b      	cmp	r2, #43	@ 0x2b
 8008ab8:	d077      	beq.n	8008baa <_strtod_l+0x27a>
 8008aba:	2a2d      	cmp	r2, #45	@ 0x2d
 8008abc:	d07b      	beq.n	8008bb6 <_strtod_l+0x286>
 8008abe:	f04f 0c00 	mov.w	ip, #0
 8008ac2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ac6:	2909      	cmp	r1, #9
 8008ac8:	f240 8082 	bls.w	8008bd0 <_strtod_l+0x2a0>
 8008acc:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ace:	f04f 0800 	mov.w	r8, #0
 8008ad2:	e0a2      	b.n	8008c1a <_strtod_l+0x2ea>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e7c7      	b.n	8008a68 <_strtod_l+0x138>
 8008ad8:	2f08      	cmp	r7, #8
 8008ada:	bfd5      	itete	le
 8008adc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008ade:	9908      	ldrgt	r1, [sp, #32]
 8008ae0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ae4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ae8:	f100 0001 	add.w	r0, r0, #1
 8008aec:	bfd4      	ite	le
 8008aee:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008af0:	9308      	strgt	r3, [sp, #32]
 8008af2:	3701      	adds	r7, #1
 8008af4:	9019      	str	r0, [sp, #100]	@ 0x64
 8008af6:	e7bf      	b.n	8008a78 <_strtod_l+0x148>
 8008af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008afa:	1c5a      	adds	r2, r3, #1
 8008afc:	9219      	str	r2, [sp, #100]	@ 0x64
 8008afe:	785a      	ldrb	r2, [r3, #1]
 8008b00:	b37f      	cbz	r7, 8008b62 <_strtod_l+0x232>
 8008b02:	4681      	mov	r9, r0
 8008b04:	463d      	mov	r5, r7
 8008b06:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008b0a:	2b09      	cmp	r3, #9
 8008b0c:	d912      	bls.n	8008b34 <_strtod_l+0x204>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e7c4      	b.n	8008a9c <_strtod_l+0x16c>
 8008b12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b18:	785a      	ldrb	r2, [r3, #1]
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	2a30      	cmp	r2, #48	@ 0x30
 8008b1e:	d0f8      	beq.n	8008b12 <_strtod_l+0x1e2>
 8008b20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	f200 84d3 	bhi.w	80094d0 <_strtod_l+0xba0>
 8008b2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b2e:	4681      	mov	r9, r0
 8008b30:	2000      	movs	r0, #0
 8008b32:	4605      	mov	r5, r0
 8008b34:	3a30      	subs	r2, #48	@ 0x30
 8008b36:	f100 0301 	add.w	r3, r0, #1
 8008b3a:	d02a      	beq.n	8008b92 <_strtod_l+0x262>
 8008b3c:	4499      	add	r9, r3
 8008b3e:	eb00 0c05 	add.w	ip, r0, r5
 8008b42:	462b      	mov	r3, r5
 8008b44:	210a      	movs	r1, #10
 8008b46:	4563      	cmp	r3, ip
 8008b48:	d10d      	bne.n	8008b66 <_strtod_l+0x236>
 8008b4a:	1c69      	adds	r1, r5, #1
 8008b4c:	4401      	add	r1, r0
 8008b4e:	4428      	add	r0, r5
 8008b50:	2808      	cmp	r0, #8
 8008b52:	dc16      	bgt.n	8008b82 <_strtod_l+0x252>
 8008b54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b56:	230a      	movs	r3, #10
 8008b58:	fb03 2300 	mla	r3, r3, r0, r2
 8008b5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e018      	b.n	8008b94 <_strtod_l+0x264>
 8008b62:	4638      	mov	r0, r7
 8008b64:	e7da      	b.n	8008b1c <_strtod_l+0x1ec>
 8008b66:	2b08      	cmp	r3, #8
 8008b68:	f103 0301 	add.w	r3, r3, #1
 8008b6c:	dc03      	bgt.n	8008b76 <_strtod_l+0x246>
 8008b6e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008b70:	434e      	muls	r6, r1
 8008b72:	960a      	str	r6, [sp, #40]	@ 0x28
 8008b74:	e7e7      	b.n	8008b46 <_strtod_l+0x216>
 8008b76:	2b10      	cmp	r3, #16
 8008b78:	bfde      	ittt	le
 8008b7a:	9e08      	ldrle	r6, [sp, #32]
 8008b7c:	434e      	mulle	r6, r1
 8008b7e:	9608      	strle	r6, [sp, #32]
 8008b80:	e7e1      	b.n	8008b46 <_strtod_l+0x216>
 8008b82:	280f      	cmp	r0, #15
 8008b84:	dceb      	bgt.n	8008b5e <_strtod_l+0x22e>
 8008b86:	9808      	ldr	r0, [sp, #32]
 8008b88:	230a      	movs	r3, #10
 8008b8a:	fb03 2300 	mla	r3, r3, r0, r2
 8008b8e:	9308      	str	r3, [sp, #32]
 8008b90:	e7e5      	b.n	8008b5e <_strtod_l+0x22e>
 8008b92:	4629      	mov	r1, r5
 8008b94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b96:	1c50      	adds	r0, r2, #1
 8008b98:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b9a:	7852      	ldrb	r2, [r2, #1]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	460d      	mov	r5, r1
 8008ba0:	e7b1      	b.n	8008b06 <_strtod_l+0x1d6>
 8008ba2:	f04f 0900 	mov.w	r9, #0
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e77d      	b.n	8008aa6 <_strtod_l+0x176>
 8008baa:	f04f 0c00 	mov.w	ip, #0
 8008bae:	1ca2      	adds	r2, r4, #2
 8008bb0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bb2:	78a2      	ldrb	r2, [r4, #2]
 8008bb4:	e785      	b.n	8008ac2 <_strtod_l+0x192>
 8008bb6:	f04f 0c01 	mov.w	ip, #1
 8008bba:	e7f8      	b.n	8008bae <_strtod_l+0x27e>
 8008bbc:	0800b8e0 	.word	0x0800b8e0
 8008bc0:	0800b8c8 	.word	0x0800b8c8
 8008bc4:	7ff00000 	.word	0x7ff00000
 8008bc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bca:	1c51      	adds	r1, r2, #1
 8008bcc:	9119      	str	r1, [sp, #100]	@ 0x64
 8008bce:	7852      	ldrb	r2, [r2, #1]
 8008bd0:	2a30      	cmp	r2, #48	@ 0x30
 8008bd2:	d0f9      	beq.n	8008bc8 <_strtod_l+0x298>
 8008bd4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008bd8:	2908      	cmp	r1, #8
 8008bda:	f63f af78 	bhi.w	8008ace <_strtod_l+0x19e>
 8008bde:	3a30      	subs	r2, #48	@ 0x30
 8008be0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008be2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008be4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008be6:	f04f 080a 	mov.w	r8, #10
 8008bea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bec:	1c56      	adds	r6, r2, #1
 8008bee:	9619      	str	r6, [sp, #100]	@ 0x64
 8008bf0:	7852      	ldrb	r2, [r2, #1]
 8008bf2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008bf6:	f1be 0f09 	cmp.w	lr, #9
 8008bfa:	d939      	bls.n	8008c70 <_strtod_l+0x340>
 8008bfc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008bfe:	1a76      	subs	r6, r6, r1
 8008c00:	2e08      	cmp	r6, #8
 8008c02:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008c06:	dc03      	bgt.n	8008c10 <_strtod_l+0x2e0>
 8008c08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c0a:	4588      	cmp	r8, r1
 8008c0c:	bfa8      	it	ge
 8008c0e:	4688      	movge	r8, r1
 8008c10:	f1bc 0f00 	cmp.w	ip, #0
 8008c14:	d001      	beq.n	8008c1a <_strtod_l+0x2ea>
 8008c16:	f1c8 0800 	rsb	r8, r8, #0
 8008c1a:	2d00      	cmp	r5, #0
 8008c1c:	d14e      	bne.n	8008cbc <_strtod_l+0x38c>
 8008c1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c20:	4308      	orrs	r0, r1
 8008c22:	f47f aebe 	bne.w	80089a2 <_strtod_l+0x72>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f47f aed6 	bne.w	80089d8 <_strtod_l+0xa8>
 8008c2c:	2a69      	cmp	r2, #105	@ 0x69
 8008c2e:	d028      	beq.n	8008c82 <_strtod_l+0x352>
 8008c30:	dc25      	bgt.n	8008c7e <_strtod_l+0x34e>
 8008c32:	2a49      	cmp	r2, #73	@ 0x49
 8008c34:	d025      	beq.n	8008c82 <_strtod_l+0x352>
 8008c36:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c38:	f47f aece 	bne.w	80089d8 <_strtod_l+0xa8>
 8008c3c:	499b      	ldr	r1, [pc, #620]	@ (8008eac <_strtod_l+0x57c>)
 8008c3e:	a819      	add	r0, sp, #100	@ 0x64
 8008c40:	f001 f9ea 	bl	800a018 <__match>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	f43f aec7 	beq.w	80089d8 <_strtod_l+0xa8>
 8008c4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b28      	cmp	r3, #40	@ 0x28
 8008c50:	d12e      	bne.n	8008cb0 <_strtod_l+0x380>
 8008c52:	4997      	ldr	r1, [pc, #604]	@ (8008eb0 <_strtod_l+0x580>)
 8008c54:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c56:	a819      	add	r0, sp, #100	@ 0x64
 8008c58:	f001 f9f2 	bl	800a040 <__hexnan>
 8008c5c:	2805      	cmp	r0, #5
 8008c5e:	d127      	bne.n	8008cb0 <_strtod_l+0x380>
 8008c60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c62:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008c66:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008c6a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008c6e:	e698      	b.n	80089a2 <_strtod_l+0x72>
 8008c70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c72:	fb08 2101 	mla	r1, r8, r1, r2
 8008c76:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008c7a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c7c:	e7b5      	b.n	8008bea <_strtod_l+0x2ba>
 8008c7e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008c80:	e7da      	b.n	8008c38 <_strtod_l+0x308>
 8008c82:	498c      	ldr	r1, [pc, #560]	@ (8008eb4 <_strtod_l+0x584>)
 8008c84:	a819      	add	r0, sp, #100	@ 0x64
 8008c86:	f001 f9c7 	bl	800a018 <__match>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f43f aea4 	beq.w	80089d8 <_strtod_l+0xa8>
 8008c90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c92:	4989      	ldr	r1, [pc, #548]	@ (8008eb8 <_strtod_l+0x588>)
 8008c94:	3b01      	subs	r3, #1
 8008c96:	a819      	add	r0, sp, #100	@ 0x64
 8008c98:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c9a:	f001 f9bd 	bl	800a018 <__match>
 8008c9e:	b910      	cbnz	r0, 8008ca6 <_strtod_l+0x376>
 8008ca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	9319      	str	r3, [sp, #100]	@ 0x64
 8008ca6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008ec8 <_strtod_l+0x598>
 8008caa:	f04f 0a00 	mov.w	sl, #0
 8008cae:	e678      	b.n	80089a2 <_strtod_l+0x72>
 8008cb0:	4882      	ldr	r0, [pc, #520]	@ (8008ebc <_strtod_l+0x58c>)
 8008cb2:	f000 ff05 	bl	8009ac0 <nan>
 8008cb6:	ec5b ab10 	vmov	sl, fp, d0
 8008cba:	e672      	b.n	80089a2 <_strtod_l+0x72>
 8008cbc:	eba8 0309 	sub.w	r3, r8, r9
 8008cc0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc4:	2f00      	cmp	r7, #0
 8008cc6:	bf08      	it	eq
 8008cc8:	462f      	moveq	r7, r5
 8008cca:	2d10      	cmp	r5, #16
 8008ccc:	462c      	mov	r4, r5
 8008cce:	bfa8      	it	ge
 8008cd0:	2410      	movge	r4, #16
 8008cd2:	f7f7 fc17 	bl	8000504 <__aeabi_ui2d>
 8008cd6:	2d09      	cmp	r5, #9
 8008cd8:	4682      	mov	sl, r0
 8008cda:	468b      	mov	fp, r1
 8008cdc:	dc13      	bgt.n	8008d06 <_strtod_l+0x3d6>
 8008cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f43f ae5e 	beq.w	80089a2 <_strtod_l+0x72>
 8008ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce8:	dd78      	ble.n	8008ddc <_strtod_l+0x4ac>
 8008cea:	2b16      	cmp	r3, #22
 8008cec:	dc5f      	bgt.n	8008dae <_strtod_l+0x47e>
 8008cee:	4974      	ldr	r1, [pc, #464]	@ (8008ec0 <_strtod_l+0x590>)
 8008cf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cf8:	4652      	mov	r2, sl
 8008cfa:	465b      	mov	r3, fp
 8008cfc:	f7f7 fc7c 	bl	80005f8 <__aeabi_dmul>
 8008d00:	4682      	mov	sl, r0
 8008d02:	468b      	mov	fp, r1
 8008d04:	e64d      	b.n	80089a2 <_strtod_l+0x72>
 8008d06:	4b6e      	ldr	r3, [pc, #440]	@ (8008ec0 <_strtod_l+0x590>)
 8008d08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d10:	f7f7 fc72 	bl	80005f8 <__aeabi_dmul>
 8008d14:	4682      	mov	sl, r0
 8008d16:	9808      	ldr	r0, [sp, #32]
 8008d18:	468b      	mov	fp, r1
 8008d1a:	f7f7 fbf3 	bl	8000504 <__aeabi_ui2d>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4650      	mov	r0, sl
 8008d24:	4659      	mov	r1, fp
 8008d26:	f7f7 fab1 	bl	800028c <__adddf3>
 8008d2a:	2d0f      	cmp	r5, #15
 8008d2c:	4682      	mov	sl, r0
 8008d2e:	468b      	mov	fp, r1
 8008d30:	ddd5      	ble.n	8008cde <_strtod_l+0x3ae>
 8008d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d34:	1b2c      	subs	r4, r5, r4
 8008d36:	441c      	add	r4, r3
 8008d38:	2c00      	cmp	r4, #0
 8008d3a:	f340 8096 	ble.w	8008e6a <_strtod_l+0x53a>
 8008d3e:	f014 030f 	ands.w	r3, r4, #15
 8008d42:	d00a      	beq.n	8008d5a <_strtod_l+0x42a>
 8008d44:	495e      	ldr	r1, [pc, #376]	@ (8008ec0 <_strtod_l+0x590>)
 8008d46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d4a:	4652      	mov	r2, sl
 8008d4c:	465b      	mov	r3, fp
 8008d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d52:	f7f7 fc51 	bl	80005f8 <__aeabi_dmul>
 8008d56:	4682      	mov	sl, r0
 8008d58:	468b      	mov	fp, r1
 8008d5a:	f034 040f 	bics.w	r4, r4, #15
 8008d5e:	d073      	beq.n	8008e48 <_strtod_l+0x518>
 8008d60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008d64:	dd48      	ble.n	8008df8 <_strtod_l+0x4c8>
 8008d66:	2400      	movs	r4, #0
 8008d68:	46a0      	mov	r8, r4
 8008d6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d6c:	46a1      	mov	r9, r4
 8008d6e:	9a05      	ldr	r2, [sp, #20]
 8008d70:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008ec8 <_strtod_l+0x598>
 8008d74:	2322      	movs	r3, #34	@ 0x22
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	f04f 0a00 	mov.w	sl, #0
 8008d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f43f ae0f 	beq.w	80089a2 <_strtod_l+0x72>
 8008d84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d86:	9805      	ldr	r0, [sp, #20]
 8008d88:	f7ff f942 	bl	8008010 <_Bfree>
 8008d8c:	9805      	ldr	r0, [sp, #20]
 8008d8e:	4649      	mov	r1, r9
 8008d90:	f7ff f93e 	bl	8008010 <_Bfree>
 8008d94:	9805      	ldr	r0, [sp, #20]
 8008d96:	4641      	mov	r1, r8
 8008d98:	f7ff f93a 	bl	8008010 <_Bfree>
 8008d9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d9e:	9805      	ldr	r0, [sp, #20]
 8008da0:	f7ff f936 	bl	8008010 <_Bfree>
 8008da4:	9805      	ldr	r0, [sp, #20]
 8008da6:	4621      	mov	r1, r4
 8008da8:	f7ff f932 	bl	8008010 <_Bfree>
 8008dac:	e5f9      	b.n	80089a2 <_strtod_l+0x72>
 8008dae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008db0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008db4:	4293      	cmp	r3, r2
 8008db6:	dbbc      	blt.n	8008d32 <_strtod_l+0x402>
 8008db8:	4c41      	ldr	r4, [pc, #260]	@ (8008ec0 <_strtod_l+0x590>)
 8008dba:	f1c5 050f 	rsb	r5, r5, #15
 8008dbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	465b      	mov	r3, fp
 8008dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dca:	f7f7 fc15 	bl	80005f8 <__aeabi_dmul>
 8008dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd0:	1b5d      	subs	r5, r3, r5
 8008dd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008dd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008dda:	e78f      	b.n	8008cfc <_strtod_l+0x3cc>
 8008ddc:	3316      	adds	r3, #22
 8008dde:	dba8      	blt.n	8008d32 <_strtod_l+0x402>
 8008de0:	4b37      	ldr	r3, [pc, #220]	@ (8008ec0 <_strtod_l+0x590>)
 8008de2:	eba9 0808 	sub.w	r8, r9, r8
 8008de6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008dea:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008dee:	4650      	mov	r0, sl
 8008df0:	4659      	mov	r1, fp
 8008df2:	f7f7 fd2b 	bl	800084c <__aeabi_ddiv>
 8008df6:	e783      	b.n	8008d00 <_strtod_l+0x3d0>
 8008df8:	4b32      	ldr	r3, [pc, #200]	@ (8008ec4 <_strtod_l+0x594>)
 8008dfa:	9308      	str	r3, [sp, #32]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	1124      	asrs	r4, r4, #4
 8008e00:	4650      	mov	r0, sl
 8008e02:	4659      	mov	r1, fp
 8008e04:	461e      	mov	r6, r3
 8008e06:	2c01      	cmp	r4, #1
 8008e08:	dc21      	bgt.n	8008e4e <_strtod_l+0x51e>
 8008e0a:	b10b      	cbz	r3, 8008e10 <_strtod_l+0x4e0>
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	468b      	mov	fp, r1
 8008e10:	492c      	ldr	r1, [pc, #176]	@ (8008ec4 <_strtod_l+0x594>)
 8008e12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e1a:	4652      	mov	r2, sl
 8008e1c:	465b      	mov	r3, fp
 8008e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e22:	f7f7 fbe9 	bl	80005f8 <__aeabi_dmul>
 8008e26:	4b28      	ldr	r3, [pc, #160]	@ (8008ec8 <_strtod_l+0x598>)
 8008e28:	460a      	mov	r2, r1
 8008e2a:	400b      	ands	r3, r1
 8008e2c:	4927      	ldr	r1, [pc, #156]	@ (8008ecc <_strtod_l+0x59c>)
 8008e2e:	428b      	cmp	r3, r1
 8008e30:	4682      	mov	sl, r0
 8008e32:	d898      	bhi.n	8008d66 <_strtod_l+0x436>
 8008e34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf86      	itte	hi
 8008e3c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008ed0 <_strtod_l+0x5a0>
 8008e40:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9308      	str	r3, [sp, #32]
 8008e4c:	e07a      	b.n	8008f44 <_strtod_l+0x614>
 8008e4e:	07e2      	lsls	r2, r4, #31
 8008e50:	d505      	bpl.n	8008e5e <_strtod_l+0x52e>
 8008e52:	9b08      	ldr	r3, [sp, #32]
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fbce 	bl	80005f8 <__aeabi_dmul>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	9a08      	ldr	r2, [sp, #32]
 8008e60:	3208      	adds	r2, #8
 8008e62:	3601      	adds	r6, #1
 8008e64:	1064      	asrs	r4, r4, #1
 8008e66:	9208      	str	r2, [sp, #32]
 8008e68:	e7cd      	b.n	8008e06 <_strtod_l+0x4d6>
 8008e6a:	d0ed      	beq.n	8008e48 <_strtod_l+0x518>
 8008e6c:	4264      	negs	r4, r4
 8008e6e:	f014 020f 	ands.w	r2, r4, #15
 8008e72:	d00a      	beq.n	8008e8a <_strtod_l+0x55a>
 8008e74:	4b12      	ldr	r3, [pc, #72]	@ (8008ec0 <_strtod_l+0x590>)
 8008e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fce3 	bl	800084c <__aeabi_ddiv>
 8008e86:	4682      	mov	sl, r0
 8008e88:	468b      	mov	fp, r1
 8008e8a:	1124      	asrs	r4, r4, #4
 8008e8c:	d0dc      	beq.n	8008e48 <_strtod_l+0x518>
 8008e8e:	2c1f      	cmp	r4, #31
 8008e90:	dd20      	ble.n	8008ed4 <_strtod_l+0x5a4>
 8008e92:	2400      	movs	r4, #0
 8008e94:	46a0      	mov	r8, r4
 8008e96:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e98:	46a1      	mov	r9, r4
 8008e9a:	9a05      	ldr	r2, [sp, #20]
 8008e9c:	2322      	movs	r3, #34	@ 0x22
 8008e9e:	f04f 0a00 	mov.w	sl, #0
 8008ea2:	f04f 0b00 	mov.w	fp, #0
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	e768      	b.n	8008d7c <_strtod_l+0x44c>
 8008eaa:	bf00      	nop
 8008eac:	0800b61d 	.word	0x0800b61d
 8008eb0:	0800b8cc 	.word	0x0800b8cc
 8008eb4:	0800b615 	.word	0x0800b615
 8008eb8:	0800b6f9 	.word	0x0800b6f9
 8008ebc:	0800b6f5 	.word	0x0800b6f5
 8008ec0:	0800b800 	.word	0x0800b800
 8008ec4:	0800b7d8 	.word	0x0800b7d8
 8008ec8:	7ff00000 	.word	0x7ff00000
 8008ecc:	7ca00000 	.word	0x7ca00000
 8008ed0:	7fefffff 	.word	0x7fefffff
 8008ed4:	f014 0310 	ands.w	r3, r4, #16
 8008ed8:	bf18      	it	ne
 8008eda:	236a      	movne	r3, #106	@ 0x6a
 8008edc:	4ea9      	ldr	r6, [pc, #676]	@ (8009184 <_strtod_l+0x854>)
 8008ede:	9308      	str	r3, [sp, #32]
 8008ee0:	4650      	mov	r0, sl
 8008ee2:	4659      	mov	r1, fp
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	07e2      	lsls	r2, r4, #31
 8008ee8:	d504      	bpl.n	8008ef4 <_strtod_l+0x5c4>
 8008eea:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008eee:	f7f7 fb83 	bl	80005f8 <__aeabi_dmul>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	1064      	asrs	r4, r4, #1
 8008ef6:	f106 0608 	add.w	r6, r6, #8
 8008efa:	d1f4      	bne.n	8008ee6 <_strtod_l+0x5b6>
 8008efc:	b10b      	cbz	r3, 8008f02 <_strtod_l+0x5d2>
 8008efe:	4682      	mov	sl, r0
 8008f00:	468b      	mov	fp, r1
 8008f02:	9b08      	ldr	r3, [sp, #32]
 8008f04:	b1b3      	cbz	r3, 8008f34 <_strtod_l+0x604>
 8008f06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	4659      	mov	r1, fp
 8008f12:	dd0f      	ble.n	8008f34 <_strtod_l+0x604>
 8008f14:	2b1f      	cmp	r3, #31
 8008f16:	dd55      	ble.n	8008fc4 <_strtod_l+0x694>
 8008f18:	2b34      	cmp	r3, #52	@ 0x34
 8008f1a:	bfde      	ittt	le
 8008f1c:	f04f 33ff 	movle.w	r3, #4294967295
 8008f20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f24:	4093      	lslle	r3, r2
 8008f26:	f04f 0a00 	mov.w	sl, #0
 8008f2a:	bfcc      	ite	gt
 8008f2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f30:	ea03 0b01 	andle.w	fp, r3, r1
 8008f34:	2200      	movs	r2, #0
 8008f36:	2300      	movs	r3, #0
 8008f38:	4650      	mov	r0, sl
 8008f3a:	4659      	mov	r1, fp
 8008f3c:	f7f7 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d1a6      	bne.n	8008e92 <_strtod_l+0x562>
 8008f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f4a:	9805      	ldr	r0, [sp, #20]
 8008f4c:	462b      	mov	r3, r5
 8008f4e:	463a      	mov	r2, r7
 8008f50:	f7ff f8c6 	bl	80080e0 <__s2b>
 8008f54:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f56:	2800      	cmp	r0, #0
 8008f58:	f43f af05 	beq.w	8008d66 <_strtod_l+0x436>
 8008f5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f5e:	2a00      	cmp	r2, #0
 8008f60:	eba9 0308 	sub.w	r3, r9, r8
 8008f64:	bfa8      	it	ge
 8008f66:	2300      	movge	r3, #0
 8008f68:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f6a:	2400      	movs	r4, #0
 8008f6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f70:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f72:	46a0      	mov	r8, r4
 8008f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f76:	9805      	ldr	r0, [sp, #20]
 8008f78:	6859      	ldr	r1, [r3, #4]
 8008f7a:	f7ff f809 	bl	8007f90 <_Balloc>
 8008f7e:	4681      	mov	r9, r0
 8008f80:	2800      	cmp	r0, #0
 8008f82:	f43f aef4 	beq.w	8008d6e <_strtod_l+0x43e>
 8008f86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f88:	691a      	ldr	r2, [r3, #16]
 8008f8a:	3202      	adds	r2, #2
 8008f8c:	f103 010c 	add.w	r1, r3, #12
 8008f90:	0092      	lsls	r2, r2, #2
 8008f92:	300c      	adds	r0, #12
 8008f94:	f000 fd84 	bl	8009aa0 <memcpy>
 8008f98:	ec4b ab10 	vmov	d0, sl, fp
 8008f9c:	9805      	ldr	r0, [sp, #20]
 8008f9e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008fa0:	a91b      	add	r1, sp, #108	@ 0x6c
 8008fa2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008fa6:	f7ff fbd7 	bl	8008758 <__d2b>
 8008faa:	901a      	str	r0, [sp, #104]	@ 0x68
 8008fac:	2800      	cmp	r0, #0
 8008fae:	f43f aede 	beq.w	8008d6e <_strtod_l+0x43e>
 8008fb2:	9805      	ldr	r0, [sp, #20]
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	f7ff f929 	bl	800820c <__i2b>
 8008fba:	4680      	mov	r8, r0
 8008fbc:	b948      	cbnz	r0, 8008fd2 <_strtod_l+0x6a2>
 8008fbe:	f04f 0800 	mov.w	r8, #0
 8008fc2:	e6d4      	b.n	8008d6e <_strtod_l+0x43e>
 8008fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fcc:	ea03 0a0a 	and.w	sl, r3, sl
 8008fd0:	e7b0      	b.n	8008f34 <_strtod_l+0x604>
 8008fd2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008fd4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	bfab      	itete	ge
 8008fda:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008fdc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008fde:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008fe0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008fe2:	bfac      	ite	ge
 8008fe4:	18ef      	addge	r7, r5, r3
 8008fe6:	1b5e      	sublt	r6, r3, r5
 8008fe8:	9b08      	ldr	r3, [sp, #32]
 8008fea:	1aed      	subs	r5, r5, r3
 8008fec:	4415      	add	r5, r2
 8008fee:	4b66      	ldr	r3, [pc, #408]	@ (8009188 <_strtod_l+0x858>)
 8008ff0:	3d01      	subs	r5, #1
 8008ff2:	429d      	cmp	r5, r3
 8008ff4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008ff8:	da50      	bge.n	800909c <_strtod_l+0x76c>
 8008ffa:	1b5b      	subs	r3, r3, r5
 8008ffc:	2b1f      	cmp	r3, #31
 8008ffe:	eba2 0203 	sub.w	r2, r2, r3
 8009002:	f04f 0101 	mov.w	r1, #1
 8009006:	dc3d      	bgt.n	8009084 <_strtod_l+0x754>
 8009008:	fa01 f303 	lsl.w	r3, r1, r3
 800900c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800900e:	2300      	movs	r3, #0
 8009010:	9310      	str	r3, [sp, #64]	@ 0x40
 8009012:	18bd      	adds	r5, r7, r2
 8009014:	9b08      	ldr	r3, [sp, #32]
 8009016:	42af      	cmp	r7, r5
 8009018:	4416      	add	r6, r2
 800901a:	441e      	add	r6, r3
 800901c:	463b      	mov	r3, r7
 800901e:	bfa8      	it	ge
 8009020:	462b      	movge	r3, r5
 8009022:	42b3      	cmp	r3, r6
 8009024:	bfa8      	it	ge
 8009026:	4633      	movge	r3, r6
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfc2      	ittt	gt
 800902c:	1aed      	subgt	r5, r5, r3
 800902e:	1af6      	subgt	r6, r6, r3
 8009030:	1aff      	subgt	r7, r7, r3
 8009032:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009034:	2b00      	cmp	r3, #0
 8009036:	dd16      	ble.n	8009066 <_strtod_l+0x736>
 8009038:	4641      	mov	r1, r8
 800903a:	9805      	ldr	r0, [sp, #20]
 800903c:	461a      	mov	r2, r3
 800903e:	f7ff f9a5 	bl	800838c <__pow5mult>
 8009042:	4680      	mov	r8, r0
 8009044:	2800      	cmp	r0, #0
 8009046:	d0ba      	beq.n	8008fbe <_strtod_l+0x68e>
 8009048:	4601      	mov	r1, r0
 800904a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800904c:	9805      	ldr	r0, [sp, #20]
 800904e:	f7ff f8f3 	bl	8008238 <__multiply>
 8009052:	900e      	str	r0, [sp, #56]	@ 0x38
 8009054:	2800      	cmp	r0, #0
 8009056:	f43f ae8a 	beq.w	8008d6e <_strtod_l+0x43e>
 800905a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800905c:	9805      	ldr	r0, [sp, #20]
 800905e:	f7fe ffd7 	bl	8008010 <_Bfree>
 8009062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009064:	931a      	str	r3, [sp, #104]	@ 0x68
 8009066:	2d00      	cmp	r5, #0
 8009068:	dc1d      	bgt.n	80090a6 <_strtod_l+0x776>
 800906a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	dd23      	ble.n	80090b8 <_strtod_l+0x788>
 8009070:	4649      	mov	r1, r9
 8009072:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009074:	9805      	ldr	r0, [sp, #20]
 8009076:	f7ff f989 	bl	800838c <__pow5mult>
 800907a:	4681      	mov	r9, r0
 800907c:	b9e0      	cbnz	r0, 80090b8 <_strtod_l+0x788>
 800907e:	f04f 0900 	mov.w	r9, #0
 8009082:	e674      	b.n	8008d6e <_strtod_l+0x43e>
 8009084:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009088:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800908c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009090:	35e2      	adds	r5, #226	@ 0xe2
 8009092:	fa01 f305 	lsl.w	r3, r1, r5
 8009096:	9310      	str	r3, [sp, #64]	@ 0x40
 8009098:	9113      	str	r1, [sp, #76]	@ 0x4c
 800909a:	e7ba      	b.n	8009012 <_strtod_l+0x6e2>
 800909c:	2300      	movs	r3, #0
 800909e:	9310      	str	r3, [sp, #64]	@ 0x40
 80090a0:	2301      	movs	r3, #1
 80090a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090a4:	e7b5      	b.n	8009012 <_strtod_l+0x6e2>
 80090a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090a8:	9805      	ldr	r0, [sp, #20]
 80090aa:	462a      	mov	r2, r5
 80090ac:	f7ff f9c8 	bl	8008440 <__lshift>
 80090b0:	901a      	str	r0, [sp, #104]	@ 0x68
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d1d9      	bne.n	800906a <_strtod_l+0x73a>
 80090b6:	e65a      	b.n	8008d6e <_strtod_l+0x43e>
 80090b8:	2e00      	cmp	r6, #0
 80090ba:	dd07      	ble.n	80090cc <_strtod_l+0x79c>
 80090bc:	4649      	mov	r1, r9
 80090be:	9805      	ldr	r0, [sp, #20]
 80090c0:	4632      	mov	r2, r6
 80090c2:	f7ff f9bd 	bl	8008440 <__lshift>
 80090c6:	4681      	mov	r9, r0
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d0d8      	beq.n	800907e <_strtod_l+0x74e>
 80090cc:	2f00      	cmp	r7, #0
 80090ce:	dd08      	ble.n	80090e2 <_strtod_l+0x7b2>
 80090d0:	4641      	mov	r1, r8
 80090d2:	9805      	ldr	r0, [sp, #20]
 80090d4:	463a      	mov	r2, r7
 80090d6:	f7ff f9b3 	bl	8008440 <__lshift>
 80090da:	4680      	mov	r8, r0
 80090dc:	2800      	cmp	r0, #0
 80090de:	f43f ae46 	beq.w	8008d6e <_strtod_l+0x43e>
 80090e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090e4:	9805      	ldr	r0, [sp, #20]
 80090e6:	464a      	mov	r2, r9
 80090e8:	f7ff fa32 	bl	8008550 <__mdiff>
 80090ec:	4604      	mov	r4, r0
 80090ee:	2800      	cmp	r0, #0
 80090f0:	f43f ae3d 	beq.w	8008d6e <_strtod_l+0x43e>
 80090f4:	68c3      	ldr	r3, [r0, #12]
 80090f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090f8:	2300      	movs	r3, #0
 80090fa:	60c3      	str	r3, [r0, #12]
 80090fc:	4641      	mov	r1, r8
 80090fe:	f7ff fa0b 	bl	8008518 <__mcmp>
 8009102:	2800      	cmp	r0, #0
 8009104:	da46      	bge.n	8009194 <_strtod_l+0x864>
 8009106:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009108:	ea53 030a 	orrs.w	r3, r3, sl
 800910c:	d16c      	bne.n	80091e8 <_strtod_l+0x8b8>
 800910e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009112:	2b00      	cmp	r3, #0
 8009114:	d168      	bne.n	80091e8 <_strtod_l+0x8b8>
 8009116:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800911a:	0d1b      	lsrs	r3, r3, #20
 800911c:	051b      	lsls	r3, r3, #20
 800911e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009122:	d961      	bls.n	80091e8 <_strtod_l+0x8b8>
 8009124:	6963      	ldr	r3, [r4, #20]
 8009126:	b913      	cbnz	r3, 800912e <_strtod_l+0x7fe>
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	2b01      	cmp	r3, #1
 800912c:	dd5c      	ble.n	80091e8 <_strtod_l+0x8b8>
 800912e:	4621      	mov	r1, r4
 8009130:	2201      	movs	r2, #1
 8009132:	9805      	ldr	r0, [sp, #20]
 8009134:	f7ff f984 	bl	8008440 <__lshift>
 8009138:	4641      	mov	r1, r8
 800913a:	4604      	mov	r4, r0
 800913c:	f7ff f9ec 	bl	8008518 <__mcmp>
 8009140:	2800      	cmp	r0, #0
 8009142:	dd51      	ble.n	80091e8 <_strtod_l+0x8b8>
 8009144:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009148:	9a08      	ldr	r2, [sp, #32]
 800914a:	0d1b      	lsrs	r3, r3, #20
 800914c:	051b      	lsls	r3, r3, #20
 800914e:	2a00      	cmp	r2, #0
 8009150:	d06b      	beq.n	800922a <_strtod_l+0x8fa>
 8009152:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009156:	d868      	bhi.n	800922a <_strtod_l+0x8fa>
 8009158:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800915c:	f67f ae9d 	bls.w	8008e9a <_strtod_l+0x56a>
 8009160:	4b0a      	ldr	r3, [pc, #40]	@ (800918c <_strtod_l+0x85c>)
 8009162:	4650      	mov	r0, sl
 8009164:	4659      	mov	r1, fp
 8009166:	2200      	movs	r2, #0
 8009168:	f7f7 fa46 	bl	80005f8 <__aeabi_dmul>
 800916c:	4b08      	ldr	r3, [pc, #32]	@ (8009190 <_strtod_l+0x860>)
 800916e:	400b      	ands	r3, r1
 8009170:	4682      	mov	sl, r0
 8009172:	468b      	mov	fp, r1
 8009174:	2b00      	cmp	r3, #0
 8009176:	f47f ae05 	bne.w	8008d84 <_strtod_l+0x454>
 800917a:	9a05      	ldr	r2, [sp, #20]
 800917c:	2322      	movs	r3, #34	@ 0x22
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	e600      	b.n	8008d84 <_strtod_l+0x454>
 8009182:	bf00      	nop
 8009184:	0800b8f8 	.word	0x0800b8f8
 8009188:	fffffc02 	.word	0xfffffc02
 800918c:	39500000 	.word	0x39500000
 8009190:	7ff00000 	.word	0x7ff00000
 8009194:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009198:	d165      	bne.n	8009266 <_strtod_l+0x936>
 800919a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800919c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091a0:	b35a      	cbz	r2, 80091fa <_strtod_l+0x8ca>
 80091a2:	4a9f      	ldr	r2, [pc, #636]	@ (8009420 <_strtod_l+0xaf0>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d12b      	bne.n	8009200 <_strtod_l+0x8d0>
 80091a8:	9b08      	ldr	r3, [sp, #32]
 80091aa:	4651      	mov	r1, sl
 80091ac:	b303      	cbz	r3, 80091f0 <_strtod_l+0x8c0>
 80091ae:	4b9d      	ldr	r3, [pc, #628]	@ (8009424 <_strtod_l+0xaf4>)
 80091b0:	465a      	mov	r2, fp
 80091b2:	4013      	ands	r3, r2
 80091b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80091b8:	f04f 32ff 	mov.w	r2, #4294967295
 80091bc:	d81b      	bhi.n	80091f6 <_strtod_l+0x8c6>
 80091be:	0d1b      	lsrs	r3, r3, #20
 80091c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091c4:	fa02 f303 	lsl.w	r3, r2, r3
 80091c8:	4299      	cmp	r1, r3
 80091ca:	d119      	bne.n	8009200 <_strtod_l+0x8d0>
 80091cc:	4b96      	ldr	r3, [pc, #600]	@ (8009428 <_strtod_l+0xaf8>)
 80091ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d102      	bne.n	80091da <_strtod_l+0x8aa>
 80091d4:	3101      	adds	r1, #1
 80091d6:	f43f adca 	beq.w	8008d6e <_strtod_l+0x43e>
 80091da:	4b92      	ldr	r3, [pc, #584]	@ (8009424 <_strtod_l+0xaf4>)
 80091dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091de:	401a      	ands	r2, r3
 80091e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80091e4:	f04f 0a00 	mov.w	sl, #0
 80091e8:	9b08      	ldr	r3, [sp, #32]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1b8      	bne.n	8009160 <_strtod_l+0x830>
 80091ee:	e5c9      	b.n	8008d84 <_strtod_l+0x454>
 80091f0:	f04f 33ff 	mov.w	r3, #4294967295
 80091f4:	e7e8      	b.n	80091c8 <_strtod_l+0x898>
 80091f6:	4613      	mov	r3, r2
 80091f8:	e7e6      	b.n	80091c8 <_strtod_l+0x898>
 80091fa:	ea53 030a 	orrs.w	r3, r3, sl
 80091fe:	d0a1      	beq.n	8009144 <_strtod_l+0x814>
 8009200:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009202:	b1db      	cbz	r3, 800923c <_strtod_l+0x90c>
 8009204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009206:	4213      	tst	r3, r2
 8009208:	d0ee      	beq.n	80091e8 <_strtod_l+0x8b8>
 800920a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800920c:	9a08      	ldr	r2, [sp, #32]
 800920e:	4650      	mov	r0, sl
 8009210:	4659      	mov	r1, fp
 8009212:	b1bb      	cbz	r3, 8009244 <_strtod_l+0x914>
 8009214:	f7ff fb6e 	bl	80088f4 <sulp>
 8009218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800921c:	ec53 2b10 	vmov	r2, r3, d0
 8009220:	f7f7 f834 	bl	800028c <__adddf3>
 8009224:	4682      	mov	sl, r0
 8009226:	468b      	mov	fp, r1
 8009228:	e7de      	b.n	80091e8 <_strtod_l+0x8b8>
 800922a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800922e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009232:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009236:	f04f 3aff 	mov.w	sl, #4294967295
 800923a:	e7d5      	b.n	80091e8 <_strtod_l+0x8b8>
 800923c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800923e:	ea13 0f0a 	tst.w	r3, sl
 8009242:	e7e1      	b.n	8009208 <_strtod_l+0x8d8>
 8009244:	f7ff fb56 	bl	80088f4 <sulp>
 8009248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800924c:	ec53 2b10 	vmov	r2, r3, d0
 8009250:	f7f7 f81a 	bl	8000288 <__aeabi_dsub>
 8009254:	2200      	movs	r2, #0
 8009256:	2300      	movs	r3, #0
 8009258:	4682      	mov	sl, r0
 800925a:	468b      	mov	fp, r1
 800925c:	f7f7 fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 8009260:	2800      	cmp	r0, #0
 8009262:	d0c1      	beq.n	80091e8 <_strtod_l+0x8b8>
 8009264:	e619      	b.n	8008e9a <_strtod_l+0x56a>
 8009266:	4641      	mov	r1, r8
 8009268:	4620      	mov	r0, r4
 800926a:	f7ff facd 	bl	8008808 <__ratio>
 800926e:	ec57 6b10 	vmov	r6, r7, d0
 8009272:	2200      	movs	r2, #0
 8009274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009278:	4630      	mov	r0, r6
 800927a:	4639      	mov	r1, r7
 800927c:	f7f7 fc38 	bl	8000af0 <__aeabi_dcmple>
 8009280:	2800      	cmp	r0, #0
 8009282:	d06f      	beq.n	8009364 <_strtod_l+0xa34>
 8009284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009286:	2b00      	cmp	r3, #0
 8009288:	d17a      	bne.n	8009380 <_strtod_l+0xa50>
 800928a:	f1ba 0f00 	cmp.w	sl, #0
 800928e:	d158      	bne.n	8009342 <_strtod_l+0xa12>
 8009290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009292:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009296:	2b00      	cmp	r3, #0
 8009298:	d15a      	bne.n	8009350 <_strtod_l+0xa20>
 800929a:	4b64      	ldr	r3, [pc, #400]	@ (800942c <_strtod_l+0xafc>)
 800929c:	2200      	movs	r2, #0
 800929e:	4630      	mov	r0, r6
 80092a0:	4639      	mov	r1, r7
 80092a2:	f7f7 fc1b 	bl	8000adc <__aeabi_dcmplt>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d159      	bne.n	800935e <_strtod_l+0xa2e>
 80092aa:	4630      	mov	r0, r6
 80092ac:	4639      	mov	r1, r7
 80092ae:	4b60      	ldr	r3, [pc, #384]	@ (8009430 <_strtod_l+0xb00>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	f7f7 f9a1 	bl	80005f8 <__aeabi_dmul>
 80092b6:	4606      	mov	r6, r0
 80092b8:	460f      	mov	r7, r1
 80092ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80092be:	9606      	str	r6, [sp, #24]
 80092c0:	9307      	str	r3, [sp, #28]
 80092c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092c6:	4d57      	ldr	r5, [pc, #348]	@ (8009424 <_strtod_l+0xaf4>)
 80092c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80092cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ce:	401d      	ands	r5, r3
 80092d0:	4b58      	ldr	r3, [pc, #352]	@ (8009434 <_strtod_l+0xb04>)
 80092d2:	429d      	cmp	r5, r3
 80092d4:	f040 80b2 	bne.w	800943c <_strtod_l+0xb0c>
 80092d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80092de:	ec4b ab10 	vmov	d0, sl, fp
 80092e2:	f7ff f9c9 	bl	8008678 <__ulp>
 80092e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092ea:	ec51 0b10 	vmov	r0, r1, d0
 80092ee:	f7f7 f983 	bl	80005f8 <__aeabi_dmul>
 80092f2:	4652      	mov	r2, sl
 80092f4:	465b      	mov	r3, fp
 80092f6:	f7f6 ffc9 	bl	800028c <__adddf3>
 80092fa:	460b      	mov	r3, r1
 80092fc:	4949      	ldr	r1, [pc, #292]	@ (8009424 <_strtod_l+0xaf4>)
 80092fe:	4a4e      	ldr	r2, [pc, #312]	@ (8009438 <_strtod_l+0xb08>)
 8009300:	4019      	ands	r1, r3
 8009302:	4291      	cmp	r1, r2
 8009304:	4682      	mov	sl, r0
 8009306:	d942      	bls.n	800938e <_strtod_l+0xa5e>
 8009308:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800930a:	4b47      	ldr	r3, [pc, #284]	@ (8009428 <_strtod_l+0xaf8>)
 800930c:	429a      	cmp	r2, r3
 800930e:	d103      	bne.n	8009318 <_strtod_l+0x9e8>
 8009310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009312:	3301      	adds	r3, #1
 8009314:	f43f ad2b 	beq.w	8008d6e <_strtod_l+0x43e>
 8009318:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009428 <_strtod_l+0xaf8>
 800931c:	f04f 3aff 	mov.w	sl, #4294967295
 8009320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009322:	9805      	ldr	r0, [sp, #20]
 8009324:	f7fe fe74 	bl	8008010 <_Bfree>
 8009328:	9805      	ldr	r0, [sp, #20]
 800932a:	4649      	mov	r1, r9
 800932c:	f7fe fe70 	bl	8008010 <_Bfree>
 8009330:	9805      	ldr	r0, [sp, #20]
 8009332:	4641      	mov	r1, r8
 8009334:	f7fe fe6c 	bl	8008010 <_Bfree>
 8009338:	9805      	ldr	r0, [sp, #20]
 800933a:	4621      	mov	r1, r4
 800933c:	f7fe fe68 	bl	8008010 <_Bfree>
 8009340:	e618      	b.n	8008f74 <_strtod_l+0x644>
 8009342:	f1ba 0f01 	cmp.w	sl, #1
 8009346:	d103      	bne.n	8009350 <_strtod_l+0xa20>
 8009348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800934a:	2b00      	cmp	r3, #0
 800934c:	f43f ada5 	beq.w	8008e9a <_strtod_l+0x56a>
 8009350:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009400 <_strtod_l+0xad0>
 8009354:	4f35      	ldr	r7, [pc, #212]	@ (800942c <_strtod_l+0xafc>)
 8009356:	ed8d 7b06 	vstr	d7, [sp, #24]
 800935a:	2600      	movs	r6, #0
 800935c:	e7b1      	b.n	80092c2 <_strtod_l+0x992>
 800935e:	4f34      	ldr	r7, [pc, #208]	@ (8009430 <_strtod_l+0xb00>)
 8009360:	2600      	movs	r6, #0
 8009362:	e7aa      	b.n	80092ba <_strtod_l+0x98a>
 8009364:	4b32      	ldr	r3, [pc, #200]	@ (8009430 <_strtod_l+0xb00>)
 8009366:	4630      	mov	r0, r6
 8009368:	4639      	mov	r1, r7
 800936a:	2200      	movs	r2, #0
 800936c:	f7f7 f944 	bl	80005f8 <__aeabi_dmul>
 8009370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009372:	4606      	mov	r6, r0
 8009374:	460f      	mov	r7, r1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d09f      	beq.n	80092ba <_strtod_l+0x98a>
 800937a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800937e:	e7a0      	b.n	80092c2 <_strtod_l+0x992>
 8009380:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009408 <_strtod_l+0xad8>
 8009384:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009388:	ec57 6b17 	vmov	r6, r7, d7
 800938c:	e799      	b.n	80092c2 <_strtod_l+0x992>
 800938e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1c1      	bne.n	8009320 <_strtod_l+0x9f0>
 800939c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093a0:	0d1b      	lsrs	r3, r3, #20
 80093a2:	051b      	lsls	r3, r3, #20
 80093a4:	429d      	cmp	r5, r3
 80093a6:	d1bb      	bne.n	8009320 <_strtod_l+0x9f0>
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 fc84 	bl	8000cb8 <__aeabi_d2lz>
 80093b0:	f7f7 f8f4 	bl	800059c <__aeabi_l2d>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f6 ff64 	bl	8000288 <__aeabi_dsub>
 80093c0:	460b      	mov	r3, r1
 80093c2:	4602      	mov	r2, r0
 80093c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80093c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80093cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ce:	ea46 060a 	orr.w	r6, r6, sl
 80093d2:	431e      	orrs	r6, r3
 80093d4:	d06f      	beq.n	80094b6 <_strtod_l+0xb86>
 80093d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009410 <_strtod_l+0xae0>)
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	f7f7 fb7e 	bl	8000adc <__aeabi_dcmplt>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	f47f accf 	bne.w	8008d84 <_strtod_l+0x454>
 80093e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009418 <_strtod_l+0xae8>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093f0:	f7f7 fb92 	bl	8000b18 <__aeabi_dcmpgt>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d093      	beq.n	8009320 <_strtod_l+0x9f0>
 80093f8:	e4c4      	b.n	8008d84 <_strtod_l+0x454>
 80093fa:	bf00      	nop
 80093fc:	f3af 8000 	nop.w
 8009400:	00000000 	.word	0x00000000
 8009404:	bff00000 	.word	0xbff00000
 8009408:	00000000 	.word	0x00000000
 800940c:	3ff00000 	.word	0x3ff00000
 8009410:	94a03595 	.word	0x94a03595
 8009414:	3fdfffff 	.word	0x3fdfffff
 8009418:	35afe535 	.word	0x35afe535
 800941c:	3fe00000 	.word	0x3fe00000
 8009420:	000fffff 	.word	0x000fffff
 8009424:	7ff00000 	.word	0x7ff00000
 8009428:	7fefffff 	.word	0x7fefffff
 800942c:	3ff00000 	.word	0x3ff00000
 8009430:	3fe00000 	.word	0x3fe00000
 8009434:	7fe00000 	.word	0x7fe00000
 8009438:	7c9fffff 	.word	0x7c9fffff
 800943c:	9b08      	ldr	r3, [sp, #32]
 800943e:	b323      	cbz	r3, 800948a <_strtod_l+0xb5a>
 8009440:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009444:	d821      	bhi.n	800948a <_strtod_l+0xb5a>
 8009446:	a328      	add	r3, pc, #160	@ (adr r3, 80094e8 <_strtod_l+0xbb8>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	4630      	mov	r0, r6
 800944e:	4639      	mov	r1, r7
 8009450:	f7f7 fb4e 	bl	8000af0 <__aeabi_dcmple>
 8009454:	b1a0      	cbz	r0, 8009480 <_strtod_l+0xb50>
 8009456:	4639      	mov	r1, r7
 8009458:	4630      	mov	r0, r6
 800945a:	f7f7 fba5 	bl	8000ba8 <__aeabi_d2uiz>
 800945e:	2801      	cmp	r0, #1
 8009460:	bf38      	it	cc
 8009462:	2001      	movcc	r0, #1
 8009464:	f7f7 f84e 	bl	8000504 <__aeabi_ui2d>
 8009468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800946a:	4606      	mov	r6, r0
 800946c:	460f      	mov	r7, r1
 800946e:	b9fb      	cbnz	r3, 80094b0 <_strtod_l+0xb80>
 8009470:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009474:	9014      	str	r0, [sp, #80]	@ 0x50
 8009476:	9315      	str	r3, [sp, #84]	@ 0x54
 8009478:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800947c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009480:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009482:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009486:	1b5b      	subs	r3, r3, r5
 8009488:	9311      	str	r3, [sp, #68]	@ 0x44
 800948a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800948e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009492:	f7ff f8f1 	bl	8008678 <__ulp>
 8009496:	4650      	mov	r0, sl
 8009498:	ec53 2b10 	vmov	r2, r3, d0
 800949c:	4659      	mov	r1, fp
 800949e:	f7f7 f8ab 	bl	80005f8 <__aeabi_dmul>
 80094a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80094a6:	f7f6 fef1 	bl	800028c <__adddf3>
 80094aa:	4682      	mov	sl, r0
 80094ac:	468b      	mov	fp, r1
 80094ae:	e770      	b.n	8009392 <_strtod_l+0xa62>
 80094b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80094b4:	e7e0      	b.n	8009478 <_strtod_l+0xb48>
 80094b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80094f0 <_strtod_l+0xbc0>)
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	f7f7 fb0e 	bl	8000adc <__aeabi_dcmplt>
 80094c0:	e798      	b.n	80093f4 <_strtod_l+0xac4>
 80094c2:	2300      	movs	r3, #0
 80094c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80094c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	f7ff ba6d 	b.w	80089aa <_strtod_l+0x7a>
 80094d0:	2a65      	cmp	r2, #101	@ 0x65
 80094d2:	f43f ab66 	beq.w	8008ba2 <_strtod_l+0x272>
 80094d6:	2a45      	cmp	r2, #69	@ 0x45
 80094d8:	f43f ab63 	beq.w	8008ba2 <_strtod_l+0x272>
 80094dc:	2301      	movs	r3, #1
 80094de:	f7ff bb9e 	b.w	8008c1e <_strtod_l+0x2ee>
 80094e2:	bf00      	nop
 80094e4:	f3af 8000 	nop.w
 80094e8:	ffc00000 	.word	0xffc00000
 80094ec:	41dfffff 	.word	0x41dfffff
 80094f0:	94a03595 	.word	0x94a03595
 80094f4:	3fcfffff 	.word	0x3fcfffff

080094f8 <_strtod_r>:
 80094f8:	4b01      	ldr	r3, [pc, #4]	@ (8009500 <_strtod_r+0x8>)
 80094fa:	f7ff ba19 	b.w	8008930 <_strtod_l>
 80094fe:	bf00      	nop
 8009500:	20000070 	.word	0x20000070

08009504 <_strtol_l.constprop.0>:
 8009504:	2b24      	cmp	r3, #36	@ 0x24
 8009506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800950a:	4686      	mov	lr, r0
 800950c:	4690      	mov	r8, r2
 800950e:	d801      	bhi.n	8009514 <_strtol_l.constprop.0+0x10>
 8009510:	2b01      	cmp	r3, #1
 8009512:	d106      	bne.n	8009522 <_strtol_l.constprop.0+0x1e>
 8009514:	f7fd fd9e 	bl	8007054 <__errno>
 8009518:	2316      	movs	r3, #22
 800951a:	6003      	str	r3, [r0, #0]
 800951c:	2000      	movs	r0, #0
 800951e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009522:	4834      	ldr	r0, [pc, #208]	@ (80095f4 <_strtol_l.constprop.0+0xf0>)
 8009524:	460d      	mov	r5, r1
 8009526:	462a      	mov	r2, r5
 8009528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800952c:	5d06      	ldrb	r6, [r0, r4]
 800952e:	f016 0608 	ands.w	r6, r6, #8
 8009532:	d1f8      	bne.n	8009526 <_strtol_l.constprop.0+0x22>
 8009534:	2c2d      	cmp	r4, #45	@ 0x2d
 8009536:	d12d      	bne.n	8009594 <_strtol_l.constprop.0+0x90>
 8009538:	782c      	ldrb	r4, [r5, #0]
 800953a:	2601      	movs	r6, #1
 800953c:	1c95      	adds	r5, r2, #2
 800953e:	f033 0210 	bics.w	r2, r3, #16
 8009542:	d109      	bne.n	8009558 <_strtol_l.constprop.0+0x54>
 8009544:	2c30      	cmp	r4, #48	@ 0x30
 8009546:	d12a      	bne.n	800959e <_strtol_l.constprop.0+0x9a>
 8009548:	782a      	ldrb	r2, [r5, #0]
 800954a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800954e:	2a58      	cmp	r2, #88	@ 0x58
 8009550:	d125      	bne.n	800959e <_strtol_l.constprop.0+0x9a>
 8009552:	786c      	ldrb	r4, [r5, #1]
 8009554:	2310      	movs	r3, #16
 8009556:	3502      	adds	r5, #2
 8009558:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800955c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009560:	2200      	movs	r2, #0
 8009562:	fbbc f9f3 	udiv	r9, ip, r3
 8009566:	4610      	mov	r0, r2
 8009568:	fb03 ca19 	mls	sl, r3, r9, ip
 800956c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009570:	2f09      	cmp	r7, #9
 8009572:	d81b      	bhi.n	80095ac <_strtol_l.constprop.0+0xa8>
 8009574:	463c      	mov	r4, r7
 8009576:	42a3      	cmp	r3, r4
 8009578:	dd27      	ble.n	80095ca <_strtol_l.constprop.0+0xc6>
 800957a:	1c57      	adds	r7, r2, #1
 800957c:	d007      	beq.n	800958e <_strtol_l.constprop.0+0x8a>
 800957e:	4581      	cmp	r9, r0
 8009580:	d320      	bcc.n	80095c4 <_strtol_l.constprop.0+0xc0>
 8009582:	d101      	bne.n	8009588 <_strtol_l.constprop.0+0x84>
 8009584:	45a2      	cmp	sl, r4
 8009586:	db1d      	blt.n	80095c4 <_strtol_l.constprop.0+0xc0>
 8009588:	fb00 4003 	mla	r0, r0, r3, r4
 800958c:	2201      	movs	r2, #1
 800958e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009592:	e7eb      	b.n	800956c <_strtol_l.constprop.0+0x68>
 8009594:	2c2b      	cmp	r4, #43	@ 0x2b
 8009596:	bf04      	itt	eq
 8009598:	782c      	ldrbeq	r4, [r5, #0]
 800959a:	1c95      	addeq	r5, r2, #2
 800959c:	e7cf      	b.n	800953e <_strtol_l.constprop.0+0x3a>
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1da      	bne.n	8009558 <_strtol_l.constprop.0+0x54>
 80095a2:	2c30      	cmp	r4, #48	@ 0x30
 80095a4:	bf0c      	ite	eq
 80095a6:	2308      	moveq	r3, #8
 80095a8:	230a      	movne	r3, #10
 80095aa:	e7d5      	b.n	8009558 <_strtol_l.constprop.0+0x54>
 80095ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80095b0:	2f19      	cmp	r7, #25
 80095b2:	d801      	bhi.n	80095b8 <_strtol_l.constprop.0+0xb4>
 80095b4:	3c37      	subs	r4, #55	@ 0x37
 80095b6:	e7de      	b.n	8009576 <_strtol_l.constprop.0+0x72>
 80095b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80095bc:	2f19      	cmp	r7, #25
 80095be:	d804      	bhi.n	80095ca <_strtol_l.constprop.0+0xc6>
 80095c0:	3c57      	subs	r4, #87	@ 0x57
 80095c2:	e7d8      	b.n	8009576 <_strtol_l.constprop.0+0x72>
 80095c4:	f04f 32ff 	mov.w	r2, #4294967295
 80095c8:	e7e1      	b.n	800958e <_strtol_l.constprop.0+0x8a>
 80095ca:	1c53      	adds	r3, r2, #1
 80095cc:	d108      	bne.n	80095e0 <_strtol_l.constprop.0+0xdc>
 80095ce:	2322      	movs	r3, #34	@ 0x22
 80095d0:	f8ce 3000 	str.w	r3, [lr]
 80095d4:	4660      	mov	r0, ip
 80095d6:	f1b8 0f00 	cmp.w	r8, #0
 80095da:	d0a0      	beq.n	800951e <_strtol_l.constprop.0+0x1a>
 80095dc:	1e69      	subs	r1, r5, #1
 80095de:	e006      	b.n	80095ee <_strtol_l.constprop.0+0xea>
 80095e0:	b106      	cbz	r6, 80095e4 <_strtol_l.constprop.0+0xe0>
 80095e2:	4240      	negs	r0, r0
 80095e4:	f1b8 0f00 	cmp.w	r8, #0
 80095e8:	d099      	beq.n	800951e <_strtol_l.constprop.0+0x1a>
 80095ea:	2a00      	cmp	r2, #0
 80095ec:	d1f6      	bne.n	80095dc <_strtol_l.constprop.0+0xd8>
 80095ee:	f8c8 1000 	str.w	r1, [r8]
 80095f2:	e794      	b.n	800951e <_strtol_l.constprop.0+0x1a>
 80095f4:	0800b921 	.word	0x0800b921

080095f8 <_strtol_r>:
 80095f8:	f7ff bf84 	b.w	8009504 <_strtol_l.constprop.0>

080095fc <__ssputs_r>:
 80095fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009600:	688e      	ldr	r6, [r1, #8]
 8009602:	461f      	mov	r7, r3
 8009604:	42be      	cmp	r6, r7
 8009606:	680b      	ldr	r3, [r1, #0]
 8009608:	4682      	mov	sl, r0
 800960a:	460c      	mov	r4, r1
 800960c:	4690      	mov	r8, r2
 800960e:	d82d      	bhi.n	800966c <__ssputs_r+0x70>
 8009610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009614:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009618:	d026      	beq.n	8009668 <__ssputs_r+0x6c>
 800961a:	6965      	ldr	r5, [r4, #20]
 800961c:	6909      	ldr	r1, [r1, #16]
 800961e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009622:	eba3 0901 	sub.w	r9, r3, r1
 8009626:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800962a:	1c7b      	adds	r3, r7, #1
 800962c:	444b      	add	r3, r9
 800962e:	106d      	asrs	r5, r5, #1
 8009630:	429d      	cmp	r5, r3
 8009632:	bf38      	it	cc
 8009634:	461d      	movcc	r5, r3
 8009636:	0553      	lsls	r3, r2, #21
 8009638:	d527      	bpl.n	800968a <__ssputs_r+0x8e>
 800963a:	4629      	mov	r1, r5
 800963c:	f7fe fc1c 	bl	8007e78 <_malloc_r>
 8009640:	4606      	mov	r6, r0
 8009642:	b360      	cbz	r0, 800969e <__ssputs_r+0xa2>
 8009644:	6921      	ldr	r1, [r4, #16]
 8009646:	464a      	mov	r2, r9
 8009648:	f000 fa2a 	bl	8009aa0 <memcpy>
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009656:	81a3      	strh	r3, [r4, #12]
 8009658:	6126      	str	r6, [r4, #16]
 800965a:	6165      	str	r5, [r4, #20]
 800965c:	444e      	add	r6, r9
 800965e:	eba5 0509 	sub.w	r5, r5, r9
 8009662:	6026      	str	r6, [r4, #0]
 8009664:	60a5      	str	r5, [r4, #8]
 8009666:	463e      	mov	r6, r7
 8009668:	42be      	cmp	r6, r7
 800966a:	d900      	bls.n	800966e <__ssputs_r+0x72>
 800966c:	463e      	mov	r6, r7
 800966e:	6820      	ldr	r0, [r4, #0]
 8009670:	4632      	mov	r2, r6
 8009672:	4641      	mov	r1, r8
 8009674:	f000 f9d8 	bl	8009a28 <memmove>
 8009678:	68a3      	ldr	r3, [r4, #8]
 800967a:	1b9b      	subs	r3, r3, r6
 800967c:	60a3      	str	r3, [r4, #8]
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	4433      	add	r3, r6
 8009682:	6023      	str	r3, [r4, #0]
 8009684:	2000      	movs	r0, #0
 8009686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968a:	462a      	mov	r2, r5
 800968c:	f000 fd85 	bl	800a19a <_realloc_r>
 8009690:	4606      	mov	r6, r0
 8009692:	2800      	cmp	r0, #0
 8009694:	d1e0      	bne.n	8009658 <__ssputs_r+0x5c>
 8009696:	6921      	ldr	r1, [r4, #16]
 8009698:	4650      	mov	r0, sl
 800969a:	f7fe fb79 	bl	8007d90 <_free_r>
 800969e:	230c      	movs	r3, #12
 80096a0:	f8ca 3000 	str.w	r3, [sl]
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295
 80096b0:	e7e9      	b.n	8009686 <__ssputs_r+0x8a>
	...

080096b4 <_svfiprintf_r>:
 80096b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	4698      	mov	r8, r3
 80096ba:	898b      	ldrh	r3, [r1, #12]
 80096bc:	061b      	lsls	r3, r3, #24
 80096be:	b09d      	sub	sp, #116	@ 0x74
 80096c0:	4607      	mov	r7, r0
 80096c2:	460d      	mov	r5, r1
 80096c4:	4614      	mov	r4, r2
 80096c6:	d510      	bpl.n	80096ea <_svfiprintf_r+0x36>
 80096c8:	690b      	ldr	r3, [r1, #16]
 80096ca:	b973      	cbnz	r3, 80096ea <_svfiprintf_r+0x36>
 80096cc:	2140      	movs	r1, #64	@ 0x40
 80096ce:	f7fe fbd3 	bl	8007e78 <_malloc_r>
 80096d2:	6028      	str	r0, [r5, #0]
 80096d4:	6128      	str	r0, [r5, #16]
 80096d6:	b930      	cbnz	r0, 80096e6 <_svfiprintf_r+0x32>
 80096d8:	230c      	movs	r3, #12
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	f04f 30ff 	mov.w	r0, #4294967295
 80096e0:	b01d      	add	sp, #116	@ 0x74
 80096e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e6:	2340      	movs	r3, #64	@ 0x40
 80096e8:	616b      	str	r3, [r5, #20]
 80096ea:	2300      	movs	r3, #0
 80096ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ee:	2320      	movs	r3, #32
 80096f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f8:	2330      	movs	r3, #48	@ 0x30
 80096fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009898 <_svfiprintf_r+0x1e4>
 80096fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009702:	f04f 0901 	mov.w	r9, #1
 8009706:	4623      	mov	r3, r4
 8009708:	469a      	mov	sl, r3
 800970a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800970e:	b10a      	cbz	r2, 8009714 <_svfiprintf_r+0x60>
 8009710:	2a25      	cmp	r2, #37	@ 0x25
 8009712:	d1f9      	bne.n	8009708 <_svfiprintf_r+0x54>
 8009714:	ebba 0b04 	subs.w	fp, sl, r4
 8009718:	d00b      	beq.n	8009732 <_svfiprintf_r+0x7e>
 800971a:	465b      	mov	r3, fp
 800971c:	4622      	mov	r2, r4
 800971e:	4629      	mov	r1, r5
 8009720:	4638      	mov	r0, r7
 8009722:	f7ff ff6b 	bl	80095fc <__ssputs_r>
 8009726:	3001      	adds	r0, #1
 8009728:	f000 80a7 	beq.w	800987a <_svfiprintf_r+0x1c6>
 800972c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800972e:	445a      	add	r2, fp
 8009730:	9209      	str	r2, [sp, #36]	@ 0x24
 8009732:	f89a 3000 	ldrb.w	r3, [sl]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 809f 	beq.w	800987a <_svfiprintf_r+0x1c6>
 800973c:	2300      	movs	r3, #0
 800973e:	f04f 32ff 	mov.w	r2, #4294967295
 8009742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009746:	f10a 0a01 	add.w	sl, sl, #1
 800974a:	9304      	str	r3, [sp, #16]
 800974c:	9307      	str	r3, [sp, #28]
 800974e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009752:	931a      	str	r3, [sp, #104]	@ 0x68
 8009754:	4654      	mov	r4, sl
 8009756:	2205      	movs	r2, #5
 8009758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975c:	484e      	ldr	r0, [pc, #312]	@ (8009898 <_svfiprintf_r+0x1e4>)
 800975e:	f7f6 fd37 	bl	80001d0 <memchr>
 8009762:	9a04      	ldr	r2, [sp, #16]
 8009764:	b9d8      	cbnz	r0, 800979e <_svfiprintf_r+0xea>
 8009766:	06d0      	lsls	r0, r2, #27
 8009768:	bf44      	itt	mi
 800976a:	2320      	movmi	r3, #32
 800976c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009770:	0711      	lsls	r1, r2, #28
 8009772:	bf44      	itt	mi
 8009774:	232b      	movmi	r3, #43	@ 0x2b
 8009776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800977a:	f89a 3000 	ldrb.w	r3, [sl]
 800977e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009780:	d015      	beq.n	80097ae <_svfiprintf_r+0xfa>
 8009782:	9a07      	ldr	r2, [sp, #28]
 8009784:	4654      	mov	r4, sl
 8009786:	2000      	movs	r0, #0
 8009788:	f04f 0c0a 	mov.w	ip, #10
 800978c:	4621      	mov	r1, r4
 800978e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009792:	3b30      	subs	r3, #48	@ 0x30
 8009794:	2b09      	cmp	r3, #9
 8009796:	d94b      	bls.n	8009830 <_svfiprintf_r+0x17c>
 8009798:	b1b0      	cbz	r0, 80097c8 <_svfiprintf_r+0x114>
 800979a:	9207      	str	r2, [sp, #28]
 800979c:	e014      	b.n	80097c8 <_svfiprintf_r+0x114>
 800979e:	eba0 0308 	sub.w	r3, r0, r8
 80097a2:	fa09 f303 	lsl.w	r3, r9, r3
 80097a6:	4313      	orrs	r3, r2
 80097a8:	9304      	str	r3, [sp, #16]
 80097aa:	46a2      	mov	sl, r4
 80097ac:	e7d2      	b.n	8009754 <_svfiprintf_r+0xa0>
 80097ae:	9b03      	ldr	r3, [sp, #12]
 80097b0:	1d19      	adds	r1, r3, #4
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	9103      	str	r1, [sp, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	bfbb      	ittet	lt
 80097ba:	425b      	neglt	r3, r3
 80097bc:	f042 0202 	orrlt.w	r2, r2, #2
 80097c0:	9307      	strge	r3, [sp, #28]
 80097c2:	9307      	strlt	r3, [sp, #28]
 80097c4:	bfb8      	it	lt
 80097c6:	9204      	strlt	r2, [sp, #16]
 80097c8:	7823      	ldrb	r3, [r4, #0]
 80097ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80097cc:	d10a      	bne.n	80097e4 <_svfiprintf_r+0x130>
 80097ce:	7863      	ldrb	r3, [r4, #1]
 80097d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80097d2:	d132      	bne.n	800983a <_svfiprintf_r+0x186>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	1d1a      	adds	r2, r3, #4
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	9203      	str	r2, [sp, #12]
 80097dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097e0:	3402      	adds	r4, #2
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098a8 <_svfiprintf_r+0x1f4>
 80097e8:	7821      	ldrb	r1, [r4, #0]
 80097ea:	2203      	movs	r2, #3
 80097ec:	4650      	mov	r0, sl
 80097ee:	f7f6 fcef 	bl	80001d0 <memchr>
 80097f2:	b138      	cbz	r0, 8009804 <_svfiprintf_r+0x150>
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	eba0 000a 	sub.w	r0, r0, sl
 80097fa:	2240      	movs	r2, #64	@ 0x40
 80097fc:	4082      	lsls	r2, r0
 80097fe:	4313      	orrs	r3, r2
 8009800:	3401      	adds	r4, #1
 8009802:	9304      	str	r3, [sp, #16]
 8009804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009808:	4824      	ldr	r0, [pc, #144]	@ (800989c <_svfiprintf_r+0x1e8>)
 800980a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800980e:	2206      	movs	r2, #6
 8009810:	f7f6 fcde 	bl	80001d0 <memchr>
 8009814:	2800      	cmp	r0, #0
 8009816:	d036      	beq.n	8009886 <_svfiprintf_r+0x1d2>
 8009818:	4b21      	ldr	r3, [pc, #132]	@ (80098a0 <_svfiprintf_r+0x1ec>)
 800981a:	bb1b      	cbnz	r3, 8009864 <_svfiprintf_r+0x1b0>
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	3307      	adds	r3, #7
 8009820:	f023 0307 	bic.w	r3, r3, #7
 8009824:	3308      	adds	r3, #8
 8009826:	9303      	str	r3, [sp, #12]
 8009828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800982a:	4433      	add	r3, r6
 800982c:	9309      	str	r3, [sp, #36]	@ 0x24
 800982e:	e76a      	b.n	8009706 <_svfiprintf_r+0x52>
 8009830:	fb0c 3202 	mla	r2, ip, r2, r3
 8009834:	460c      	mov	r4, r1
 8009836:	2001      	movs	r0, #1
 8009838:	e7a8      	b.n	800978c <_svfiprintf_r+0xd8>
 800983a:	2300      	movs	r3, #0
 800983c:	3401      	adds	r4, #1
 800983e:	9305      	str	r3, [sp, #20]
 8009840:	4619      	mov	r1, r3
 8009842:	f04f 0c0a 	mov.w	ip, #10
 8009846:	4620      	mov	r0, r4
 8009848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800984c:	3a30      	subs	r2, #48	@ 0x30
 800984e:	2a09      	cmp	r2, #9
 8009850:	d903      	bls.n	800985a <_svfiprintf_r+0x1a6>
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0c6      	beq.n	80097e4 <_svfiprintf_r+0x130>
 8009856:	9105      	str	r1, [sp, #20]
 8009858:	e7c4      	b.n	80097e4 <_svfiprintf_r+0x130>
 800985a:	fb0c 2101 	mla	r1, ip, r1, r2
 800985e:	4604      	mov	r4, r0
 8009860:	2301      	movs	r3, #1
 8009862:	e7f0      	b.n	8009846 <_svfiprintf_r+0x192>
 8009864:	ab03      	add	r3, sp, #12
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	462a      	mov	r2, r5
 800986a:	4b0e      	ldr	r3, [pc, #56]	@ (80098a4 <_svfiprintf_r+0x1f0>)
 800986c:	a904      	add	r1, sp, #16
 800986e:	4638      	mov	r0, r7
 8009870:	f7fc fc1c 	bl	80060ac <_printf_float>
 8009874:	1c42      	adds	r2, r0, #1
 8009876:	4606      	mov	r6, r0
 8009878:	d1d6      	bne.n	8009828 <_svfiprintf_r+0x174>
 800987a:	89ab      	ldrh	r3, [r5, #12]
 800987c:	065b      	lsls	r3, r3, #25
 800987e:	f53f af2d 	bmi.w	80096dc <_svfiprintf_r+0x28>
 8009882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009884:	e72c      	b.n	80096e0 <_svfiprintf_r+0x2c>
 8009886:	ab03      	add	r3, sp, #12
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	462a      	mov	r2, r5
 800988c:	4b05      	ldr	r3, [pc, #20]	@ (80098a4 <_svfiprintf_r+0x1f0>)
 800988e:	a904      	add	r1, sp, #16
 8009890:	4638      	mov	r0, r7
 8009892:	f7fc fea3 	bl	80065dc <_printf_i>
 8009896:	e7ed      	b.n	8009874 <_svfiprintf_r+0x1c0>
 8009898:	0800ba21 	.word	0x0800ba21
 800989c:	0800ba2b 	.word	0x0800ba2b
 80098a0:	080060ad 	.word	0x080060ad
 80098a4:	080095fd 	.word	0x080095fd
 80098a8:	0800ba27 	.word	0x0800ba27

080098ac <__sflush_r>:
 80098ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b4:	0716      	lsls	r6, r2, #28
 80098b6:	4605      	mov	r5, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	d454      	bmi.n	8009966 <__sflush_r+0xba>
 80098bc:	684b      	ldr	r3, [r1, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	dc02      	bgt.n	80098c8 <__sflush_r+0x1c>
 80098c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dd48      	ble.n	800995a <__sflush_r+0xae>
 80098c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	d045      	beq.n	800995a <__sflush_r+0xae>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098d4:	682f      	ldr	r7, [r5, #0]
 80098d6:	6a21      	ldr	r1, [r4, #32]
 80098d8:	602b      	str	r3, [r5, #0]
 80098da:	d030      	beq.n	800993e <__sflush_r+0x92>
 80098dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	0759      	lsls	r1, r3, #29
 80098e2:	d505      	bpl.n	80098f0 <__sflush_r+0x44>
 80098e4:	6863      	ldr	r3, [r4, #4]
 80098e6:	1ad2      	subs	r2, r2, r3
 80098e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098ea:	b10b      	cbz	r3, 80098f0 <__sflush_r+0x44>
 80098ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098ee:	1ad2      	subs	r2, r2, r3
 80098f0:	2300      	movs	r3, #0
 80098f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098f4:	6a21      	ldr	r1, [r4, #32]
 80098f6:	4628      	mov	r0, r5
 80098f8:	47b0      	blx	r6
 80098fa:	1c43      	adds	r3, r0, #1
 80098fc:	89a3      	ldrh	r3, [r4, #12]
 80098fe:	d106      	bne.n	800990e <__sflush_r+0x62>
 8009900:	6829      	ldr	r1, [r5, #0]
 8009902:	291d      	cmp	r1, #29
 8009904:	d82b      	bhi.n	800995e <__sflush_r+0xb2>
 8009906:	4a2a      	ldr	r2, [pc, #168]	@ (80099b0 <__sflush_r+0x104>)
 8009908:	410a      	asrs	r2, r1
 800990a:	07d6      	lsls	r6, r2, #31
 800990c:	d427      	bmi.n	800995e <__sflush_r+0xb2>
 800990e:	2200      	movs	r2, #0
 8009910:	6062      	str	r2, [r4, #4]
 8009912:	04d9      	lsls	r1, r3, #19
 8009914:	6922      	ldr	r2, [r4, #16]
 8009916:	6022      	str	r2, [r4, #0]
 8009918:	d504      	bpl.n	8009924 <__sflush_r+0x78>
 800991a:	1c42      	adds	r2, r0, #1
 800991c:	d101      	bne.n	8009922 <__sflush_r+0x76>
 800991e:	682b      	ldr	r3, [r5, #0]
 8009920:	b903      	cbnz	r3, 8009924 <__sflush_r+0x78>
 8009922:	6560      	str	r0, [r4, #84]	@ 0x54
 8009924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009926:	602f      	str	r7, [r5, #0]
 8009928:	b1b9      	cbz	r1, 800995a <__sflush_r+0xae>
 800992a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800992e:	4299      	cmp	r1, r3
 8009930:	d002      	beq.n	8009938 <__sflush_r+0x8c>
 8009932:	4628      	mov	r0, r5
 8009934:	f7fe fa2c 	bl	8007d90 <_free_r>
 8009938:	2300      	movs	r3, #0
 800993a:	6363      	str	r3, [r4, #52]	@ 0x34
 800993c:	e00d      	b.n	800995a <__sflush_r+0xae>
 800993e:	2301      	movs	r3, #1
 8009940:	4628      	mov	r0, r5
 8009942:	47b0      	blx	r6
 8009944:	4602      	mov	r2, r0
 8009946:	1c50      	adds	r0, r2, #1
 8009948:	d1c9      	bne.n	80098de <__sflush_r+0x32>
 800994a:	682b      	ldr	r3, [r5, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0c6      	beq.n	80098de <__sflush_r+0x32>
 8009950:	2b1d      	cmp	r3, #29
 8009952:	d001      	beq.n	8009958 <__sflush_r+0xac>
 8009954:	2b16      	cmp	r3, #22
 8009956:	d11e      	bne.n	8009996 <__sflush_r+0xea>
 8009958:	602f      	str	r7, [r5, #0]
 800995a:	2000      	movs	r0, #0
 800995c:	e022      	b.n	80099a4 <__sflush_r+0xf8>
 800995e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009962:	b21b      	sxth	r3, r3
 8009964:	e01b      	b.n	800999e <__sflush_r+0xf2>
 8009966:	690f      	ldr	r7, [r1, #16]
 8009968:	2f00      	cmp	r7, #0
 800996a:	d0f6      	beq.n	800995a <__sflush_r+0xae>
 800996c:	0793      	lsls	r3, r2, #30
 800996e:	680e      	ldr	r6, [r1, #0]
 8009970:	bf08      	it	eq
 8009972:	694b      	ldreq	r3, [r1, #20]
 8009974:	600f      	str	r7, [r1, #0]
 8009976:	bf18      	it	ne
 8009978:	2300      	movne	r3, #0
 800997a:	eba6 0807 	sub.w	r8, r6, r7
 800997e:	608b      	str	r3, [r1, #8]
 8009980:	f1b8 0f00 	cmp.w	r8, #0
 8009984:	dde9      	ble.n	800995a <__sflush_r+0xae>
 8009986:	6a21      	ldr	r1, [r4, #32]
 8009988:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800998a:	4643      	mov	r3, r8
 800998c:	463a      	mov	r2, r7
 800998e:	4628      	mov	r0, r5
 8009990:	47b0      	blx	r6
 8009992:	2800      	cmp	r0, #0
 8009994:	dc08      	bgt.n	80099a8 <__sflush_r+0xfc>
 8009996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800999e:	81a3      	strh	r3, [r4, #12]
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295
 80099a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a8:	4407      	add	r7, r0
 80099aa:	eba8 0800 	sub.w	r8, r8, r0
 80099ae:	e7e7      	b.n	8009980 <__sflush_r+0xd4>
 80099b0:	dfbffffe 	.word	0xdfbffffe

080099b4 <_fflush_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	690b      	ldr	r3, [r1, #16]
 80099b8:	4605      	mov	r5, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	b913      	cbnz	r3, 80099c4 <_fflush_r+0x10>
 80099be:	2500      	movs	r5, #0
 80099c0:	4628      	mov	r0, r5
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	b118      	cbz	r0, 80099ce <_fflush_r+0x1a>
 80099c6:	6a03      	ldr	r3, [r0, #32]
 80099c8:	b90b      	cbnz	r3, 80099ce <_fflush_r+0x1a>
 80099ca:	f7fd f9c7 	bl	8006d5c <__sinit>
 80099ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0f3      	beq.n	80099be <_fflush_r+0xa>
 80099d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099d8:	07d0      	lsls	r0, r2, #31
 80099da:	d404      	bmi.n	80099e6 <_fflush_r+0x32>
 80099dc:	0599      	lsls	r1, r3, #22
 80099de:	d402      	bmi.n	80099e6 <_fflush_r+0x32>
 80099e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099e2:	f7fd fb62 	bl	80070aa <__retarget_lock_acquire_recursive>
 80099e6:	4628      	mov	r0, r5
 80099e8:	4621      	mov	r1, r4
 80099ea:	f7ff ff5f 	bl	80098ac <__sflush_r>
 80099ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099f0:	07da      	lsls	r2, r3, #31
 80099f2:	4605      	mov	r5, r0
 80099f4:	d4e4      	bmi.n	80099c0 <_fflush_r+0xc>
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	059b      	lsls	r3, r3, #22
 80099fa:	d4e1      	bmi.n	80099c0 <_fflush_r+0xc>
 80099fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099fe:	f7fd fb55 	bl	80070ac <__retarget_lock_release_recursive>
 8009a02:	e7dd      	b.n	80099c0 <_fflush_r+0xc>

08009a04 <fiprintf>:
 8009a04:	b40e      	push	{r1, r2, r3}
 8009a06:	b503      	push	{r0, r1, lr}
 8009a08:	4601      	mov	r1, r0
 8009a0a:	ab03      	add	r3, sp, #12
 8009a0c:	4805      	ldr	r0, [pc, #20]	@ (8009a24 <fiprintf+0x20>)
 8009a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a12:	6800      	ldr	r0, [r0, #0]
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	f000 fc25 	bl	800a264 <_vfiprintf_r>
 8009a1a:	b002      	add	sp, #8
 8009a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a20:	b003      	add	sp, #12
 8009a22:	4770      	bx	lr
 8009a24:	20000020 	.word	0x20000020

08009a28 <memmove>:
 8009a28:	4288      	cmp	r0, r1
 8009a2a:	b510      	push	{r4, lr}
 8009a2c:	eb01 0402 	add.w	r4, r1, r2
 8009a30:	d902      	bls.n	8009a38 <memmove+0x10>
 8009a32:	4284      	cmp	r4, r0
 8009a34:	4623      	mov	r3, r4
 8009a36:	d807      	bhi.n	8009a48 <memmove+0x20>
 8009a38:	1e43      	subs	r3, r0, #1
 8009a3a:	42a1      	cmp	r1, r4
 8009a3c:	d008      	beq.n	8009a50 <memmove+0x28>
 8009a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a46:	e7f8      	b.n	8009a3a <memmove+0x12>
 8009a48:	4402      	add	r2, r0
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	428a      	cmp	r2, r1
 8009a4e:	d100      	bne.n	8009a52 <memmove+0x2a>
 8009a50:	bd10      	pop	{r4, pc}
 8009a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a5a:	e7f7      	b.n	8009a4c <memmove+0x24>

08009a5c <strncmp>:
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	b16a      	cbz	r2, 8009a7c <strncmp+0x20>
 8009a60:	3901      	subs	r1, #1
 8009a62:	1884      	adds	r4, r0, r2
 8009a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a68:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d103      	bne.n	8009a78 <strncmp+0x1c>
 8009a70:	42a0      	cmp	r0, r4
 8009a72:	d001      	beq.n	8009a78 <strncmp+0x1c>
 8009a74:	2a00      	cmp	r2, #0
 8009a76:	d1f5      	bne.n	8009a64 <strncmp+0x8>
 8009a78:	1ad0      	subs	r0, r2, r3
 8009a7a:	bd10      	pop	{r4, pc}
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	e7fc      	b.n	8009a7a <strncmp+0x1e>

08009a80 <_sbrk_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d06      	ldr	r5, [pc, #24]	@ (8009a9c <_sbrk_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4604      	mov	r4, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	f7f8 fd9a 	bl	80025c4 <_sbrk>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_sbrk_r+0x1a>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_sbrk_r+0x1a>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	200006d4 	.word	0x200006d4

08009aa0 <memcpy>:
 8009aa0:	440a      	add	r2, r1
 8009aa2:	4291      	cmp	r1, r2
 8009aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aa8:	d100      	bne.n	8009aac <memcpy+0xc>
 8009aaa:	4770      	bx	lr
 8009aac:	b510      	push	{r4, lr}
 8009aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ab6:	4291      	cmp	r1, r2
 8009ab8:	d1f9      	bne.n	8009aae <memcpy+0xe>
 8009aba:	bd10      	pop	{r4, pc}
 8009abc:	0000      	movs	r0, r0
	...

08009ac0 <nan>:
 8009ac0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009ac8 <nan+0x8>
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	00000000 	.word	0x00000000
 8009acc:	7ff80000 	.word	0x7ff80000

08009ad0 <abort>:
 8009ad0:	b508      	push	{r3, lr}
 8009ad2:	2006      	movs	r0, #6
 8009ad4:	f000 fd9a 	bl	800a60c <raise>
 8009ad8:	2001      	movs	r0, #1
 8009ada:	f7f8 fcfb 	bl	80024d4 <_exit>

08009ade <_calloc_r>:
 8009ade:	b570      	push	{r4, r5, r6, lr}
 8009ae0:	fba1 5402 	umull	r5, r4, r1, r2
 8009ae4:	b93c      	cbnz	r4, 8009af6 <_calloc_r+0x18>
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	f7fe f9c6 	bl	8007e78 <_malloc_r>
 8009aec:	4606      	mov	r6, r0
 8009aee:	b928      	cbnz	r0, 8009afc <_calloc_r+0x1e>
 8009af0:	2600      	movs	r6, #0
 8009af2:	4630      	mov	r0, r6
 8009af4:	bd70      	pop	{r4, r5, r6, pc}
 8009af6:	220c      	movs	r2, #12
 8009af8:	6002      	str	r2, [r0, #0]
 8009afa:	e7f9      	b.n	8009af0 <_calloc_r+0x12>
 8009afc:	462a      	mov	r2, r5
 8009afe:	4621      	mov	r1, r4
 8009b00:	f7fd f9f9 	bl	8006ef6 <memset>
 8009b04:	e7f5      	b.n	8009af2 <_calloc_r+0x14>

08009b06 <rshift>:
 8009b06:	6903      	ldr	r3, [r0, #16]
 8009b08:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b10:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b14:	f100 0414 	add.w	r4, r0, #20
 8009b18:	dd45      	ble.n	8009ba6 <rshift+0xa0>
 8009b1a:	f011 011f 	ands.w	r1, r1, #31
 8009b1e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b22:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b26:	d10c      	bne.n	8009b42 <rshift+0x3c>
 8009b28:	f100 0710 	add.w	r7, r0, #16
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	42b1      	cmp	r1, r6
 8009b30:	d334      	bcc.n	8009b9c <rshift+0x96>
 8009b32:	1a9b      	subs	r3, r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	1eea      	subs	r2, r5, #3
 8009b38:	4296      	cmp	r6, r2
 8009b3a:	bf38      	it	cc
 8009b3c:	2300      	movcc	r3, #0
 8009b3e:	4423      	add	r3, r4
 8009b40:	e015      	b.n	8009b6e <rshift+0x68>
 8009b42:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b46:	f1c1 0820 	rsb	r8, r1, #32
 8009b4a:	40cf      	lsrs	r7, r1
 8009b4c:	f105 0e04 	add.w	lr, r5, #4
 8009b50:	46a1      	mov	r9, r4
 8009b52:	4576      	cmp	r6, lr
 8009b54:	46f4      	mov	ip, lr
 8009b56:	d815      	bhi.n	8009b84 <rshift+0x7e>
 8009b58:	1a9a      	subs	r2, r3, r2
 8009b5a:	0092      	lsls	r2, r2, #2
 8009b5c:	3a04      	subs	r2, #4
 8009b5e:	3501      	adds	r5, #1
 8009b60:	42ae      	cmp	r6, r5
 8009b62:	bf38      	it	cc
 8009b64:	2200      	movcc	r2, #0
 8009b66:	18a3      	adds	r3, r4, r2
 8009b68:	50a7      	str	r7, [r4, r2]
 8009b6a:	b107      	cbz	r7, 8009b6e <rshift+0x68>
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	1b1a      	subs	r2, r3, r4
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b76:	bf08      	it	eq
 8009b78:	2300      	moveq	r3, #0
 8009b7a:	6102      	str	r2, [r0, #16]
 8009b7c:	bf08      	it	eq
 8009b7e:	6143      	streq	r3, [r0, #20]
 8009b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b84:	f8dc c000 	ldr.w	ip, [ip]
 8009b88:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b8c:	ea4c 0707 	orr.w	r7, ip, r7
 8009b90:	f849 7b04 	str.w	r7, [r9], #4
 8009b94:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b98:	40cf      	lsrs	r7, r1
 8009b9a:	e7da      	b.n	8009b52 <rshift+0x4c>
 8009b9c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ba0:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ba4:	e7c3      	b.n	8009b2e <rshift+0x28>
 8009ba6:	4623      	mov	r3, r4
 8009ba8:	e7e1      	b.n	8009b6e <rshift+0x68>

08009baa <__hexdig_fun>:
 8009baa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009bae:	2b09      	cmp	r3, #9
 8009bb0:	d802      	bhi.n	8009bb8 <__hexdig_fun+0xe>
 8009bb2:	3820      	subs	r0, #32
 8009bb4:	b2c0      	uxtb	r0, r0
 8009bb6:	4770      	bx	lr
 8009bb8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009bbc:	2b05      	cmp	r3, #5
 8009bbe:	d801      	bhi.n	8009bc4 <__hexdig_fun+0x1a>
 8009bc0:	3847      	subs	r0, #71	@ 0x47
 8009bc2:	e7f7      	b.n	8009bb4 <__hexdig_fun+0xa>
 8009bc4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009bc8:	2b05      	cmp	r3, #5
 8009bca:	d801      	bhi.n	8009bd0 <__hexdig_fun+0x26>
 8009bcc:	3827      	subs	r0, #39	@ 0x27
 8009bce:	e7f1      	b.n	8009bb4 <__hexdig_fun+0xa>
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	4770      	bx	lr

08009bd4 <__gethex>:
 8009bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd8:	b085      	sub	sp, #20
 8009bda:	468a      	mov	sl, r1
 8009bdc:	9302      	str	r3, [sp, #8]
 8009bde:	680b      	ldr	r3, [r1, #0]
 8009be0:	9001      	str	r0, [sp, #4]
 8009be2:	4690      	mov	r8, r2
 8009be4:	1c9c      	adds	r4, r3, #2
 8009be6:	46a1      	mov	r9, r4
 8009be8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009bec:	2830      	cmp	r0, #48	@ 0x30
 8009bee:	d0fa      	beq.n	8009be6 <__gethex+0x12>
 8009bf0:	eba9 0303 	sub.w	r3, r9, r3
 8009bf4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009bf8:	f7ff ffd7 	bl	8009baa <__hexdig_fun>
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d168      	bne.n	8009cd4 <__gethex+0x100>
 8009c02:	49a0      	ldr	r1, [pc, #640]	@ (8009e84 <__gethex+0x2b0>)
 8009c04:	2201      	movs	r2, #1
 8009c06:	4648      	mov	r0, r9
 8009c08:	f7ff ff28 	bl	8009a5c <strncmp>
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d167      	bne.n	8009ce2 <__gethex+0x10e>
 8009c12:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009c16:	4626      	mov	r6, r4
 8009c18:	f7ff ffc7 	bl	8009baa <__hexdig_fun>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d062      	beq.n	8009ce6 <__gethex+0x112>
 8009c20:	4623      	mov	r3, r4
 8009c22:	7818      	ldrb	r0, [r3, #0]
 8009c24:	2830      	cmp	r0, #48	@ 0x30
 8009c26:	4699      	mov	r9, r3
 8009c28:	f103 0301 	add.w	r3, r3, #1
 8009c2c:	d0f9      	beq.n	8009c22 <__gethex+0x4e>
 8009c2e:	f7ff ffbc 	bl	8009baa <__hexdig_fun>
 8009c32:	fab0 f580 	clz	r5, r0
 8009c36:	096d      	lsrs	r5, r5, #5
 8009c38:	f04f 0b01 	mov.w	fp, #1
 8009c3c:	464a      	mov	r2, r9
 8009c3e:	4616      	mov	r6, r2
 8009c40:	3201      	adds	r2, #1
 8009c42:	7830      	ldrb	r0, [r6, #0]
 8009c44:	f7ff ffb1 	bl	8009baa <__hexdig_fun>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d1f8      	bne.n	8009c3e <__gethex+0x6a>
 8009c4c:	498d      	ldr	r1, [pc, #564]	@ (8009e84 <__gethex+0x2b0>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff ff03 	bl	8009a5c <strncmp>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d13f      	bne.n	8009cda <__gethex+0x106>
 8009c5a:	b944      	cbnz	r4, 8009c6e <__gethex+0x9a>
 8009c5c:	1c74      	adds	r4, r6, #1
 8009c5e:	4622      	mov	r2, r4
 8009c60:	4616      	mov	r6, r2
 8009c62:	3201      	adds	r2, #1
 8009c64:	7830      	ldrb	r0, [r6, #0]
 8009c66:	f7ff ffa0 	bl	8009baa <__hexdig_fun>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d1f8      	bne.n	8009c60 <__gethex+0x8c>
 8009c6e:	1ba4      	subs	r4, r4, r6
 8009c70:	00a7      	lsls	r7, r4, #2
 8009c72:	7833      	ldrb	r3, [r6, #0]
 8009c74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009c78:	2b50      	cmp	r3, #80	@ 0x50
 8009c7a:	d13e      	bne.n	8009cfa <__gethex+0x126>
 8009c7c:	7873      	ldrb	r3, [r6, #1]
 8009c7e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c80:	d033      	beq.n	8009cea <__gethex+0x116>
 8009c82:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c84:	d034      	beq.n	8009cf0 <__gethex+0x11c>
 8009c86:	1c71      	adds	r1, r6, #1
 8009c88:	2400      	movs	r4, #0
 8009c8a:	7808      	ldrb	r0, [r1, #0]
 8009c8c:	f7ff ff8d 	bl	8009baa <__hexdig_fun>
 8009c90:	1e43      	subs	r3, r0, #1
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b18      	cmp	r3, #24
 8009c96:	d830      	bhi.n	8009cfa <__gethex+0x126>
 8009c98:	f1a0 0210 	sub.w	r2, r0, #16
 8009c9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ca0:	f7ff ff83 	bl	8009baa <__hexdig_fun>
 8009ca4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009ca8:	fa5f fc8c 	uxtb.w	ip, ip
 8009cac:	f1bc 0f18 	cmp.w	ip, #24
 8009cb0:	f04f 030a 	mov.w	r3, #10
 8009cb4:	d91e      	bls.n	8009cf4 <__gethex+0x120>
 8009cb6:	b104      	cbz	r4, 8009cba <__gethex+0xe6>
 8009cb8:	4252      	negs	r2, r2
 8009cba:	4417      	add	r7, r2
 8009cbc:	f8ca 1000 	str.w	r1, [sl]
 8009cc0:	b1ed      	cbz	r5, 8009cfe <__gethex+0x12a>
 8009cc2:	f1bb 0f00 	cmp.w	fp, #0
 8009cc6:	bf0c      	ite	eq
 8009cc8:	2506      	moveq	r5, #6
 8009cca:	2500      	movne	r5, #0
 8009ccc:	4628      	mov	r0, r5
 8009cce:	b005      	add	sp, #20
 8009cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd4:	2500      	movs	r5, #0
 8009cd6:	462c      	mov	r4, r5
 8009cd8:	e7b0      	b.n	8009c3c <__gethex+0x68>
 8009cda:	2c00      	cmp	r4, #0
 8009cdc:	d1c7      	bne.n	8009c6e <__gethex+0x9a>
 8009cde:	4627      	mov	r7, r4
 8009ce0:	e7c7      	b.n	8009c72 <__gethex+0x9e>
 8009ce2:	464e      	mov	r6, r9
 8009ce4:	462f      	mov	r7, r5
 8009ce6:	2501      	movs	r5, #1
 8009ce8:	e7c3      	b.n	8009c72 <__gethex+0x9e>
 8009cea:	2400      	movs	r4, #0
 8009cec:	1cb1      	adds	r1, r6, #2
 8009cee:	e7cc      	b.n	8009c8a <__gethex+0xb6>
 8009cf0:	2401      	movs	r4, #1
 8009cf2:	e7fb      	b.n	8009cec <__gethex+0x118>
 8009cf4:	fb03 0002 	mla	r0, r3, r2, r0
 8009cf8:	e7ce      	b.n	8009c98 <__gethex+0xc4>
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	e7de      	b.n	8009cbc <__gethex+0xe8>
 8009cfe:	eba6 0309 	sub.w	r3, r6, r9
 8009d02:	3b01      	subs	r3, #1
 8009d04:	4629      	mov	r1, r5
 8009d06:	2b07      	cmp	r3, #7
 8009d08:	dc0a      	bgt.n	8009d20 <__gethex+0x14c>
 8009d0a:	9801      	ldr	r0, [sp, #4]
 8009d0c:	f7fe f940 	bl	8007f90 <_Balloc>
 8009d10:	4604      	mov	r4, r0
 8009d12:	b940      	cbnz	r0, 8009d26 <__gethex+0x152>
 8009d14:	4b5c      	ldr	r3, [pc, #368]	@ (8009e88 <__gethex+0x2b4>)
 8009d16:	4602      	mov	r2, r0
 8009d18:	21e4      	movs	r1, #228	@ 0xe4
 8009d1a:	485c      	ldr	r0, [pc, #368]	@ (8009e8c <__gethex+0x2b8>)
 8009d1c:	f7fd f9ce 	bl	80070bc <__assert_func>
 8009d20:	3101      	adds	r1, #1
 8009d22:	105b      	asrs	r3, r3, #1
 8009d24:	e7ef      	b.n	8009d06 <__gethex+0x132>
 8009d26:	f100 0a14 	add.w	sl, r0, #20
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	4655      	mov	r5, sl
 8009d2e:	469b      	mov	fp, r3
 8009d30:	45b1      	cmp	r9, r6
 8009d32:	d337      	bcc.n	8009da4 <__gethex+0x1d0>
 8009d34:	f845 bb04 	str.w	fp, [r5], #4
 8009d38:	eba5 050a 	sub.w	r5, r5, sl
 8009d3c:	10ad      	asrs	r5, r5, #2
 8009d3e:	6125      	str	r5, [r4, #16]
 8009d40:	4658      	mov	r0, fp
 8009d42:	f7fe fa17 	bl	8008174 <__hi0bits>
 8009d46:	016d      	lsls	r5, r5, #5
 8009d48:	f8d8 6000 	ldr.w	r6, [r8]
 8009d4c:	1a2d      	subs	r5, r5, r0
 8009d4e:	42b5      	cmp	r5, r6
 8009d50:	dd54      	ble.n	8009dfc <__gethex+0x228>
 8009d52:	1bad      	subs	r5, r5, r6
 8009d54:	4629      	mov	r1, r5
 8009d56:	4620      	mov	r0, r4
 8009d58:	f7fe fdab 	bl	80088b2 <__any_on>
 8009d5c:	4681      	mov	r9, r0
 8009d5e:	b178      	cbz	r0, 8009d80 <__gethex+0x1ac>
 8009d60:	1e6b      	subs	r3, r5, #1
 8009d62:	1159      	asrs	r1, r3, #5
 8009d64:	f003 021f 	and.w	r2, r3, #31
 8009d68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009d6c:	f04f 0901 	mov.w	r9, #1
 8009d70:	fa09 f202 	lsl.w	r2, r9, r2
 8009d74:	420a      	tst	r2, r1
 8009d76:	d003      	beq.n	8009d80 <__gethex+0x1ac>
 8009d78:	454b      	cmp	r3, r9
 8009d7a:	dc36      	bgt.n	8009dea <__gethex+0x216>
 8009d7c:	f04f 0902 	mov.w	r9, #2
 8009d80:	4629      	mov	r1, r5
 8009d82:	4620      	mov	r0, r4
 8009d84:	f7ff febf 	bl	8009b06 <rshift>
 8009d88:	442f      	add	r7, r5
 8009d8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d8e:	42bb      	cmp	r3, r7
 8009d90:	da42      	bge.n	8009e18 <__gethex+0x244>
 8009d92:	9801      	ldr	r0, [sp, #4]
 8009d94:	4621      	mov	r1, r4
 8009d96:	f7fe f93b 	bl	8008010 <_Bfree>
 8009d9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	25a3      	movs	r5, #163	@ 0xa3
 8009da2:	e793      	b.n	8009ccc <__gethex+0xf8>
 8009da4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009da8:	2a2e      	cmp	r2, #46	@ 0x2e
 8009daa:	d012      	beq.n	8009dd2 <__gethex+0x1fe>
 8009dac:	2b20      	cmp	r3, #32
 8009dae:	d104      	bne.n	8009dba <__gethex+0x1e6>
 8009db0:	f845 bb04 	str.w	fp, [r5], #4
 8009db4:	f04f 0b00 	mov.w	fp, #0
 8009db8:	465b      	mov	r3, fp
 8009dba:	7830      	ldrb	r0, [r6, #0]
 8009dbc:	9303      	str	r3, [sp, #12]
 8009dbe:	f7ff fef4 	bl	8009baa <__hexdig_fun>
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	f000 000f 	and.w	r0, r0, #15
 8009dc8:	4098      	lsls	r0, r3
 8009dca:	ea4b 0b00 	orr.w	fp, fp, r0
 8009dce:	3304      	adds	r3, #4
 8009dd0:	e7ae      	b.n	8009d30 <__gethex+0x15c>
 8009dd2:	45b1      	cmp	r9, r6
 8009dd4:	d8ea      	bhi.n	8009dac <__gethex+0x1d8>
 8009dd6:	492b      	ldr	r1, [pc, #172]	@ (8009e84 <__gethex+0x2b0>)
 8009dd8:	9303      	str	r3, [sp, #12]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f7ff fe3d 	bl	8009a5c <strncmp>
 8009de2:	9b03      	ldr	r3, [sp, #12]
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d1e1      	bne.n	8009dac <__gethex+0x1d8>
 8009de8:	e7a2      	b.n	8009d30 <__gethex+0x15c>
 8009dea:	1ea9      	subs	r1, r5, #2
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7fe fd60 	bl	80088b2 <__any_on>
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d0c2      	beq.n	8009d7c <__gethex+0x1a8>
 8009df6:	f04f 0903 	mov.w	r9, #3
 8009dfa:	e7c1      	b.n	8009d80 <__gethex+0x1ac>
 8009dfc:	da09      	bge.n	8009e12 <__gethex+0x23e>
 8009dfe:	1b75      	subs	r5, r6, r5
 8009e00:	4621      	mov	r1, r4
 8009e02:	9801      	ldr	r0, [sp, #4]
 8009e04:	462a      	mov	r2, r5
 8009e06:	f7fe fb1b 	bl	8008440 <__lshift>
 8009e0a:	1b7f      	subs	r7, r7, r5
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	f100 0a14 	add.w	sl, r0, #20
 8009e12:	f04f 0900 	mov.w	r9, #0
 8009e16:	e7b8      	b.n	8009d8a <__gethex+0x1b6>
 8009e18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e1c:	42bd      	cmp	r5, r7
 8009e1e:	dd6f      	ble.n	8009f00 <__gethex+0x32c>
 8009e20:	1bed      	subs	r5, r5, r7
 8009e22:	42ae      	cmp	r6, r5
 8009e24:	dc34      	bgt.n	8009e90 <__gethex+0x2bc>
 8009e26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d022      	beq.n	8009e74 <__gethex+0x2a0>
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d024      	beq.n	8009e7c <__gethex+0x2a8>
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d115      	bne.n	8009e62 <__gethex+0x28e>
 8009e36:	42ae      	cmp	r6, r5
 8009e38:	d113      	bne.n	8009e62 <__gethex+0x28e>
 8009e3a:	2e01      	cmp	r6, #1
 8009e3c:	d10b      	bne.n	8009e56 <__gethex+0x282>
 8009e3e:	9a02      	ldr	r2, [sp, #8]
 8009e40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	2301      	movs	r3, #1
 8009e48:	6123      	str	r3, [r4, #16]
 8009e4a:	f8ca 3000 	str.w	r3, [sl]
 8009e4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e50:	2562      	movs	r5, #98	@ 0x62
 8009e52:	601c      	str	r4, [r3, #0]
 8009e54:	e73a      	b.n	8009ccc <__gethex+0xf8>
 8009e56:	1e71      	subs	r1, r6, #1
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f7fe fd2a 	bl	80088b2 <__any_on>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d1ed      	bne.n	8009e3e <__gethex+0x26a>
 8009e62:	9801      	ldr	r0, [sp, #4]
 8009e64:	4621      	mov	r1, r4
 8009e66:	f7fe f8d3 	bl	8008010 <_Bfree>
 8009e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	2550      	movs	r5, #80	@ 0x50
 8009e72:	e72b      	b.n	8009ccc <__gethex+0xf8>
 8009e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1f3      	bne.n	8009e62 <__gethex+0x28e>
 8009e7a:	e7e0      	b.n	8009e3e <__gethex+0x26a>
 8009e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1dd      	bne.n	8009e3e <__gethex+0x26a>
 8009e82:	e7ee      	b.n	8009e62 <__gethex+0x28e>
 8009e84:	0800b8c8 	.word	0x0800b8c8
 8009e88:	0800b75b 	.word	0x0800b75b
 8009e8c:	0800ba3a 	.word	0x0800ba3a
 8009e90:	1e6f      	subs	r7, r5, #1
 8009e92:	f1b9 0f00 	cmp.w	r9, #0
 8009e96:	d130      	bne.n	8009efa <__gethex+0x326>
 8009e98:	b127      	cbz	r7, 8009ea4 <__gethex+0x2d0>
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f7fe fd08 	bl	80088b2 <__any_on>
 8009ea2:	4681      	mov	r9, r0
 8009ea4:	117a      	asrs	r2, r7, #5
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009eac:	f007 071f 	and.w	r7, r7, #31
 8009eb0:	40bb      	lsls	r3, r7
 8009eb2:	4213      	tst	r3, r2
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	bf18      	it	ne
 8009eba:	f049 0902 	orrne.w	r9, r9, #2
 8009ebe:	f7ff fe22 	bl	8009b06 <rshift>
 8009ec2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009ec6:	1b76      	subs	r6, r6, r5
 8009ec8:	2502      	movs	r5, #2
 8009eca:	f1b9 0f00 	cmp.w	r9, #0
 8009ece:	d047      	beq.n	8009f60 <__gethex+0x38c>
 8009ed0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d015      	beq.n	8009f04 <__gethex+0x330>
 8009ed8:	2b03      	cmp	r3, #3
 8009eda:	d017      	beq.n	8009f0c <__gethex+0x338>
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d109      	bne.n	8009ef4 <__gethex+0x320>
 8009ee0:	f019 0f02 	tst.w	r9, #2
 8009ee4:	d006      	beq.n	8009ef4 <__gethex+0x320>
 8009ee6:	f8da 3000 	ldr.w	r3, [sl]
 8009eea:	ea49 0903 	orr.w	r9, r9, r3
 8009eee:	f019 0f01 	tst.w	r9, #1
 8009ef2:	d10e      	bne.n	8009f12 <__gethex+0x33e>
 8009ef4:	f045 0510 	orr.w	r5, r5, #16
 8009ef8:	e032      	b.n	8009f60 <__gethex+0x38c>
 8009efa:	f04f 0901 	mov.w	r9, #1
 8009efe:	e7d1      	b.n	8009ea4 <__gethex+0x2d0>
 8009f00:	2501      	movs	r5, #1
 8009f02:	e7e2      	b.n	8009eca <__gethex+0x2f6>
 8009f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f06:	f1c3 0301 	rsb	r3, r3, #1
 8009f0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0f0      	beq.n	8009ef4 <__gethex+0x320>
 8009f12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f16:	f104 0314 	add.w	r3, r4, #20
 8009f1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f22:	f04f 0c00 	mov.w	ip, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f30:	d01b      	beq.n	8009f6a <__gethex+0x396>
 8009f32:	3201      	adds	r2, #1
 8009f34:	6002      	str	r2, [r0, #0]
 8009f36:	2d02      	cmp	r5, #2
 8009f38:	f104 0314 	add.w	r3, r4, #20
 8009f3c:	d13c      	bne.n	8009fb8 <__gethex+0x3e4>
 8009f3e:	f8d8 2000 	ldr.w	r2, [r8]
 8009f42:	3a01      	subs	r2, #1
 8009f44:	42b2      	cmp	r2, r6
 8009f46:	d109      	bne.n	8009f5c <__gethex+0x388>
 8009f48:	1171      	asrs	r1, r6, #5
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f50:	f006 061f 	and.w	r6, r6, #31
 8009f54:	fa02 f606 	lsl.w	r6, r2, r6
 8009f58:	421e      	tst	r6, r3
 8009f5a:	d13a      	bne.n	8009fd2 <__gethex+0x3fe>
 8009f5c:	f045 0520 	orr.w	r5, r5, #32
 8009f60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f62:	601c      	str	r4, [r3, #0]
 8009f64:	9b02      	ldr	r3, [sp, #8]
 8009f66:	601f      	str	r7, [r3, #0]
 8009f68:	e6b0      	b.n	8009ccc <__gethex+0xf8>
 8009f6a:	4299      	cmp	r1, r3
 8009f6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f70:	d8d9      	bhi.n	8009f26 <__gethex+0x352>
 8009f72:	68a3      	ldr	r3, [r4, #8]
 8009f74:	459b      	cmp	fp, r3
 8009f76:	db17      	blt.n	8009fa8 <__gethex+0x3d4>
 8009f78:	6861      	ldr	r1, [r4, #4]
 8009f7a:	9801      	ldr	r0, [sp, #4]
 8009f7c:	3101      	adds	r1, #1
 8009f7e:	f7fe f807 	bl	8007f90 <_Balloc>
 8009f82:	4681      	mov	r9, r0
 8009f84:	b918      	cbnz	r0, 8009f8e <__gethex+0x3ba>
 8009f86:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff0 <__gethex+0x41c>)
 8009f88:	4602      	mov	r2, r0
 8009f8a:	2184      	movs	r1, #132	@ 0x84
 8009f8c:	e6c5      	b.n	8009d1a <__gethex+0x146>
 8009f8e:	6922      	ldr	r2, [r4, #16]
 8009f90:	3202      	adds	r2, #2
 8009f92:	f104 010c 	add.w	r1, r4, #12
 8009f96:	0092      	lsls	r2, r2, #2
 8009f98:	300c      	adds	r0, #12
 8009f9a:	f7ff fd81 	bl	8009aa0 <memcpy>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	9801      	ldr	r0, [sp, #4]
 8009fa2:	f7fe f835 	bl	8008010 <_Bfree>
 8009fa6:	464c      	mov	r4, r9
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fb0:	6122      	str	r2, [r4, #16]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	615a      	str	r2, [r3, #20]
 8009fb6:	e7be      	b.n	8009f36 <__gethex+0x362>
 8009fb8:	6922      	ldr	r2, [r4, #16]
 8009fba:	455a      	cmp	r2, fp
 8009fbc:	dd0b      	ble.n	8009fd6 <__gethex+0x402>
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f7ff fda0 	bl	8009b06 <rshift>
 8009fc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fca:	3701      	adds	r7, #1
 8009fcc:	42bb      	cmp	r3, r7
 8009fce:	f6ff aee0 	blt.w	8009d92 <__gethex+0x1be>
 8009fd2:	2501      	movs	r5, #1
 8009fd4:	e7c2      	b.n	8009f5c <__gethex+0x388>
 8009fd6:	f016 061f 	ands.w	r6, r6, #31
 8009fda:	d0fa      	beq.n	8009fd2 <__gethex+0x3fe>
 8009fdc:	4453      	add	r3, sl
 8009fde:	f1c6 0620 	rsb	r6, r6, #32
 8009fe2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009fe6:	f7fe f8c5 	bl	8008174 <__hi0bits>
 8009fea:	42b0      	cmp	r0, r6
 8009fec:	dbe7      	blt.n	8009fbe <__gethex+0x3ea>
 8009fee:	e7f0      	b.n	8009fd2 <__gethex+0x3fe>
 8009ff0:	0800b75b 	.word	0x0800b75b

08009ff4 <L_shift>:
 8009ff4:	f1c2 0208 	rsb	r2, r2, #8
 8009ff8:	0092      	lsls	r2, r2, #2
 8009ffa:	b570      	push	{r4, r5, r6, lr}
 8009ffc:	f1c2 0620 	rsb	r6, r2, #32
 800a000:	6843      	ldr	r3, [r0, #4]
 800a002:	6804      	ldr	r4, [r0, #0]
 800a004:	fa03 f506 	lsl.w	r5, r3, r6
 800a008:	432c      	orrs	r4, r5
 800a00a:	40d3      	lsrs	r3, r2
 800a00c:	6004      	str	r4, [r0, #0]
 800a00e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a012:	4288      	cmp	r0, r1
 800a014:	d3f4      	bcc.n	800a000 <L_shift+0xc>
 800a016:	bd70      	pop	{r4, r5, r6, pc}

0800a018 <__match>:
 800a018:	b530      	push	{r4, r5, lr}
 800a01a:	6803      	ldr	r3, [r0, #0]
 800a01c:	3301      	adds	r3, #1
 800a01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a022:	b914      	cbnz	r4, 800a02a <__match+0x12>
 800a024:	6003      	str	r3, [r0, #0]
 800a026:	2001      	movs	r0, #1
 800a028:	bd30      	pop	{r4, r5, pc}
 800a02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a02e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a032:	2d19      	cmp	r5, #25
 800a034:	bf98      	it	ls
 800a036:	3220      	addls	r2, #32
 800a038:	42a2      	cmp	r2, r4
 800a03a:	d0f0      	beq.n	800a01e <__match+0x6>
 800a03c:	2000      	movs	r0, #0
 800a03e:	e7f3      	b.n	800a028 <__match+0x10>

0800a040 <__hexnan>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	680b      	ldr	r3, [r1, #0]
 800a046:	6801      	ldr	r1, [r0, #0]
 800a048:	115e      	asrs	r6, r3, #5
 800a04a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a04e:	f013 031f 	ands.w	r3, r3, #31
 800a052:	b087      	sub	sp, #28
 800a054:	bf18      	it	ne
 800a056:	3604      	addne	r6, #4
 800a058:	2500      	movs	r5, #0
 800a05a:	1f37      	subs	r7, r6, #4
 800a05c:	4682      	mov	sl, r0
 800a05e:	4690      	mov	r8, r2
 800a060:	9301      	str	r3, [sp, #4]
 800a062:	f846 5c04 	str.w	r5, [r6, #-4]
 800a066:	46b9      	mov	r9, r7
 800a068:	463c      	mov	r4, r7
 800a06a:	9502      	str	r5, [sp, #8]
 800a06c:	46ab      	mov	fp, r5
 800a06e:	784a      	ldrb	r2, [r1, #1]
 800a070:	1c4b      	adds	r3, r1, #1
 800a072:	9303      	str	r3, [sp, #12]
 800a074:	b342      	cbz	r2, 800a0c8 <__hexnan+0x88>
 800a076:	4610      	mov	r0, r2
 800a078:	9105      	str	r1, [sp, #20]
 800a07a:	9204      	str	r2, [sp, #16]
 800a07c:	f7ff fd95 	bl	8009baa <__hexdig_fun>
 800a080:	2800      	cmp	r0, #0
 800a082:	d151      	bne.n	800a128 <__hexnan+0xe8>
 800a084:	9a04      	ldr	r2, [sp, #16]
 800a086:	9905      	ldr	r1, [sp, #20]
 800a088:	2a20      	cmp	r2, #32
 800a08a:	d818      	bhi.n	800a0be <__hexnan+0x7e>
 800a08c:	9b02      	ldr	r3, [sp, #8]
 800a08e:	459b      	cmp	fp, r3
 800a090:	dd13      	ble.n	800a0ba <__hexnan+0x7a>
 800a092:	454c      	cmp	r4, r9
 800a094:	d206      	bcs.n	800a0a4 <__hexnan+0x64>
 800a096:	2d07      	cmp	r5, #7
 800a098:	dc04      	bgt.n	800a0a4 <__hexnan+0x64>
 800a09a:	462a      	mov	r2, r5
 800a09c:	4649      	mov	r1, r9
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f7ff ffa8 	bl	8009ff4 <L_shift>
 800a0a4:	4544      	cmp	r4, r8
 800a0a6:	d952      	bls.n	800a14e <__hexnan+0x10e>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f1a4 0904 	sub.w	r9, r4, #4
 800a0ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0b2:	f8cd b008 	str.w	fp, [sp, #8]
 800a0b6:	464c      	mov	r4, r9
 800a0b8:	461d      	mov	r5, r3
 800a0ba:	9903      	ldr	r1, [sp, #12]
 800a0bc:	e7d7      	b.n	800a06e <__hexnan+0x2e>
 800a0be:	2a29      	cmp	r2, #41	@ 0x29
 800a0c0:	d157      	bne.n	800a172 <__hexnan+0x132>
 800a0c2:	3102      	adds	r1, #2
 800a0c4:	f8ca 1000 	str.w	r1, [sl]
 800a0c8:	f1bb 0f00 	cmp.w	fp, #0
 800a0cc:	d051      	beq.n	800a172 <__hexnan+0x132>
 800a0ce:	454c      	cmp	r4, r9
 800a0d0:	d206      	bcs.n	800a0e0 <__hexnan+0xa0>
 800a0d2:	2d07      	cmp	r5, #7
 800a0d4:	dc04      	bgt.n	800a0e0 <__hexnan+0xa0>
 800a0d6:	462a      	mov	r2, r5
 800a0d8:	4649      	mov	r1, r9
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f7ff ff8a 	bl	8009ff4 <L_shift>
 800a0e0:	4544      	cmp	r4, r8
 800a0e2:	d936      	bls.n	800a152 <__hexnan+0x112>
 800a0e4:	f1a8 0204 	sub.w	r2, r8, #4
 800a0e8:	4623      	mov	r3, r4
 800a0ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800a0ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800a0f2:	429f      	cmp	r7, r3
 800a0f4:	d2f9      	bcs.n	800a0ea <__hexnan+0xaa>
 800a0f6:	1b3b      	subs	r3, r7, r4
 800a0f8:	f023 0303 	bic.w	r3, r3, #3
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	3401      	adds	r4, #1
 800a100:	3e03      	subs	r6, #3
 800a102:	42b4      	cmp	r4, r6
 800a104:	bf88      	it	hi
 800a106:	2304      	movhi	r3, #4
 800a108:	4443      	add	r3, r8
 800a10a:	2200      	movs	r2, #0
 800a10c:	f843 2b04 	str.w	r2, [r3], #4
 800a110:	429f      	cmp	r7, r3
 800a112:	d2fb      	bcs.n	800a10c <__hexnan+0xcc>
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	b91b      	cbnz	r3, 800a120 <__hexnan+0xe0>
 800a118:	4547      	cmp	r7, r8
 800a11a:	d128      	bne.n	800a16e <__hexnan+0x12e>
 800a11c:	2301      	movs	r3, #1
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	2005      	movs	r0, #5
 800a122:	b007      	add	sp, #28
 800a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a128:	3501      	adds	r5, #1
 800a12a:	2d08      	cmp	r5, #8
 800a12c:	f10b 0b01 	add.w	fp, fp, #1
 800a130:	dd06      	ble.n	800a140 <__hexnan+0x100>
 800a132:	4544      	cmp	r4, r8
 800a134:	d9c1      	bls.n	800a0ba <__hexnan+0x7a>
 800a136:	2300      	movs	r3, #0
 800a138:	f844 3c04 	str.w	r3, [r4, #-4]
 800a13c:	2501      	movs	r5, #1
 800a13e:	3c04      	subs	r4, #4
 800a140:	6822      	ldr	r2, [r4, #0]
 800a142:	f000 000f 	and.w	r0, r0, #15
 800a146:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a14a:	6020      	str	r0, [r4, #0]
 800a14c:	e7b5      	b.n	800a0ba <__hexnan+0x7a>
 800a14e:	2508      	movs	r5, #8
 800a150:	e7b3      	b.n	800a0ba <__hexnan+0x7a>
 800a152:	9b01      	ldr	r3, [sp, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d0dd      	beq.n	800a114 <__hexnan+0xd4>
 800a158:	f1c3 0320 	rsb	r3, r3, #32
 800a15c:	f04f 32ff 	mov.w	r2, #4294967295
 800a160:	40da      	lsrs	r2, r3
 800a162:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a166:	4013      	ands	r3, r2
 800a168:	f846 3c04 	str.w	r3, [r6, #-4]
 800a16c:	e7d2      	b.n	800a114 <__hexnan+0xd4>
 800a16e:	3f04      	subs	r7, #4
 800a170:	e7d0      	b.n	800a114 <__hexnan+0xd4>
 800a172:	2004      	movs	r0, #4
 800a174:	e7d5      	b.n	800a122 <__hexnan+0xe2>

0800a176 <__ascii_mbtowc>:
 800a176:	b082      	sub	sp, #8
 800a178:	b901      	cbnz	r1, 800a17c <__ascii_mbtowc+0x6>
 800a17a:	a901      	add	r1, sp, #4
 800a17c:	b142      	cbz	r2, 800a190 <__ascii_mbtowc+0x1a>
 800a17e:	b14b      	cbz	r3, 800a194 <__ascii_mbtowc+0x1e>
 800a180:	7813      	ldrb	r3, [r2, #0]
 800a182:	600b      	str	r3, [r1, #0]
 800a184:	7812      	ldrb	r2, [r2, #0]
 800a186:	1e10      	subs	r0, r2, #0
 800a188:	bf18      	it	ne
 800a18a:	2001      	movne	r0, #1
 800a18c:	b002      	add	sp, #8
 800a18e:	4770      	bx	lr
 800a190:	4610      	mov	r0, r2
 800a192:	e7fb      	b.n	800a18c <__ascii_mbtowc+0x16>
 800a194:	f06f 0001 	mvn.w	r0, #1
 800a198:	e7f8      	b.n	800a18c <__ascii_mbtowc+0x16>

0800a19a <_realloc_r>:
 800a19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a19e:	4680      	mov	r8, r0
 800a1a0:	4615      	mov	r5, r2
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	b921      	cbnz	r1, 800a1b0 <_realloc_r+0x16>
 800a1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	f7fd be64 	b.w	8007e78 <_malloc_r>
 800a1b0:	b92a      	cbnz	r2, 800a1be <_realloc_r+0x24>
 800a1b2:	f7fd fded 	bl	8007d90 <_free_r>
 800a1b6:	2400      	movs	r4, #0
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1be:	f000 fa41 	bl	800a644 <_malloc_usable_size_r>
 800a1c2:	4285      	cmp	r5, r0
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	d802      	bhi.n	800a1ce <_realloc_r+0x34>
 800a1c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a1cc:	d8f4      	bhi.n	800a1b8 <_realloc_r+0x1e>
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	f7fd fe51 	bl	8007e78 <_malloc_r>
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d0ec      	beq.n	800a1b6 <_realloc_r+0x1c>
 800a1dc:	42b5      	cmp	r5, r6
 800a1de:	462a      	mov	r2, r5
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	bf28      	it	cs
 800a1e4:	4632      	movcs	r2, r6
 800a1e6:	f7ff fc5b 	bl	8009aa0 <memcpy>
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	4640      	mov	r0, r8
 800a1ee:	f7fd fdcf 	bl	8007d90 <_free_r>
 800a1f2:	463c      	mov	r4, r7
 800a1f4:	e7e0      	b.n	800a1b8 <_realloc_r+0x1e>

0800a1f6 <__ascii_wctomb>:
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	4608      	mov	r0, r1
 800a1fa:	b141      	cbz	r1, 800a20e <__ascii_wctomb+0x18>
 800a1fc:	2aff      	cmp	r2, #255	@ 0xff
 800a1fe:	d904      	bls.n	800a20a <__ascii_wctomb+0x14>
 800a200:	228a      	movs	r2, #138	@ 0x8a
 800a202:	601a      	str	r2, [r3, #0]
 800a204:	f04f 30ff 	mov.w	r0, #4294967295
 800a208:	4770      	bx	lr
 800a20a:	700a      	strb	r2, [r1, #0]
 800a20c:	2001      	movs	r0, #1
 800a20e:	4770      	bx	lr

0800a210 <__sfputc_r>:
 800a210:	6893      	ldr	r3, [r2, #8]
 800a212:	3b01      	subs	r3, #1
 800a214:	2b00      	cmp	r3, #0
 800a216:	b410      	push	{r4}
 800a218:	6093      	str	r3, [r2, #8]
 800a21a:	da08      	bge.n	800a22e <__sfputc_r+0x1e>
 800a21c:	6994      	ldr	r4, [r2, #24]
 800a21e:	42a3      	cmp	r3, r4
 800a220:	db01      	blt.n	800a226 <__sfputc_r+0x16>
 800a222:	290a      	cmp	r1, #10
 800a224:	d103      	bne.n	800a22e <__sfputc_r+0x1e>
 800a226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a22a:	f000 b933 	b.w	800a494 <__swbuf_r>
 800a22e:	6813      	ldr	r3, [r2, #0]
 800a230:	1c58      	adds	r0, r3, #1
 800a232:	6010      	str	r0, [r2, #0]
 800a234:	7019      	strb	r1, [r3, #0]
 800a236:	4608      	mov	r0, r1
 800a238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <__sfputs_r>:
 800a23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a240:	4606      	mov	r6, r0
 800a242:	460f      	mov	r7, r1
 800a244:	4614      	mov	r4, r2
 800a246:	18d5      	adds	r5, r2, r3
 800a248:	42ac      	cmp	r4, r5
 800a24a:	d101      	bne.n	800a250 <__sfputs_r+0x12>
 800a24c:	2000      	movs	r0, #0
 800a24e:	e007      	b.n	800a260 <__sfputs_r+0x22>
 800a250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a254:	463a      	mov	r2, r7
 800a256:	4630      	mov	r0, r6
 800a258:	f7ff ffda 	bl	800a210 <__sfputc_r>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d1f3      	bne.n	800a248 <__sfputs_r+0xa>
 800a260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a264 <_vfiprintf_r>:
 800a264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a268:	460d      	mov	r5, r1
 800a26a:	b09d      	sub	sp, #116	@ 0x74
 800a26c:	4614      	mov	r4, r2
 800a26e:	4698      	mov	r8, r3
 800a270:	4606      	mov	r6, r0
 800a272:	b118      	cbz	r0, 800a27c <_vfiprintf_r+0x18>
 800a274:	6a03      	ldr	r3, [r0, #32]
 800a276:	b90b      	cbnz	r3, 800a27c <_vfiprintf_r+0x18>
 800a278:	f7fc fd70 	bl	8006d5c <__sinit>
 800a27c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a27e:	07d9      	lsls	r1, r3, #31
 800a280:	d405      	bmi.n	800a28e <_vfiprintf_r+0x2a>
 800a282:	89ab      	ldrh	r3, [r5, #12]
 800a284:	059a      	lsls	r2, r3, #22
 800a286:	d402      	bmi.n	800a28e <_vfiprintf_r+0x2a>
 800a288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a28a:	f7fc ff0e 	bl	80070aa <__retarget_lock_acquire_recursive>
 800a28e:	89ab      	ldrh	r3, [r5, #12]
 800a290:	071b      	lsls	r3, r3, #28
 800a292:	d501      	bpl.n	800a298 <_vfiprintf_r+0x34>
 800a294:	692b      	ldr	r3, [r5, #16]
 800a296:	b99b      	cbnz	r3, 800a2c0 <_vfiprintf_r+0x5c>
 800a298:	4629      	mov	r1, r5
 800a29a:	4630      	mov	r0, r6
 800a29c:	f000 f938 	bl	800a510 <__swsetup_r>
 800a2a0:	b170      	cbz	r0, 800a2c0 <_vfiprintf_r+0x5c>
 800a2a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2a4:	07dc      	lsls	r4, r3, #31
 800a2a6:	d504      	bpl.n	800a2b2 <_vfiprintf_r+0x4e>
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	b01d      	add	sp, #116	@ 0x74
 800a2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b2:	89ab      	ldrh	r3, [r5, #12]
 800a2b4:	0598      	lsls	r0, r3, #22
 800a2b6:	d4f7      	bmi.n	800a2a8 <_vfiprintf_r+0x44>
 800a2b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ba:	f7fc fef7 	bl	80070ac <__retarget_lock_release_recursive>
 800a2be:	e7f3      	b.n	800a2a8 <_vfiprintf_r+0x44>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2c4:	2320      	movs	r3, #32
 800a2c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ce:	2330      	movs	r3, #48	@ 0x30
 800a2d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a480 <_vfiprintf_r+0x21c>
 800a2d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2d8:	f04f 0901 	mov.w	r9, #1
 800a2dc:	4623      	mov	r3, r4
 800a2de:	469a      	mov	sl, r3
 800a2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2e4:	b10a      	cbz	r2, 800a2ea <_vfiprintf_r+0x86>
 800a2e6:	2a25      	cmp	r2, #37	@ 0x25
 800a2e8:	d1f9      	bne.n	800a2de <_vfiprintf_r+0x7a>
 800a2ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ee:	d00b      	beq.n	800a308 <_vfiprintf_r+0xa4>
 800a2f0:	465b      	mov	r3, fp
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f7ff ffa1 	bl	800a23e <__sfputs_r>
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	f000 80a7 	beq.w	800a450 <_vfiprintf_r+0x1ec>
 800a302:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a304:	445a      	add	r2, fp
 800a306:	9209      	str	r2, [sp, #36]	@ 0x24
 800a308:	f89a 3000 	ldrb.w	r3, [sl]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 809f 	beq.w	800a450 <_vfiprintf_r+0x1ec>
 800a312:	2300      	movs	r3, #0
 800a314:	f04f 32ff 	mov.w	r2, #4294967295
 800a318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a31c:	f10a 0a01 	add.w	sl, sl, #1
 800a320:	9304      	str	r3, [sp, #16]
 800a322:	9307      	str	r3, [sp, #28]
 800a324:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a328:	931a      	str	r3, [sp, #104]	@ 0x68
 800a32a:	4654      	mov	r4, sl
 800a32c:	2205      	movs	r2, #5
 800a32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a332:	4853      	ldr	r0, [pc, #332]	@ (800a480 <_vfiprintf_r+0x21c>)
 800a334:	f7f5 ff4c 	bl	80001d0 <memchr>
 800a338:	9a04      	ldr	r2, [sp, #16]
 800a33a:	b9d8      	cbnz	r0, 800a374 <_vfiprintf_r+0x110>
 800a33c:	06d1      	lsls	r1, r2, #27
 800a33e:	bf44      	itt	mi
 800a340:	2320      	movmi	r3, #32
 800a342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a346:	0713      	lsls	r3, r2, #28
 800a348:	bf44      	itt	mi
 800a34a:	232b      	movmi	r3, #43	@ 0x2b
 800a34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a350:	f89a 3000 	ldrb.w	r3, [sl]
 800a354:	2b2a      	cmp	r3, #42	@ 0x2a
 800a356:	d015      	beq.n	800a384 <_vfiprintf_r+0x120>
 800a358:	9a07      	ldr	r2, [sp, #28]
 800a35a:	4654      	mov	r4, sl
 800a35c:	2000      	movs	r0, #0
 800a35e:	f04f 0c0a 	mov.w	ip, #10
 800a362:	4621      	mov	r1, r4
 800a364:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a368:	3b30      	subs	r3, #48	@ 0x30
 800a36a:	2b09      	cmp	r3, #9
 800a36c:	d94b      	bls.n	800a406 <_vfiprintf_r+0x1a2>
 800a36e:	b1b0      	cbz	r0, 800a39e <_vfiprintf_r+0x13a>
 800a370:	9207      	str	r2, [sp, #28]
 800a372:	e014      	b.n	800a39e <_vfiprintf_r+0x13a>
 800a374:	eba0 0308 	sub.w	r3, r0, r8
 800a378:	fa09 f303 	lsl.w	r3, r9, r3
 800a37c:	4313      	orrs	r3, r2
 800a37e:	9304      	str	r3, [sp, #16]
 800a380:	46a2      	mov	sl, r4
 800a382:	e7d2      	b.n	800a32a <_vfiprintf_r+0xc6>
 800a384:	9b03      	ldr	r3, [sp, #12]
 800a386:	1d19      	adds	r1, r3, #4
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	9103      	str	r1, [sp, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	bfbb      	ittet	lt
 800a390:	425b      	neglt	r3, r3
 800a392:	f042 0202 	orrlt.w	r2, r2, #2
 800a396:	9307      	strge	r3, [sp, #28]
 800a398:	9307      	strlt	r3, [sp, #28]
 800a39a:	bfb8      	it	lt
 800a39c:	9204      	strlt	r2, [sp, #16]
 800a39e:	7823      	ldrb	r3, [r4, #0]
 800a3a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3a2:	d10a      	bne.n	800a3ba <_vfiprintf_r+0x156>
 800a3a4:	7863      	ldrb	r3, [r4, #1]
 800a3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3a8:	d132      	bne.n	800a410 <_vfiprintf_r+0x1ac>
 800a3aa:	9b03      	ldr	r3, [sp, #12]
 800a3ac:	1d1a      	adds	r2, r3, #4
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	9203      	str	r2, [sp, #12]
 800a3b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3b6:	3402      	adds	r4, #2
 800a3b8:	9305      	str	r3, [sp, #20]
 800a3ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a490 <_vfiprintf_r+0x22c>
 800a3be:	7821      	ldrb	r1, [r4, #0]
 800a3c0:	2203      	movs	r2, #3
 800a3c2:	4650      	mov	r0, sl
 800a3c4:	f7f5 ff04 	bl	80001d0 <memchr>
 800a3c8:	b138      	cbz	r0, 800a3da <_vfiprintf_r+0x176>
 800a3ca:	9b04      	ldr	r3, [sp, #16]
 800a3cc:	eba0 000a 	sub.w	r0, r0, sl
 800a3d0:	2240      	movs	r2, #64	@ 0x40
 800a3d2:	4082      	lsls	r2, r0
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	3401      	adds	r4, #1
 800a3d8:	9304      	str	r3, [sp, #16]
 800a3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3de:	4829      	ldr	r0, [pc, #164]	@ (800a484 <_vfiprintf_r+0x220>)
 800a3e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3e4:	2206      	movs	r2, #6
 800a3e6:	f7f5 fef3 	bl	80001d0 <memchr>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d03f      	beq.n	800a46e <_vfiprintf_r+0x20a>
 800a3ee:	4b26      	ldr	r3, [pc, #152]	@ (800a488 <_vfiprintf_r+0x224>)
 800a3f0:	bb1b      	cbnz	r3, 800a43a <_vfiprintf_r+0x1d6>
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	3307      	adds	r3, #7
 800a3f6:	f023 0307 	bic.w	r3, r3, #7
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	9303      	str	r3, [sp, #12]
 800a3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a400:	443b      	add	r3, r7
 800a402:	9309      	str	r3, [sp, #36]	@ 0x24
 800a404:	e76a      	b.n	800a2dc <_vfiprintf_r+0x78>
 800a406:	fb0c 3202 	mla	r2, ip, r2, r3
 800a40a:	460c      	mov	r4, r1
 800a40c:	2001      	movs	r0, #1
 800a40e:	e7a8      	b.n	800a362 <_vfiprintf_r+0xfe>
 800a410:	2300      	movs	r3, #0
 800a412:	3401      	adds	r4, #1
 800a414:	9305      	str	r3, [sp, #20]
 800a416:	4619      	mov	r1, r3
 800a418:	f04f 0c0a 	mov.w	ip, #10
 800a41c:	4620      	mov	r0, r4
 800a41e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a422:	3a30      	subs	r2, #48	@ 0x30
 800a424:	2a09      	cmp	r2, #9
 800a426:	d903      	bls.n	800a430 <_vfiprintf_r+0x1cc>
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d0c6      	beq.n	800a3ba <_vfiprintf_r+0x156>
 800a42c:	9105      	str	r1, [sp, #20]
 800a42e:	e7c4      	b.n	800a3ba <_vfiprintf_r+0x156>
 800a430:	fb0c 2101 	mla	r1, ip, r1, r2
 800a434:	4604      	mov	r4, r0
 800a436:	2301      	movs	r3, #1
 800a438:	e7f0      	b.n	800a41c <_vfiprintf_r+0x1b8>
 800a43a:	ab03      	add	r3, sp, #12
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	462a      	mov	r2, r5
 800a440:	4b12      	ldr	r3, [pc, #72]	@ (800a48c <_vfiprintf_r+0x228>)
 800a442:	a904      	add	r1, sp, #16
 800a444:	4630      	mov	r0, r6
 800a446:	f7fb fe31 	bl	80060ac <_printf_float>
 800a44a:	4607      	mov	r7, r0
 800a44c:	1c78      	adds	r0, r7, #1
 800a44e:	d1d6      	bne.n	800a3fe <_vfiprintf_r+0x19a>
 800a450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a452:	07d9      	lsls	r1, r3, #31
 800a454:	d405      	bmi.n	800a462 <_vfiprintf_r+0x1fe>
 800a456:	89ab      	ldrh	r3, [r5, #12]
 800a458:	059a      	lsls	r2, r3, #22
 800a45a:	d402      	bmi.n	800a462 <_vfiprintf_r+0x1fe>
 800a45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a45e:	f7fc fe25 	bl	80070ac <__retarget_lock_release_recursive>
 800a462:	89ab      	ldrh	r3, [r5, #12]
 800a464:	065b      	lsls	r3, r3, #25
 800a466:	f53f af1f 	bmi.w	800a2a8 <_vfiprintf_r+0x44>
 800a46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a46c:	e71e      	b.n	800a2ac <_vfiprintf_r+0x48>
 800a46e:	ab03      	add	r3, sp, #12
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	462a      	mov	r2, r5
 800a474:	4b05      	ldr	r3, [pc, #20]	@ (800a48c <_vfiprintf_r+0x228>)
 800a476:	a904      	add	r1, sp, #16
 800a478:	4630      	mov	r0, r6
 800a47a:	f7fc f8af 	bl	80065dc <_printf_i>
 800a47e:	e7e4      	b.n	800a44a <_vfiprintf_r+0x1e6>
 800a480:	0800ba21 	.word	0x0800ba21
 800a484:	0800ba2b 	.word	0x0800ba2b
 800a488:	080060ad 	.word	0x080060ad
 800a48c:	0800a23f 	.word	0x0800a23f
 800a490:	0800ba27 	.word	0x0800ba27

0800a494 <__swbuf_r>:
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a496:	460e      	mov	r6, r1
 800a498:	4614      	mov	r4, r2
 800a49a:	4605      	mov	r5, r0
 800a49c:	b118      	cbz	r0, 800a4a6 <__swbuf_r+0x12>
 800a49e:	6a03      	ldr	r3, [r0, #32]
 800a4a0:	b90b      	cbnz	r3, 800a4a6 <__swbuf_r+0x12>
 800a4a2:	f7fc fc5b 	bl	8006d5c <__sinit>
 800a4a6:	69a3      	ldr	r3, [r4, #24]
 800a4a8:	60a3      	str	r3, [r4, #8]
 800a4aa:	89a3      	ldrh	r3, [r4, #12]
 800a4ac:	071a      	lsls	r2, r3, #28
 800a4ae:	d501      	bpl.n	800a4b4 <__swbuf_r+0x20>
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	b943      	cbnz	r3, 800a4c6 <__swbuf_r+0x32>
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	f000 f82a 	bl	800a510 <__swsetup_r>
 800a4bc:	b118      	cbz	r0, 800a4c6 <__swbuf_r+0x32>
 800a4be:	f04f 37ff 	mov.w	r7, #4294967295
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	6922      	ldr	r2, [r4, #16]
 800a4ca:	1a98      	subs	r0, r3, r2
 800a4cc:	6963      	ldr	r3, [r4, #20]
 800a4ce:	b2f6      	uxtb	r6, r6
 800a4d0:	4283      	cmp	r3, r0
 800a4d2:	4637      	mov	r7, r6
 800a4d4:	dc05      	bgt.n	800a4e2 <__swbuf_r+0x4e>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f7ff fa6b 	bl	80099b4 <_fflush_r>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d1ed      	bne.n	800a4be <__swbuf_r+0x2a>
 800a4e2:	68a3      	ldr	r3, [r4, #8]
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	60a3      	str	r3, [r4, #8]
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	6022      	str	r2, [r4, #0]
 800a4ee:	701e      	strb	r6, [r3, #0]
 800a4f0:	6962      	ldr	r2, [r4, #20]
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d004      	beq.n	800a502 <__swbuf_r+0x6e>
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	07db      	lsls	r3, r3, #31
 800a4fc:	d5e1      	bpl.n	800a4c2 <__swbuf_r+0x2e>
 800a4fe:	2e0a      	cmp	r6, #10
 800a500:	d1df      	bne.n	800a4c2 <__swbuf_r+0x2e>
 800a502:	4621      	mov	r1, r4
 800a504:	4628      	mov	r0, r5
 800a506:	f7ff fa55 	bl	80099b4 <_fflush_r>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d0d9      	beq.n	800a4c2 <__swbuf_r+0x2e>
 800a50e:	e7d6      	b.n	800a4be <__swbuf_r+0x2a>

0800a510 <__swsetup_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4b29      	ldr	r3, [pc, #164]	@ (800a5b8 <__swsetup_r+0xa8>)
 800a514:	4605      	mov	r5, r0
 800a516:	6818      	ldr	r0, [r3, #0]
 800a518:	460c      	mov	r4, r1
 800a51a:	b118      	cbz	r0, 800a524 <__swsetup_r+0x14>
 800a51c:	6a03      	ldr	r3, [r0, #32]
 800a51e:	b90b      	cbnz	r3, 800a524 <__swsetup_r+0x14>
 800a520:	f7fc fc1c 	bl	8006d5c <__sinit>
 800a524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a528:	0719      	lsls	r1, r3, #28
 800a52a:	d422      	bmi.n	800a572 <__swsetup_r+0x62>
 800a52c:	06da      	lsls	r2, r3, #27
 800a52e:	d407      	bmi.n	800a540 <__swsetup_r+0x30>
 800a530:	2209      	movs	r2, #9
 800a532:	602a      	str	r2, [r5, #0]
 800a534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a538:	81a3      	strh	r3, [r4, #12]
 800a53a:	f04f 30ff 	mov.w	r0, #4294967295
 800a53e:	e033      	b.n	800a5a8 <__swsetup_r+0x98>
 800a540:	0758      	lsls	r0, r3, #29
 800a542:	d512      	bpl.n	800a56a <__swsetup_r+0x5a>
 800a544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a546:	b141      	cbz	r1, 800a55a <__swsetup_r+0x4a>
 800a548:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a54c:	4299      	cmp	r1, r3
 800a54e:	d002      	beq.n	800a556 <__swsetup_r+0x46>
 800a550:	4628      	mov	r0, r5
 800a552:	f7fd fc1d 	bl	8007d90 <_free_r>
 800a556:	2300      	movs	r3, #0
 800a558:	6363      	str	r3, [r4, #52]	@ 0x34
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	2300      	movs	r3, #0
 800a564:	6063      	str	r3, [r4, #4]
 800a566:	6923      	ldr	r3, [r4, #16]
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	f043 0308 	orr.w	r3, r3, #8
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	6923      	ldr	r3, [r4, #16]
 800a574:	b94b      	cbnz	r3, 800a58a <__swsetup_r+0x7a>
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a57c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a580:	d003      	beq.n	800a58a <__swsetup_r+0x7a>
 800a582:	4621      	mov	r1, r4
 800a584:	4628      	mov	r0, r5
 800a586:	f000 f88b 	bl	800a6a0 <__smakebuf_r>
 800a58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a58e:	f013 0201 	ands.w	r2, r3, #1
 800a592:	d00a      	beq.n	800a5aa <__swsetup_r+0x9a>
 800a594:	2200      	movs	r2, #0
 800a596:	60a2      	str	r2, [r4, #8]
 800a598:	6962      	ldr	r2, [r4, #20]
 800a59a:	4252      	negs	r2, r2
 800a59c:	61a2      	str	r2, [r4, #24]
 800a59e:	6922      	ldr	r2, [r4, #16]
 800a5a0:	b942      	cbnz	r2, 800a5b4 <__swsetup_r+0xa4>
 800a5a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5a6:	d1c5      	bne.n	800a534 <__swsetup_r+0x24>
 800a5a8:	bd38      	pop	{r3, r4, r5, pc}
 800a5aa:	0799      	lsls	r1, r3, #30
 800a5ac:	bf58      	it	pl
 800a5ae:	6962      	ldrpl	r2, [r4, #20]
 800a5b0:	60a2      	str	r2, [r4, #8]
 800a5b2:	e7f4      	b.n	800a59e <__swsetup_r+0x8e>
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	e7f7      	b.n	800a5a8 <__swsetup_r+0x98>
 800a5b8:	20000020 	.word	0x20000020

0800a5bc <_raise_r>:
 800a5bc:	291f      	cmp	r1, #31
 800a5be:	b538      	push	{r3, r4, r5, lr}
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	d904      	bls.n	800a5d0 <_raise_r+0x14>
 800a5c6:	2316      	movs	r3, #22
 800a5c8:	6003      	str	r3, [r0, #0]
 800a5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5d2:	b112      	cbz	r2, 800a5da <_raise_r+0x1e>
 800a5d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5d8:	b94b      	cbnz	r3, 800a5ee <_raise_r+0x32>
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f000 f830 	bl	800a640 <_getpid_r>
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	4601      	mov	r1, r0
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5ea:	f000 b817 	b.w	800a61c <_kill_r>
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d00a      	beq.n	800a608 <_raise_r+0x4c>
 800a5f2:	1c59      	adds	r1, r3, #1
 800a5f4:	d103      	bne.n	800a5fe <_raise_r+0x42>
 800a5f6:	2316      	movs	r3, #22
 800a5f8:	6003      	str	r3, [r0, #0]
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	e7e7      	b.n	800a5ce <_raise_r+0x12>
 800a5fe:	2100      	movs	r1, #0
 800a600:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a604:	4620      	mov	r0, r4
 800a606:	4798      	blx	r3
 800a608:	2000      	movs	r0, #0
 800a60a:	e7e0      	b.n	800a5ce <_raise_r+0x12>

0800a60c <raise>:
 800a60c:	4b02      	ldr	r3, [pc, #8]	@ (800a618 <raise+0xc>)
 800a60e:	4601      	mov	r1, r0
 800a610:	6818      	ldr	r0, [r3, #0]
 800a612:	f7ff bfd3 	b.w	800a5bc <_raise_r>
 800a616:	bf00      	nop
 800a618:	20000020 	.word	0x20000020

0800a61c <_kill_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d07      	ldr	r5, [pc, #28]	@ (800a63c <_kill_r+0x20>)
 800a620:	2300      	movs	r3, #0
 800a622:	4604      	mov	r4, r0
 800a624:	4608      	mov	r0, r1
 800a626:	4611      	mov	r1, r2
 800a628:	602b      	str	r3, [r5, #0]
 800a62a:	f7f7 ff43 	bl	80024b4 <_kill>
 800a62e:	1c43      	adds	r3, r0, #1
 800a630:	d102      	bne.n	800a638 <_kill_r+0x1c>
 800a632:	682b      	ldr	r3, [r5, #0]
 800a634:	b103      	cbz	r3, 800a638 <_kill_r+0x1c>
 800a636:	6023      	str	r3, [r4, #0]
 800a638:	bd38      	pop	{r3, r4, r5, pc}
 800a63a:	bf00      	nop
 800a63c:	200006d4 	.word	0x200006d4

0800a640 <_getpid_r>:
 800a640:	f7f7 bf30 	b.w	80024a4 <_getpid>

0800a644 <_malloc_usable_size_r>:
 800a644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a648:	1f18      	subs	r0, r3, #4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	bfbc      	itt	lt
 800a64e:	580b      	ldrlt	r3, [r1, r0]
 800a650:	18c0      	addlt	r0, r0, r3
 800a652:	4770      	bx	lr

0800a654 <__swhatbuf_r>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	460c      	mov	r4, r1
 800a658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a65c:	2900      	cmp	r1, #0
 800a65e:	b096      	sub	sp, #88	@ 0x58
 800a660:	4615      	mov	r5, r2
 800a662:	461e      	mov	r6, r3
 800a664:	da0d      	bge.n	800a682 <__swhatbuf_r+0x2e>
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a66c:	f04f 0100 	mov.w	r1, #0
 800a670:	bf14      	ite	ne
 800a672:	2340      	movne	r3, #64	@ 0x40
 800a674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a678:	2000      	movs	r0, #0
 800a67a:	6031      	str	r1, [r6, #0]
 800a67c:	602b      	str	r3, [r5, #0]
 800a67e:	b016      	add	sp, #88	@ 0x58
 800a680:	bd70      	pop	{r4, r5, r6, pc}
 800a682:	466a      	mov	r2, sp
 800a684:	f000 f848 	bl	800a718 <_fstat_r>
 800a688:	2800      	cmp	r0, #0
 800a68a:	dbec      	blt.n	800a666 <__swhatbuf_r+0x12>
 800a68c:	9901      	ldr	r1, [sp, #4]
 800a68e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a696:	4259      	negs	r1, r3
 800a698:	4159      	adcs	r1, r3
 800a69a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a69e:	e7eb      	b.n	800a678 <__swhatbuf_r+0x24>

0800a6a0 <__smakebuf_r>:
 800a6a0:	898b      	ldrh	r3, [r1, #12]
 800a6a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6a4:	079d      	lsls	r5, r3, #30
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	460c      	mov	r4, r1
 800a6aa:	d507      	bpl.n	800a6bc <__smakebuf_r+0x1c>
 800a6ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	6123      	str	r3, [r4, #16]
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	6163      	str	r3, [r4, #20]
 800a6b8:	b003      	add	sp, #12
 800a6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6bc:	ab01      	add	r3, sp, #4
 800a6be:	466a      	mov	r2, sp
 800a6c0:	f7ff ffc8 	bl	800a654 <__swhatbuf_r>
 800a6c4:	9f00      	ldr	r7, [sp, #0]
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	4639      	mov	r1, r7
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7fd fbd4 	bl	8007e78 <_malloc_r>
 800a6d0:	b948      	cbnz	r0, 800a6e6 <__smakebuf_r+0x46>
 800a6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6d6:	059a      	lsls	r2, r3, #22
 800a6d8:	d4ee      	bmi.n	800a6b8 <__smakebuf_r+0x18>
 800a6da:	f023 0303 	bic.w	r3, r3, #3
 800a6de:	f043 0302 	orr.w	r3, r3, #2
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	e7e2      	b.n	800a6ac <__smakebuf_r+0xc>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	6020      	str	r0, [r4, #0]
 800a6ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6ee:	81a3      	strh	r3, [r4, #12]
 800a6f0:	9b01      	ldr	r3, [sp, #4]
 800a6f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a6f6:	b15b      	cbz	r3, 800a710 <__smakebuf_r+0x70>
 800a6f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f000 f81d 	bl	800a73c <_isatty_r>
 800a702:	b128      	cbz	r0, 800a710 <__smakebuf_r+0x70>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f023 0303 	bic.w	r3, r3, #3
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	431d      	orrs	r5, r3
 800a714:	81a5      	strh	r5, [r4, #12]
 800a716:	e7cf      	b.n	800a6b8 <__smakebuf_r+0x18>

0800a718 <_fstat_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4d07      	ldr	r5, [pc, #28]	@ (800a738 <_fstat_r+0x20>)
 800a71c:	2300      	movs	r3, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	4608      	mov	r0, r1
 800a722:	4611      	mov	r1, r2
 800a724:	602b      	str	r3, [r5, #0]
 800a726:	f7f7 ff25 	bl	8002574 <_fstat>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	d102      	bne.n	800a734 <_fstat_r+0x1c>
 800a72e:	682b      	ldr	r3, [r5, #0]
 800a730:	b103      	cbz	r3, 800a734 <_fstat_r+0x1c>
 800a732:	6023      	str	r3, [r4, #0]
 800a734:	bd38      	pop	{r3, r4, r5, pc}
 800a736:	bf00      	nop
 800a738:	200006d4 	.word	0x200006d4

0800a73c <_isatty_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	4d06      	ldr	r5, [pc, #24]	@ (800a758 <_isatty_r+0x1c>)
 800a740:	2300      	movs	r3, #0
 800a742:	4604      	mov	r4, r0
 800a744:	4608      	mov	r0, r1
 800a746:	602b      	str	r3, [r5, #0]
 800a748:	f7f7 ff24 	bl	8002594 <_isatty>
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	d102      	bne.n	800a756 <_isatty_r+0x1a>
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	b103      	cbz	r3, 800a756 <_isatty_r+0x1a>
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	200006d4 	.word	0x200006d4

0800a75c <_init>:
 800a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75e:	bf00      	nop
 800a760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a762:	bc08      	pop	{r3}
 800a764:	469e      	mov	lr, r3
 800a766:	4770      	bx	lr

0800a768 <_fini>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	bf00      	nop
 800a76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76e:	bc08      	pop	{r3}
 800a770:	469e      	mov	lr, r3
 800a772:	4770      	bx	lr
